
nascerr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e04  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001fc0  08001fc0  00002fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002000  08002000  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002000  08002000  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002000  08002000  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002000  08002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002004  08002004  00003004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002008  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002014  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002014  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d21  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001597  00000000  00000000  0000ad5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0000c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053b  00000000  00000000  0000ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000017ea  00000000  00000000  0000cf53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079f3  00000000  00000000  0000e73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f534d  00000000  00000000  00016130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b47d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b10  00000000  00000000  0010b4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010cfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08001fa8 	.word	0x08001fa8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08001fa8 	.word	0x08001fa8

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fac3 	bl	800078a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f806 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f8b0 	bl	800036c <MX_GPIO_Init>
  MX_FMC_Init();
 800020c:	f000 f84a 	bl	80002a4 <MX_FMC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000210:	bf00      	nop
 8000212:	e7fd      	b.n	8000210 <main+0x14>

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b096      	sub	sp, #88	@ 0x58
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	2244      	movs	r2, #68	@ 0x44
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f001 fe93 	bl	8001f4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	463b      	mov	r3, r7
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000236:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800023a:	f000 fdcb 	bl	8000dd4 <HAL_PWREx_ControlVoltageScaling>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000244:	f000 f994 	bl	8000570 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000248:	2310      	movs	r3, #16
 800024a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000250:	2300      	movs	r3, #0
 8000252:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000254:	2360      	movs	r3, #96	@ 0x60
 8000256:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000258:	2300      	movs	r3, #0
 800025a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0314 	add.w	r3, r7, #20
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fe6b 	bl	8000f3c <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800026c:	f000 f980 	bl	8000570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000274:	2300      	movs	r3, #0
 8000276:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fa70 	bl	8001770 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000296:	f000 f96b 	bl	8000570 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3758      	adds	r7, #88	@ 0x58
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80002aa:	463b      	mov	r3, r7
 80002ac:	2220      	movs	r2, #32
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fe4c 	bl	8001f4e <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80002b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002b8:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80002bc:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80002be:	4b29      	ldr	r3, [pc, #164]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002c0:	4a29      	ldr	r2, [pc, #164]	@ (8000368 <MX_FMC_Init+0xc4>)
 80002c2:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80002c4:	4b27      	ldr	r3, [pc, #156]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80002ca:	4b26      	ldr	r3, [pc, #152]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80002d0:	4b24      	ldr	r3, [pc, #144]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80002d6:	4b23      	ldr	r3, [pc, #140]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002d8:	2210      	movs	r2, #16
 80002da:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80002dc:	4b21      	ldr	r3, [pc, #132]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002de:	2200      	movs	r2, #0
 80002e0:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80002e2:	4b20      	ldr	r3, [pc, #128]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80002e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80002ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000364 <MX_FMC_Init+0xc0>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000300:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <MX_FMC_Init+0xc0>)
 8000302:	2200      	movs	r2, #0
 8000304:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000306:	4b17      	ldr	r3, [pc, #92]	@ (8000364 <MX_FMC_Init+0xc0>)
 8000308:	2200      	movs	r2, #0
 800030a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800030c:	4b15      	ldr	r3, [pc, #84]	@ (8000364 <MX_FMC_Init+0xc0>)
 800030e:	2200      	movs	r2, #0
 8000310:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000312:	4b14      	ldr	r3, [pc, #80]	@ (8000364 <MX_FMC_Init+0xc0>)
 8000314:	2200      	movs	r2, #0
 8000316:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000318:	4b12      	ldr	r3, [pc, #72]	@ (8000364 <MX_FMC_Init+0xc0>)
 800031a:	2200      	movs	r2, #0
 800031c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800031e:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <MX_FMC_Init+0xc0>)
 8000320:	2200      	movs	r2, #0
 8000322:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000324:	230f      	movs	r3, #15
 8000326:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800032c:	23ff      	movs	r3, #255	@ 0xff
 800032e:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000334:	230f      	movs	r3, #15
 8000336:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000338:	2310      	movs	r3, #16
 800033a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800033c:	2311      	movs	r3, #17
 800033e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	4619      	mov	r1, r3
 800034a:	4806      	ldr	r0, [pc, #24]	@ (8000364 <MX_FMC_Init+0xc0>)
 800034c:	f001 fc96 	bl	8001c7c <HAL_SRAM_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_FMC_Init+0xb6>
  {
    Error_Handler( );
 8000356:	f000 f90b 	bl	8000570 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800035a:	bf00      	nop
 800035c:	3720      	adds	r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000028 	.word	0x20000028
 8000368:	a0000104 	.word	0xa0000104

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08e      	sub	sp, #56	@ 0x38
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b77      	ldr	r3, [pc, #476]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000386:	4a76      	ldr	r2, [pc, #472]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 8000388:	f043 0304 	orr.w	r3, r3, #4
 800038c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800038e:	4b74      	ldr	r3, [pc, #464]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000392:	f003 0304 	and.w	r3, r3, #4
 8000396:	623b      	str	r3, [r7, #32]
 8000398:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4b71      	ldr	r3, [pc, #452]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039e:	4a70      	ldr	r2, [pc, #448]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003a0:	f043 0320 	orr.w	r3, r3, #32
 80003a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003a6:	4b6e      	ldr	r3, [pc, #440]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003aa:	f003 0320 	and.w	r3, r3, #32
 80003ae:	61fb      	str	r3, [r7, #28]
 80003b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003b2:	4b6b      	ldr	r3, [pc, #428]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b6:	4a6a      	ldr	r2, [pc, #424]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003be:	4b68      	ldr	r3, [pc, #416]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003c6:	61bb      	str	r3, [r7, #24]
 80003c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b65      	ldr	r3, [pc, #404]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ce:	4a64      	ldr	r2, [pc, #400]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003d6:	4b62      	ldr	r3, [pc, #392]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80003e2:	4b5f      	ldr	r3, [pc, #380]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e6:	4a5e      	ldr	r2, [pc, #376]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ee:	4b5c      	ldr	r3, [pc, #368]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003f6:	613b      	str	r3, [r7, #16]
 80003f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003fa:	4b59      	ldr	r3, [pc, #356]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fe:	4a58      	ldr	r2, [pc, #352]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 8000400:	f043 0310 	orr.w	r3, r3, #16
 8000404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000406:	4b56      	ldr	r3, [pc, #344]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040a:	f003 0310 	and.w	r3, r3, #16
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000412:	4b53      	ldr	r3, [pc, #332]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000416:	4a52      	ldr	r2, [pc, #328]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 8000418:	f043 0302 	orr.w	r3, r3, #2
 800041c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800041e:	4b50      	ldr	r3, [pc, #320]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	f003 0302 	and.w	r3, r3, #2
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800042a:	4b4d      	ldr	r3, [pc, #308]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	4a4c      	ldr	r2, [pc, #304]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 8000430:	f043 0308 	orr.w	r3, r3, #8
 8000434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000436:	4b4a      	ldr	r3, [pc, #296]	@ (8000560 <MX_GPIO_Init+0x1f4>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	f003 0308 	and.w	r3, r3, #8
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000442:	f000 fd6b 	bl	8000f1c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ECC_SEL_0_Pin|ECC_SEL_1_Pin, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2103      	movs	r1, #3
 800044a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800044e:	f000 fc89 	bl	8000d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000458:	4842      	ldr	r0, [pc, #264]	@ (8000564 <MX_GPIO_Init+0x1f8>)
 800045a:	f000 fc83 	bl	8000d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2140      	movs	r1, #64	@ 0x40
 8000462:	4841      	ldr	r0, [pc, #260]	@ (8000568 <MX_GPIO_Init+0x1fc>)
 8000464:	f000 fc7e 	bl	8000d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000468:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800046c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800046e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000472:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800047c:	4619      	mov	r1, r3
 800047e:	483b      	ldr	r0, [pc, #236]	@ (800056c <MX_GPIO_Init+0x200>)
 8000480:	f000 fade 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECC_SEL_0_Pin ECC_SEL_1_Pin */
  GPIO_InitStruct.Pin = ECC_SEL_0_Pin|ECC_SEL_1_Pin;
 8000484:	2303      	movs	r3, #3
 8000486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2300      	movs	r3, #0
 8000492:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000498:	4619      	mov	r1, r3
 800049a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800049e:	f000 facf 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80004a2:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80004a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2300      	movs	r3, #0
 80004b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004b8:	4619      	mov	r1, r3
 80004ba:	482a      	ldr	r0, [pc, #168]	@ (8000564 <MX_GPIO_Init+0x1f8>)
 80004bc:	f000 fac0 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80004c0:	2320      	movs	r3, #32
 80004c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c4:	2300      	movs	r3, #0
 80004c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80004cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004d0:	4619      	mov	r1, r3
 80004d2:	4825      	ldr	r0, [pc, #148]	@ (8000568 <MX_GPIO_Init+0x1fc>)
 80004d4:	f000 fab4 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80004d8:	2340      	movs	r3, #64	@ 0x40
 80004da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2300      	movs	r3, #0
 80004e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80004e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ec:	4619      	mov	r1, r3
 80004ee:	481e      	ldr	r0, [pc, #120]	@ (8000568 <MX_GPIO_Init+0x1fc>)
 80004f0:	f000 faa6 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_TX_Pin STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80004f4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80004f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fa:	2302      	movs	r3, #2
 80004fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000502:	2303      	movs	r3, #3
 8000504:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000506:	2308      	movs	r3, #8
 8000508:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800050a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800050e:	4619      	mov	r1, r3
 8000510:	4815      	ldr	r0, [pc, #84]	@ (8000568 <MX_GPIO_Init+0x1fc>)
 8000512:	f000 fa95 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000516:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800051a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051c:	2302      	movs	r3, #2
 800051e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000524:	2303      	movs	r3, #3
 8000526:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000528:	230a      	movs	r3, #10
 800052a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000530:	4619      	mov	r1, r3
 8000532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000536:	f000 fa83 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800053a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800054c:	4619      	mov	r1, r3
 800054e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000552:	f000 fa75 	bl	8000a40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000556:	bf00      	nop
 8000558:	3738      	adds	r7, #56	@ 0x38
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	48000400 	.word	0x48000400
 8000568:	48001800 	.word	0x48001800
 800056c:	48000800 	.word	0x48000800

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <Error_Handler+0x8>

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <HAL_MspInit+0x44>)
 8000584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000586:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <HAL_MspInit+0x44>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6613      	str	r3, [r2, #96]	@ 0x60
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <HAL_MspInit+0x44>)
 8000590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <HAL_MspInit+0x44>)
 800059c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800059e:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <HAL_MspInit+0x44>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <HAL_MspInit+0x44>)
 80005a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80005d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000688 <HAL_FMC_MspInit+0xc4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d14e      	bne.n	800067e <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 80005e0:	4b29      	ldr	r3, [pc, #164]	@ (8000688 <HAL_FMC_MspInit+0xc4>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <HAL_FMC_MspInit+0xc8>)
 80005e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80005ea:	4a28      	ldr	r2, [pc, #160]	@ (800068c <HAL_FMC_MspInit+0xc8>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80005f2:	4b26      	ldr	r3, [pc, #152]	@ (800068c <HAL_FMC_MspInit+0xc8>)
 80005f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005fe:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8000602:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000610:	230c      	movs	r3, #12
 8000612:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	481d      	ldr	r0, [pc, #116]	@ (8000690 <HAL_FMC_MspInit+0xcc>)
 800061a:	f000 fa11 	bl	8000a40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800061e:	2301      	movs	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	2302      	movs	r3, #2
 8000624:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062a:	2303      	movs	r3, #3
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800062e:	230c      	movs	r3, #12
 8000630:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4817      	ldr	r0, [pc, #92]	@ (8000694 <HAL_FMC_MspInit+0xd0>)
 8000638:	f000 fa02 	bl	8000a40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800063c:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000640:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000642:	2302      	movs	r3, #2
 8000644:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064a:	2303      	movs	r3, #3
 800064c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800064e:	230c      	movs	r3, #12
 8000650:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4619      	mov	r1, r3
 8000656:	4810      	ldr	r0, [pc, #64]	@ (8000698 <HAL_FMC_MspInit+0xd4>)
 8000658:	f000 f9f2 	bl	8000a40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800065c:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000660:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066a:	2303      	movs	r3, #3
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800066e:	230c      	movs	r3, #12
 8000670:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4619      	mov	r1, r3
 8000676:	4809      	ldr	r0, [pc, #36]	@ (800069c <HAL_FMC_MspInit+0xd8>)
 8000678:	f000 f9e2 	bl	8000a40 <HAL_GPIO_Init>
 800067c:	e000      	b.n	8000680 <HAL_FMC_MspInit+0xbc>
    return;
 800067e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000078 	.word	0x20000078
 800068c:	40021000 	.word	0x40021000
 8000690:	48001400 	.word	0x48001400
 8000694:	48001800 	.word	0x48001800
 8000698:	48001000 	.word	0x48001000
 800069c:	48000c00 	.word	0x48000c00

080006a0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006a8:	f7ff ff8c 	bl	80005c4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <NMI_Handler+0x4>

080006bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <MemManage_Handler+0x4>

080006cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <UsageFault_Handler+0x4>

080006dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070a:	f000 f893 	bl	8000834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <SystemInit+0x20>)
 800071a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800071e:	4a05      	ldr	r2, [pc, #20]	@ (8000734 <SystemInit+0x20>)
 8000720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000738:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000770 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800073c:	f7ff ffea 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480c      	ldr	r0, [pc, #48]	@ (8000774 <LoopForever+0x6>)
  ldr r1, =_edata
 8000742:	490d      	ldr	r1, [pc, #52]	@ (8000778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000744:	4a0d      	ldr	r2, [pc, #52]	@ (800077c <LoopForever+0xe>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a0a      	ldr	r2, [pc, #40]	@ (8000780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000758:	4c0a      	ldr	r4, [pc, #40]	@ (8000784 <LoopForever+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000766:	f001 fbfb 	bl	8001f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800076a:	f7ff fd47 	bl	80001fc <main>

0800076e <LoopForever>:

LoopForever:
    b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000770:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800077c:	08002008 	.word	0x08002008
  ldr r2, =_sbss
 8000780:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000784:	20000080 	.word	0x20000080

08000788 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_IRQHandler>

0800078a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 f91f 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f80e 	bl	80007bc <HAL_InitTick>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	e001      	b.n	80007b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007ac:	f7ff fee6 	bl	800057c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <HAL_InitTick+0x6c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d023      	beq.n	8000818 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007d0:	4b16      	ldr	r3, [pc, #88]	@ (800082c <HAL_InitTick+0x70>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <HAL_InitTick+0x6c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f91d 	bl	8000a26 <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10f      	bne.n	8000812 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b0f      	cmp	r3, #15
 80007f6:	d809      	bhi.n	800080c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f8:	2200      	movs	r2, #0
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	f000 f8f5 	bl	80009ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000804:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <HAL_InitTick+0x74>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	e007      	b.n	800081c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	73fb      	strb	r3, [r7, #15]
 8000810:	e004      	b.n	800081c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]
 8000816:	e001      	b.n	800081c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800081c:	7bfb      	ldrb	r3, [r7, #15]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000008 	.word	0x20000008
 800082c:	20000000 	.word	0x20000000
 8000830:	20000004 	.word	0x20000004

08000834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_IncTick+0x20>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_IncTick+0x24>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <HAL_IncTick+0x24>)
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000008 	.word	0x20000008
 8000858:	2000007c 	.word	0x2000007c

0800085c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b03      	ldr	r3, [pc, #12]	@ (8000870 <HAL_GetTick+0x14>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	2000007c 	.word	0x2000007c

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800089c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a6:	4a04      	ldr	r2, [pc, #16]	@ (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	60d3      	str	r3, [r2, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	@ (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	@ (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	@ 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	@ 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009a4:	d301      	bcc.n	80009aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00f      	b.n	80009ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009aa:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <SysTick_Config+0x40>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b2:	210f      	movs	r1, #15
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f7ff ff8e 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <SysTick_Config+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	4b04      	ldr	r3, [pc, #16]	@ (80009d4 <SysTick_Config+0x40>)
 80009c4:	2207      	movs	r2, #7
 80009c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	e000e010 	.word	0xe000e010

080009d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff47 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a00:	f7ff ff5c 	bl	80008bc <__NVIC_GetPriorityGrouping>
 8000a04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff ff8e 	bl	800092c <NVIC_EncodePriority>
 8000a10:	4602      	mov	r2, r0
 8000a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff5d 	bl	80008d8 <__NVIC_SetPriority>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffb0 	bl	8000994 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4e:	e166      	b.n	8000d1e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	2101      	movs	r1, #1
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f000 8158 	beq.w	8000d18 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d005      	beq.n	8000a80 <HAL_GPIO_Init+0x40>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d130      	bne.n	8000ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	f003 0201 	and.w	r2, r3, #1
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d017      	beq.n	8000b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	2203      	movs	r2, #3
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d123      	bne.n	8000b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	08da      	lsrs	r2, r3, #3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3208      	adds	r2, #8
 8000b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	220f      	movs	r2, #15
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	691a      	ldr	r2, [r3, #16]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	08da      	lsrs	r2, r3, #3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3208      	adds	r2, #8
 8000b6c:	6939      	ldr	r1, [r7, #16]
 8000b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0203 	and.w	r2, r3, #3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 80b2 	beq.w	8000d18 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb4:	4b61      	ldr	r3, [pc, #388]	@ (8000d3c <HAL_GPIO_Init+0x2fc>)
 8000bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb8:	4a60      	ldr	r2, [pc, #384]	@ (8000d3c <HAL_GPIO_Init+0x2fc>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8000d3c <HAL_GPIO_Init+0x2fc>)
 8000bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bcc:	4a5c      	ldr	r2, [pc, #368]	@ (8000d40 <HAL_GPIO_Init+0x300>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bf6:	d02b      	beq.n	8000c50 <HAL_GPIO_Init+0x210>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a52      	ldr	r2, [pc, #328]	@ (8000d44 <HAL_GPIO_Init+0x304>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d025      	beq.n	8000c4c <HAL_GPIO_Init+0x20c>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a51      	ldr	r2, [pc, #324]	@ (8000d48 <HAL_GPIO_Init+0x308>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d01f      	beq.n	8000c48 <HAL_GPIO_Init+0x208>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a50      	ldr	r2, [pc, #320]	@ (8000d4c <HAL_GPIO_Init+0x30c>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d019      	beq.n	8000c44 <HAL_GPIO_Init+0x204>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a4f      	ldr	r2, [pc, #316]	@ (8000d50 <HAL_GPIO_Init+0x310>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d013      	beq.n	8000c40 <HAL_GPIO_Init+0x200>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a4e      	ldr	r2, [pc, #312]	@ (8000d54 <HAL_GPIO_Init+0x314>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d00d      	beq.n	8000c3c <HAL_GPIO_Init+0x1fc>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a4d      	ldr	r2, [pc, #308]	@ (8000d58 <HAL_GPIO_Init+0x318>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d007      	beq.n	8000c38 <HAL_GPIO_Init+0x1f8>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8000d5c <HAL_GPIO_Init+0x31c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <HAL_GPIO_Init+0x1f4>
 8000c30:	2307      	movs	r3, #7
 8000c32:	e00e      	b.n	8000c52 <HAL_GPIO_Init+0x212>
 8000c34:	2308      	movs	r3, #8
 8000c36:	e00c      	b.n	8000c52 <HAL_GPIO_Init+0x212>
 8000c38:	2306      	movs	r3, #6
 8000c3a:	e00a      	b.n	8000c52 <HAL_GPIO_Init+0x212>
 8000c3c:	2305      	movs	r3, #5
 8000c3e:	e008      	b.n	8000c52 <HAL_GPIO_Init+0x212>
 8000c40:	2304      	movs	r3, #4
 8000c42:	e006      	b.n	8000c52 <HAL_GPIO_Init+0x212>
 8000c44:	2303      	movs	r3, #3
 8000c46:	e004      	b.n	8000c52 <HAL_GPIO_Init+0x212>
 8000c48:	2302      	movs	r3, #2
 8000c4a:	e002      	b.n	8000c52 <HAL_GPIO_Init+0x212>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <HAL_GPIO_Init+0x212>
 8000c50:	2300      	movs	r3, #0
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	f002 0203 	and.w	r2, r2, #3
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	4093      	lsls	r3, r2
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c62:	4937      	ldr	r1, [pc, #220]	@ (8000d40 <HAL_GPIO_Init+0x300>)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	3302      	adds	r3, #2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c70:	4b3b      	ldr	r3, [pc, #236]	@ (8000d60 <HAL_GPIO_Init+0x320>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c94:	4a32      	ldr	r2, [pc, #200]	@ (8000d60 <HAL_GPIO_Init+0x320>)
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c9a:	4b31      	ldr	r3, [pc, #196]	@ (8000d60 <HAL_GPIO_Init+0x320>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cbe:	4a28      	ldr	r2, [pc, #160]	@ (8000d60 <HAL_GPIO_Init+0x320>)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cc4:	4b26      	ldr	r3, [pc, #152]	@ (8000d60 <HAL_GPIO_Init+0x320>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d60 <HAL_GPIO_Init+0x320>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <HAL_GPIO_Init+0x320>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d12:	4a13      	ldr	r2, [pc, #76]	@ (8000d60 <HAL_GPIO_Init+0x320>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	fa22 f303 	lsr.w	r3, r2, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f47f ae91 	bne.w	8000a50 <HAL_GPIO_Init+0x10>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	371c      	adds	r7, #28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	48000400 	.word	0x48000400
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	48000c00 	.word	0x48000c00
 8000d50:	48001000 	.word	0x48001000
 8000d54:	48001400 	.word	0x48001400
 8000d58:	48001800 	.word	0x48001800
 8000d5c:	48001c00 	.word	0x48001c00
 8000d60:	40010400 	.word	0x40010400

08000d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
 8000d70:	4613      	mov	r3, r2
 8000d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d74:	787b      	ldrb	r3, [r7, #1]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d7a:	887a      	ldrh	r2, [r7, #2]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d80:	e002      	b.n	8000d88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d98:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000da4:	d102      	bne.n	8000dac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000daa:	e00b      	b.n	8000dc4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dba:	d102      	bne.n	8000dc2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000dbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dc0:	e000      	b.n	8000dc4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000dc2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d141      	bne.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000de2:	4b4b      	ldr	r3, [pc, #300]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dee:	d131      	bne.n	8000e54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000df0:	4b47      	ldr	r3, [pc, #284]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df6:	4a46      	ldr	r2, [pc, #280]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000dfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e00:	4b43      	ldr	r3, [pc, #268]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e08:	4a41      	ldr	r2, [pc, #260]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000e10:	4b40      	ldr	r3, [pc, #256]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2232      	movs	r2, #50	@ 0x32
 8000e16:	fb02 f303 	mul.w	r3, r2, r3
 8000e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0c9b      	lsrs	r3, r3, #18
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e26:	e002      	b.n	8000e2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e2e:	4b38      	ldr	r3, [pc, #224]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e3a:	d102      	bne.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f2      	bne.n	8000e28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e42:	4b33      	ldr	r3, [pc, #204]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e4e:	d158      	bne.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e057      	b.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e54:	4b2e      	ldr	r3, [pc, #184]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e64:	e04d      	b.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e6c:	d141      	bne.n	8000ef2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e6e:	4b28      	ldr	r3, [pc, #160]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e7a:	d131      	bne.n	8000ee0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e7c:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e82:	4a23      	ldr	r2, [pc, #140]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8c:	4b20      	ldr	r3, [pc, #128]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e94:	4a1e      	ldr	r2, [pc, #120]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2232      	movs	r2, #50	@ 0x32
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eac:	0c9b      	lsrs	r3, r3, #18
 8000eae:	3301      	adds	r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb2:	e002      	b.n	8000eba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ec6:	d102      	bne.n	8000ece <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f2      	bne.n	8000eb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eda:	d112      	bne.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e011      	b.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000ef0:	e007      	b.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f00:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40007000 	.word	0x40007000
 8000f14:	20000000 	.word	0x20000000
 8000f18:	431bde83 	.word	0x431bde83

08000f1c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f2a:	6053      	str	r3, [r2, #4]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40007000 	.word	0x40007000

08000f3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f000 bc08 	b.w	8001760 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f50:	4b96      	ldr	r3, [pc, #600]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f5a:	4b94      	ldr	r3, [pc, #592]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80e4 	beq.w	800113a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d007      	beq.n	8000f88 <HAL_RCC_OscConfig+0x4c>
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	2b0c      	cmp	r3, #12
 8000f7c:	f040 808b 	bne.w	8001096 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	f040 8087 	bne.w	8001096 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f88:	4b88      	ldr	r3, [pc, #544]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x64>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e3df      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1a      	ldr	r2, [r3, #32]
 8000fa4:	4b81      	ldr	r3, [pc, #516]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d004      	beq.n	8000fba <HAL_RCC_OscConfig+0x7e>
 8000fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fb8:	e005      	b.n	8000fc6 <HAL_RCC_OscConfig+0x8a>
 8000fba:	4b7c      	ldr	r3, [pc, #496]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8000fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d223      	bcs.n	8001012 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fd94 	bl	8001afc <RCC_SetFlashLatencyFromMSIRange>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e3c0      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fde:	4b73      	ldr	r3, [pc, #460]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a72      	ldr	r2, [pc, #456]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b70      	ldr	r3, [pc, #448]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	496d      	ldr	r1, [pc, #436]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ffc:	4b6b      	ldr	r3, [pc, #428]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	4968      	ldr	r1, [pc, #416]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
 8001010:	e025      	b.n	800105e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001012:	4b66      	ldr	r3, [pc, #408]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a65      	ldr	r2, [pc, #404]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b63      	ldr	r3, [pc, #396]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4960      	ldr	r1, [pc, #384]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 800102c:	4313      	orrs	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001030:	4b5e      	ldr	r3, [pc, #376]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	495b      	ldr	r1, [pc, #364]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001040:	4313      	orrs	r3, r2
 8001042:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d109      	bne.n	800105e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fd54 	bl	8001afc <RCC_SetFlashLatencyFromMSIRange>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e380      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800105e:	f000 fcc1 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8001062:	4602      	mov	r2, r0
 8001064:	4b51      	ldr	r3, [pc, #324]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	4950      	ldr	r1, [pc, #320]	@ (80011b0 <HAL_RCC_OscConfig+0x274>)
 8001070:	5ccb      	ldrb	r3, [r1, r3]
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	fa22 f303 	lsr.w	r3, r2, r3
 800107a:	4a4e      	ldr	r2, [pc, #312]	@ (80011b4 <HAL_RCC_OscConfig+0x278>)
 800107c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800107e:	4b4e      	ldr	r3, [pc, #312]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fb9a 	bl	80007bc <HAL_InitTick>
 8001088:	4603      	mov	r3, r0
 800108a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d052      	beq.n	8001138 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	e364      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d032      	beq.n	8001104 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800109e:	4b43      	ldr	r3, [pc, #268]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a42      	ldr	r2, [pc, #264]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010aa:	f7ff fbd7 	bl	800085c <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010b2:	f7ff fbd3 	bl	800085c <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e34d      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010c4:	4b39      	ldr	r3, [pc, #228]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d0:	4b36      	ldr	r3, [pc, #216]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a35      	ldr	r2, [pc, #212]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b33      	ldr	r3, [pc, #204]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	4930      	ldr	r1, [pc, #192]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ee:	4b2f      	ldr	r3, [pc, #188]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	492b      	ldr	r1, [pc, #172]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	604b      	str	r3, [r1, #4]
 8001102:	e01a      	b.n	800113a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001104:	4b29      	ldr	r3, [pc, #164]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a28      	ldr	r2, [pc, #160]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 800110a:	f023 0301 	bic.w	r3, r3, #1
 800110e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001110:	f7ff fba4 	bl	800085c <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001118:	f7ff fba0 	bl	800085c <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e31a      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800112a:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x1dc>
 8001136:	e000      	b.n	800113a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d073      	beq.n	800122e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b08      	cmp	r3, #8
 800114a:	d005      	beq.n	8001158 <HAL_RCC_OscConfig+0x21c>
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2b0c      	cmp	r3, #12
 8001150:	d10e      	bne.n	8001170 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d10b      	bne.n	8001170 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d063      	beq.n	800122c <HAL_RCC_OscConfig+0x2f0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d15f      	bne.n	800122c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e2f7      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001178:	d106      	bne.n	8001188 <HAL_RCC_OscConfig+0x24c>
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a0b      	ldr	r2, [pc, #44]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e025      	b.n	80011d4 <HAL_RCC_OscConfig+0x298>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001190:	d114      	bne.n	80011bc <HAL_RCC_OscConfig+0x280>
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a02      	ldr	r2, [pc, #8]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e013      	b.n	80011d4 <HAL_RCC_OscConfig+0x298>
 80011ac:	40021000 	.word	0x40021000
 80011b0:	08001fc0 	.word	0x08001fc0
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000004 	.word	0x20000004
 80011bc:	4ba0      	ldr	r3, [pc, #640]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a9f      	ldr	r2, [pc, #636]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80011c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a9c      	ldr	r2, [pc, #624]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011dc:	f7ff fb3e 	bl	800085c <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fb3a 	bl	800085c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	@ 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e2b4      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011f6:	4b92      	ldr	r3, [pc, #584]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x2a8>
 8001202:	e014      	b.n	800122e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001204:	f7ff fb2a 	bl	800085c <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fb26 	bl	800085c <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	@ 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e2a0      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800121e:	4b88      	ldr	r3, [pc, #544]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x2d0>
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d060      	beq.n	80012fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d005      	beq.n	800124c <HAL_RCC_OscConfig+0x310>
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2b0c      	cmp	r3, #12
 8001244:	d119      	bne.n	800127a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d116      	bne.n	800127a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800124c:	4b7c      	ldr	r3, [pc, #496]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_OscConfig+0x328>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e27d      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b76      	ldr	r3, [pc, #472]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	061b      	lsls	r3, r3, #24
 8001272:	4973      	ldr	r1, [pc, #460]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001278:	e040      	b.n	80012fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d023      	beq.n	80012ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001282:	4b6f      	ldr	r3, [pc, #444]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a6e      	ldr	r2, [pc, #440]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128e:	f7ff fae5 	bl	800085c <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001296:	f7ff fae1 	bl	800085c <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e25b      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012a8:	4b65      	ldr	r3, [pc, #404]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b4:	4b62      	ldr	r3, [pc, #392]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	061b      	lsls	r3, r3, #24
 80012c2:	495f      	ldr	r1, [pc, #380]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
 80012c8:	e018      	b.n	80012fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80012d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff fac1 	bl	800085c <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fabd 	bl	800085c <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e237      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f0:	4b53      	ldr	r3, [pc, #332]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f0      	bne.n	80012de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d03c      	beq.n	8001382 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d01c      	beq.n	800134a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001310:	4b4b      	ldr	r3, [pc, #300]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001316:	4a4a      	ldr	r2, [pc, #296]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001320:	f7ff fa9c 	bl	800085c <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff fa98 	bl	800085c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e212      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800133a:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 800133c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0ef      	beq.n	8001328 <HAL_RCC_OscConfig+0x3ec>
 8001348:	e01b      	b.n	8001382 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800134a:	4b3d      	ldr	r3, [pc, #244]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 800134c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001350:	4a3b      	ldr	r2, [pc, #236]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001352:	f023 0301 	bic.w	r3, r3, #1
 8001356:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135a:	f7ff fa7f 	bl	800085c <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001362:	f7ff fa7b 	bl	800085c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e1f5      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001374:	4b32      	ldr	r3, [pc, #200]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1ef      	bne.n	8001362 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80a6 	beq.w	80014dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001394:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10d      	bne.n	80013bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	4b27      	ldr	r3, [pc, #156]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80013a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a4:	4a26      	ldr	r2, [pc, #152]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80013a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ac:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 80013ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b8:	2301      	movs	r3, #1
 80013ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013bc:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <HAL_RCC_OscConfig+0x508>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d118      	bne.n	80013fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001444 <HAL_RCC_OscConfig+0x508>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001444 <HAL_RCC_OscConfig+0x508>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d4:	f7ff fa42 	bl	800085c <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013dc:	f7ff fa3e 	bl	800085c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1b8      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_RCC_OscConfig+0x508>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d108      	bne.n	8001414 <HAL_RCC_OscConfig+0x4d8>
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001412:	e029      	b.n	8001468 <HAL_RCC_OscConfig+0x52c>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b05      	cmp	r3, #5
 800141a:	d115      	bne.n	8001448 <HAL_RCC_OscConfig+0x50c>
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 800141e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001422:	4a07      	ldr	r2, [pc, #28]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800142c:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001432:	4a03      	ldr	r2, [pc, #12]	@ (8001440 <HAL_RCC_OscConfig+0x504>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800143c:	e014      	b.n	8001468 <HAL_RCC_OscConfig+0x52c>
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	40007000 	.word	0x40007000
 8001448:	4b9d      	ldr	r3, [pc, #628]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 800144a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800144e:	4a9c      	ldr	r2, [pc, #624]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 8001450:	f023 0301 	bic.w	r3, r3, #1
 8001454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001458:	4b99      	ldr	r3, [pc, #612]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 800145a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800145e:	4a98      	ldr	r2, [pc, #608]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d016      	beq.n	800149e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001470:	f7ff f9f4 	bl	800085c <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f7ff f9f0 	bl	800085c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e168      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800148e:	4b8c      	ldr	r3, [pc, #560]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 8001490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ed      	beq.n	8001478 <HAL_RCC_OscConfig+0x53c>
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149e:	f7ff f9dd 	bl	800085c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff f9d9 	bl	800085c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e151      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014bc:	4b80      	ldr	r3, [pc, #512]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 80014be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ed      	bne.n	80014a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ca:	7ffb      	ldrb	r3, [r7, #31]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d0:	4b7b      	ldr	r3, [pc, #492]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	4a7a      	ldr	r2, [pc, #488]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 80014d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0320 	and.w	r3, r3, #32
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d03c      	beq.n	8001562 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01c      	beq.n	800152a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014f0:	4b73      	ldr	r3, [pc, #460]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 80014f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014f6:	4a72      	ldr	r2, [pc, #456]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001500:	f7ff f9ac 	bl	800085c <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001508:	f7ff f9a8 	bl	800085c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e122      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800151a:	4b69      	ldr	r3, [pc, #420]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 800151c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0ef      	beq.n	8001508 <HAL_RCC_OscConfig+0x5cc>
 8001528:	e01b      	b.n	8001562 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800152a:	4b65      	ldr	r3, [pc, #404]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 800152c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001530:	4a63      	ldr	r2, [pc, #396]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153a:	f7ff f98f 	bl	800085c <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001542:	f7ff f98b 	bl	800085c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e105      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001554:	4b5a      	ldr	r3, [pc, #360]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 8001556:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1ef      	bne.n	8001542 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80f9 	beq.w	800175e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001570:	2b02      	cmp	r3, #2
 8001572:	f040 80cf 	bne.w	8001714 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001576:	4b52      	ldr	r3, [pc, #328]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f003 0203 	and.w	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001586:	429a      	cmp	r2, r3
 8001588:	d12c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001594:	3b01      	subs	r3, #1
 8001596:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d123      	bne.n	80015e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d11b      	bne.n	80015e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d113      	bne.n	80015e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015c6:	085b      	lsrs	r3, r3, #1
 80015c8:	3b01      	subs	r3, #1
 80015ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d109      	bne.n	80015e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	085b      	lsrs	r3, r3, #1
 80015dc:	3b01      	subs	r3, #1
 80015de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d071      	beq.n	80016c8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d068      	beq.n	80016bc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015ea:	4b35      	ldr	r3, [pc, #212]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d105      	bne.n	8001602 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80015f6:	4b32      	ldr	r3, [pc, #200]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e0ac      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001606:	4b2e      	ldr	r3, [pc, #184]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2d      	ldr	r2, [pc, #180]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 800160c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001610:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001612:	f7ff f923 	bl	800085c <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff f91f 	bl	800085c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e099      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800162c:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001638:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <HAL_RCC_OscConfig+0x788>)
 800163e:	4013      	ands	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001648:	3a01      	subs	r2, #1
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	4311      	orrs	r1, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001652:	0212      	lsls	r2, r2, #8
 8001654:	4311      	orrs	r1, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800165a:	0852      	lsrs	r2, r2, #1
 800165c:	3a01      	subs	r2, #1
 800165e:	0552      	lsls	r2, r2, #21
 8001660:	4311      	orrs	r1, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001666:	0852      	lsrs	r2, r2, #1
 8001668:	3a01      	subs	r2, #1
 800166a:	0652      	lsls	r2, r2, #25
 800166c:	4311      	orrs	r1, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001672:	06d2      	lsls	r2, r2, #27
 8001674:	430a      	orrs	r2, r1
 8001676:	4912      	ldr	r1, [pc, #72]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 8001678:	4313      	orrs	r3, r2
 800167a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800167c:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0f      	ldr	r2, [pc, #60]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 8001682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001686:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a0c      	ldr	r2, [pc, #48]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 800168e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001692:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001694:	f7ff f8e2 	bl	800085c <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff f8de 	bl	800085c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e058      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <HAL_RCC_OscConfig+0x784>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016ba:	e050      	b.n	800175e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e04f      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
 80016c0:	40021000 	.word	0x40021000
 80016c4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c8:	4b27      	ldr	r3, [pc, #156]	@ (8001768 <HAL_RCC_OscConfig+0x82c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d144      	bne.n	800175e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016d4:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <HAL_RCC_OscConfig+0x82c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a23      	ldr	r2, [pc, #140]	@ (8001768 <HAL_RCC_OscConfig+0x82c>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016e0:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <HAL_RCC_OscConfig+0x82c>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4a20      	ldr	r2, [pc, #128]	@ (8001768 <HAL_RCC_OscConfig+0x82c>)
 80016e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016ec:	f7ff f8b6 	bl	800085c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff f8b2 	bl	800085c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e02c      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001706:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <HAL_RCC_OscConfig+0x82c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x7b8>
 8001712:	e024      	b.n	800175e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d01f      	beq.n	800175a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <HAL_RCC_OscConfig+0x82c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <HAL_RCC_OscConfig+0x82c>)
 8001720:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff f899 	bl	800085c <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff f895 	bl	800085c <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e00f      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_RCC_OscConfig+0x82c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_RCC_OscConfig+0x82c>)
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	4905      	ldr	r1, [pc, #20]	@ (8001768 <HAL_RCC_OscConfig+0x82c>)
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_RCC_OscConfig+0x830>)
 8001754:	4013      	ands	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
 8001758:	e001      	b.n	800175e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021000 	.word	0x40021000
 800176c:	feeefffc 	.word	0xfeeefffc

08001770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e11d      	b.n	80019c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b90      	ldr	r3, [pc, #576]	@ (80019cc <HAL_RCC_ClockConfig+0x25c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d910      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b8d      	ldr	r3, [pc, #564]	@ (80019cc <HAL_RCC_ClockConfig+0x25c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 020f 	bic.w	r2, r3, #15
 800179e:	498b      	ldr	r1, [pc, #556]	@ (80019cc <HAL_RCC_ClockConfig+0x25c>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b89      	ldr	r3, [pc, #548]	@ (80019cc <HAL_RCC_ClockConfig+0x25c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e105      	b.n	80019c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d010      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	4b81      	ldr	r3, [pc, #516]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d908      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b7e      	ldr	r3, [pc, #504]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	497b      	ldr	r1, [pc, #492]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d079      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d11e      	bne.n	8001838 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fa:	4b75      	ldr	r3, [pc, #468]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0dc      	b.n	80019c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800180a:	f000 f9d1 	bl	8001bb0 <RCC_GetSysClockFreqFromPLLSource>
 800180e:	4603      	mov	r3, r0
 8001810:	4a70      	ldr	r2, [pc, #448]	@ (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d946      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001816:	4b6e      	ldr	r3, [pc, #440]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d140      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001822:	4b6b      	ldr	r3, [pc, #428]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800182a:	4a69      	ldr	r2, [pc, #420]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001830:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e035      	b.n	80018a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d107      	bne.n	8001850 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001840:	4b63      	ldr	r3, [pc, #396]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d115      	bne.n	8001878 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0b9      	b.n	80019c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d107      	bne.n	8001868 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001858:	4b5d      	ldr	r3, [pc, #372]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0ad      	b.n	80019c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001868:	4b59      	ldr	r3, [pc, #356]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0a5      	b.n	80019c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001878:	f000 f8b4 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 800187c:	4603      	mov	r3, r0
 800187e:	4a55      	ldr	r2, [pc, #340]	@ (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d90f      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001884:	4b52      	ldr	r3, [pc, #328]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001890:	4b4f      	ldr	r3, [pc, #316]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001898:	4a4d      	ldr	r2, [pc, #308]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 800189a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800189e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018a4:	4b4a      	ldr	r3, [pc, #296]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 0203 	bic.w	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4947      	ldr	r1, [pc, #284]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018b6:	f7fe ffd1 	bl	800085c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018be:	f7fe ffcd 	bl	800085c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e077      	b.n	80019c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d4:	4b3e      	ldr	r3, [pc, #248]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 020c 	and.w	r2, r3, #12
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d1eb      	bne.n	80018be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2b80      	cmp	r3, #128	@ 0x80
 80018ea:	d105      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018ec:	4b38      	ldr	r3, [pc, #224]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a37      	ldr	r2, [pc, #220]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80018f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d010      	beq.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001910:	429a      	cmp	r2, r3
 8001912:	d208      	bcs.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b2e      	ldr	r3, [pc, #184]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	492b      	ldr	r1, [pc, #172]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001926:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <HAL_RCC_ClockConfig+0x25c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d210      	bcs.n	8001956 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001934:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <HAL_RCC_ClockConfig+0x25c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 020f 	bic.w	r2, r3, #15
 800193c:	4923      	ldr	r1, [pc, #140]	@ (80019cc <HAL_RCC_ClockConfig+0x25c>)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001944:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <HAL_RCC_ClockConfig+0x25c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e036      	b.n	80019c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001962:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4918      	ldr	r1, [pc, #96]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4910      	ldr	r1, [pc, #64]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001994:	f000 f826 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <HAL_RCC_ClockConfig+0x260>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	490c      	ldr	r1, [pc, #48]	@ (80019d8 <HAL_RCC_ClockConfig+0x268>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <HAL_RCC_ClockConfig+0x26c>)
 80019b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019b4:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_RCC_ClockConfig+0x270>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe feff 	bl	80007bc <HAL_InitTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40022000 	.word	0x40022000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	04c4b400 	.word	0x04c4b400
 80019d8:	08001fc0 	.word	0x08001fc0
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f2:	4b3e      	ldr	r3, [pc, #248]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019fc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x34>
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d121      	bne.n	8001a56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d11e      	bne.n	8001a56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a18:	4b34      	ldr	r3, [pc, #208]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a24:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e005      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a34:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a40:	4a2b      	ldr	r2, [pc, #172]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10d      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d102      	bne.n	8001a62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a5c:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	e004      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a68:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d134      	bne.n	8001adc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a72:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d003      	beq.n	8001a8a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d003      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0xac>
 8001a88:	e005      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a8c:	617b      	str	r3, [r7, #20]
      break;
 8001a8e:	e005      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a92:	617b      	str	r3, [r7, #20]
      break;
 8001a94:	e002      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	617b      	str	r3, [r7, #20]
      break;
 8001a9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	fb03 f202 	mul.w	r2, r3, r2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	0e5b      	lsrs	r3, r3, #25
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	3301      	adds	r3, #1
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ada:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001adc:	69bb      	ldr	r3, [r7, #24]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	@ 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08001fd0 	.word	0x08001fd0
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	007a1200 	.word	0x007a1200

08001afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b08:	4b27      	ldr	r3, [pc, #156]	@ (8001ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b14:	f7ff f93e 	bl	8000d94 <HAL_PWREx_GetVoltageRange>
 8001b18:	6178      	str	r0, [r7, #20]
 8001b1a:	e014      	b.n	8001b46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b20:	4a21      	ldr	r2, [pc, #132]	@ (8001ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b34:	f7ff f92e 	bl	8000d94 <HAL_PWREx_GetVoltageRange>
 8001b38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b4c:	d10b      	bne.n	8001b66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b80      	cmp	r3, #128	@ 0x80
 8001b52:	d913      	bls.n	8001b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b58:	d902      	bls.n	8001b60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e00d      	b.n	8001b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b60:	2301      	movs	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	e00a      	b.n	8001b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b6a:	d902      	bls.n	8001b72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	e004      	b.n	8001b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b70      	cmp	r3, #112	@ 0x70
 8001b76:	d101      	bne.n	8001b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b78:	2301      	movs	r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 020f 	bic.w	r2, r3, #15
 8001b84:	4909      	ldr	r1, [pc, #36]	@ (8001bac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b8c:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d001      	beq.n	8001b9e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40022000 	.word	0x40022000

08001bb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d00b      	beq.n	8001bde <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d825      	bhi.n	8001c18 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d008      	beq.n	8001be4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d11f      	bne.n	8001c18 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001bda:	613b      	str	r3, [r7, #16]
    break;
 8001bdc:	e01f      	b.n	8001c1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001bde:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001be0:	613b      	str	r3, [r7, #16]
    break;
 8001be2:	e01c      	b.n	8001c1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001be4:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d107      	bne.n	8001c00 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e005      	b.n	8001c0c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c00:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c78 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	613b      	str	r3, [r7, #16]
    break;
 8001c16:	e002      	b.n	8001c1e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
    break;
 8001c1c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	3301      	adds	r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	fb03 f202 	mul.w	r2, r3, r2
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0e5b      	lsrs	r3, r3, #25
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001c5e:	683b      	ldr	r3, [r7, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	007a1200 	.word	0x007a1200
 8001c78:	08001fd0 	.word	0x08001fd0

08001c7c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e038      	b.n	8001d04 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d106      	bne.n	8001cac <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f7fe fcfa 	bl	80006a0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f000 f828 	bl	8001d0c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	f000 f8ba 	bl	8001e40 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6858      	ldr	r0, [r3, #4]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	f000 f8fe 	bl	8001eda <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	6892      	ldr	r2, [r2, #8]
 8001ce6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	6892      	ldr	r2, [r2, #8]
 8001cf2:	f041 0101 	orr.w	r1, r1, #1
 8001cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	f023 0101 	bic.w	r1, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d102      	bne.n	8001d3c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8001d36:	2340      	movs	r3, #64	@ 0x40
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e001      	b.n	8001d40 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8001d4c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8001d52:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8001d58:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8001d5e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8001d64:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8001d6a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8001d70:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 8001d76:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8001d7c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8001dae:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <FMC_NORSRAM_Init+0x130>)
 8001db0:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001db8:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dc0:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8001dc8:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8001dd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	ea02 0103 	and.w	r1, r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4319      	orrs	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001dfa:	d10c      	bne.n	8001e16 <FMC_NORSRAM_Init+0x10a>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	371c      	adds	r7, #28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	0008fb7f 	.word	0x0008fb7f

08001e40 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8001e56:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8001e5e:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8001e66:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 8001e6e:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8001e78:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	3b02      	subs	r3, #2
 8001e80:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 8001e82:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8001e8e:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ea2:	d113      	bne.n	8001ecc <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001eac:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	051b      	lsls	r3, r3, #20
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001eee:	d121      	bne.n	8001f34 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef8:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	4319      	orrs	r1, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	4319      	orrs	r1, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	079b      	lsls	r3, r3, #30
 8001f16:	4319      	orrs	r1, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	4319      	orrs	r1, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	041b      	lsls	r3, r3, #16
 8001f24:	430b      	orrs	r3, r1
 8001f26:	ea42 0103 	orr.w	r1, r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001f32:	e005      	b.n	8001f40 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8001f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <memset>:
 8001f4e:	4402      	add	r2, r0
 8001f50:	4603      	mov	r3, r0
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d100      	bne.n	8001f58 <memset+0xa>
 8001f56:	4770      	bx	lr
 8001f58:	f803 1b01 	strb.w	r1, [r3], #1
 8001f5c:	e7f9      	b.n	8001f52 <memset+0x4>
	...

08001f60 <__libc_init_array>:
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	4d0d      	ldr	r5, [pc, #52]	@ (8001f98 <__libc_init_array+0x38>)
 8001f64:	4c0d      	ldr	r4, [pc, #52]	@ (8001f9c <__libc_init_array+0x3c>)
 8001f66:	1b64      	subs	r4, r4, r5
 8001f68:	10a4      	asrs	r4, r4, #2
 8001f6a:	2600      	movs	r6, #0
 8001f6c:	42a6      	cmp	r6, r4
 8001f6e:	d109      	bne.n	8001f84 <__libc_init_array+0x24>
 8001f70:	4d0b      	ldr	r5, [pc, #44]	@ (8001fa0 <__libc_init_array+0x40>)
 8001f72:	4c0c      	ldr	r4, [pc, #48]	@ (8001fa4 <__libc_init_array+0x44>)
 8001f74:	f000 f818 	bl	8001fa8 <_init>
 8001f78:	1b64      	subs	r4, r4, r5
 8001f7a:	10a4      	asrs	r4, r4, #2
 8001f7c:	2600      	movs	r6, #0
 8001f7e:	42a6      	cmp	r6, r4
 8001f80:	d105      	bne.n	8001f8e <__libc_init_array+0x2e>
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
 8001f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f88:	4798      	blx	r3
 8001f8a:	3601      	adds	r6, #1
 8001f8c:	e7ee      	b.n	8001f6c <__libc_init_array+0xc>
 8001f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f92:	4798      	blx	r3
 8001f94:	3601      	adds	r6, #1
 8001f96:	e7f2      	b.n	8001f7e <__libc_init_array+0x1e>
 8001f98:	08002000 	.word	0x08002000
 8001f9c:	08002000 	.word	0x08002000
 8001fa0:	08002000 	.word	0x08002000
 8001fa4:	08002004 	.word	0x08002004

08001fa8 <_init>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	bf00      	nop
 8001fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fae:	bc08      	pop	{r3}
 8001fb0:	469e      	mov	lr, r3
 8001fb2:	4770      	bx	lr

08001fb4 <_fini>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	bf00      	nop
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr
