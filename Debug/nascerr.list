
nascerr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080034a0  080034a0  000044a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c0  080035c0  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  080035c0  080035c0  000045c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035c8  080035c8  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c8  080035c8  000045c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035cc  080035cc  000045cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080035d0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000006c  0800363c  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  0800363c  00005274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008025  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a24  00000000  00000000  0000d0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0000eae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f4  00000000  00000000  0000f310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032e1  00000000  00000000  0000f904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009312  00000000  00000000  00012be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fad3e  00000000  00000000  0001bef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116c35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000281c  00000000  00000000  00116c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00119494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08003488 	.word	0x08003488

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000070 	.word	0x20000070
 80001fc:	08003488 	.word	0x08003488

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <nascerr_write_sram1>:
	for(int i = 0; i < length; i++){
		*(ptr + i) = write_buffer[i];
	}
}

void nascerr_write_sram1(SRAM_HandleTypeDef *hsram, uint16_t* write_buffer, uint32_t address, NASCERR_MODE ecc, W_DataTypeDef write_type, uint32_t length){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
 80002ac:	70fb      	strb	r3, [r7, #3]
	nascerr_fill_buffer(write_buffer, write_type, length); // Preenche o buffer com o tipo de dado indicado no comando.
 80002ae:	7e3b      	ldrb	r3, [r7, #24]
 80002b0:	69fa      	ldr	r2, [r7, #28]
 80002b2:	4619      	mov	r1, r3
 80002b4:	68b8      	ldr	r0, [r7, #8]
 80002b6:	f000 f891 	bl	80003dc <nascerr_fill_buffer>
	nascerr_select_ecc(ecc); // seleciona o ECC.
 80002ba:	78fb      	ldrb	r3, [r7, #3]
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f837 	bl	8000330 <nascerr_select_ecc>

	HAL_SRAM_Write_16b(hsram, (uint32_t*) address, write_buffer, length);
 80002c2:	6879      	ldr	r1, [r7, #4]
 80002c4:	69fb      	ldr	r3, [r7, #28]
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	68f8      	ldr	r0, [r7, #12]
 80002ca:	f001 ff79 	bl	80021c0 <HAL_SRAM_Write_16b>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <nascerr_read_sram>:
 *  @param       : length - A 32-bit value specifying the size of the block to
 *                          be read in bytes. It should be an even number.
 *  @retval      : None
 * ******************************************************************************
 */
void nascerr_read_sram(uint16_t* read_buffer, uint32_t address, NASCERR_MODE ecc, uint32_t length){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	603b      	str	r3, [r7, #0]
 80002e4:	4613      	mov	r3, r2
 80002e6:	71fb      	strb	r3, [r7, #7]
	nascerr_select_ecc(ecc);
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f820 	bl	8000330 <nascerr_select_ecc>
	for(int i = 0; i < length; i++){
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]
 80002f4:	e010      	b.n	8000318 <nascerr_read_sram+0x40>
		read_buffer[i] = *(ptr + address + i);
 80002f6:	4b0d      	ldr	r3, [pc, #52]	@ (800032c <nascerr_read_sram+0x54>)
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	6979      	ldr	r1, [r7, #20]
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	440b      	add	r3, r1
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	441a      	add	r2, r3
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	68f9      	ldr	r1, [r7, #12]
 800030a:	440b      	add	r3, r1
 800030c:	8812      	ldrh	r2, [r2, #0]
 800030e:	b292      	uxth	r2, r2
 8000310:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	3301      	adds	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	429a      	cmp	r2, r3
 800031e:	d8ea      	bhi.n	80002f6 <nascerr_read_sram+0x1e>
	}
}
 8000320:	bf00      	nop
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000000 	.word	0x20000000

08000330 <nascerr_select_ecc>:
 *                        03 - EDAC
 *                        04 - BYPASS (no ECC)
 *  @retval      : None
 * ******************************************************************************
 */
void nascerr_select_ecc(NASCERR_MODE ecc){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	ptr = (uint16_t *)NASCERR_SRAM_ADDRESS;
 800033a:	4b25      	ldr	r3, [pc, #148]	@ (80003d0 <nascerr_select_ecc+0xa0>)
 800033c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000340:	601a      	str	r2, [r3, #0]
	data_read =  *(ptr);
 8000342:	4b23      	ldr	r3, [pc, #140]	@ (80003d0 <nascerr_select_ecc+0xa0>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	b29a      	uxth	r2, r3
 800034a:	4b22      	ldr	r3, [pc, #136]	@ (80003d4 <nascerr_select_ecc+0xa4>)
 800034c:	801a      	strh	r2, [r3, #0]

	switch(ecc){
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	3b01      	subs	r3, #1
 8000352:	2b04      	cmp	r3, #4
 8000354:	d838      	bhi.n	80003c8 <nascerr_select_ecc+0x98>
 8000356:	a201      	add	r2, pc, #4	@ (adr r2, 800035c <nascerr_select_ecc+0x2c>)
 8000358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035c:	080003b3 	.word	0x080003b3
 8000360:	080003c9 	.word	0x080003c9
 8000364:	08000371 	.word	0x08000371
 8000368:	08000387 	.word	0x08000387
 800036c:	0800039d 	.word	0x0800039d
	// 10
	case ECC_MOD1:
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2101      	movs	r1, #1
 8000374:	4818      	ldr	r0, [pc, #96]	@ (80003d8 <nascerr_select_ecc+0xa8>)
 8000376:	f000 ff4f 	bl	8001218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2102      	movs	r1, #2
 800037e:	4816      	ldr	r0, [pc, #88]	@ (80003d8 <nascerr_select_ecc+0xa8>)
 8000380:	f000 ff4a 	bl	8001218 <HAL_GPIO_WritePin>
		break;
 8000384:	e020      	b.n	80003c8 <nascerr_select_ecc+0x98>

	// 01
	case ECC_MOD2:
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	2101      	movs	r1, #1
 800038a:	4813      	ldr	r0, [pc, #76]	@ (80003d8 <nascerr_select_ecc+0xa8>)
 800038c:	f000 ff44 	bl	8001218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	2102      	movs	r1, #2
 8000394:	4810      	ldr	r0, [pc, #64]	@ (80003d8 <nascerr_select_ecc+0xa8>)
 8000396:	f000 ff3f 	bl	8001218 <HAL_GPIO_WritePin>
		break;
 800039a:	e015      	b.n	80003c8 <nascerr_select_ecc+0x98>

	// 11
	case ECC_MOD3:
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2101      	movs	r1, #1
 80003a0:	480d      	ldr	r0, [pc, #52]	@ (80003d8 <nascerr_select_ecc+0xa8>)
 80003a2:	f000 ff39 	bl	8001218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2102      	movs	r1, #2
 80003aa:	480b      	ldr	r0, [pc, #44]	@ (80003d8 <nascerr_select_ecc+0xa8>)
 80003ac:	f000 ff34 	bl	8001218 <HAL_GPIO_WritePin>
		break;
 80003b0:	e00a      	b.n	80003c8 <nascerr_select_ecc+0x98>

	// 00
	case BYPASS_TO_SRAM:
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2101      	movs	r1, #1
 80003b6:	4808      	ldr	r0, [pc, #32]	@ (80003d8 <nascerr_select_ecc+0xa8>)
 80003b8:	f000 ff2e 	bl	8001218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2102      	movs	r1, #2
 80003c0:	4805      	ldr	r0, [pc, #20]	@ (80003d8 <nascerr_select_ecc+0xa8>)
 80003c2:	f000 ff29 	bl	8001218 <HAL_GPIO_WritePin>
		break;
 80003c6:	bf00      	nop

	}
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000000 	.word	0x20000000
 80003d4:	20000088 	.word	0x20000088
 80003d8:	48000800 	.word	0x48000800

080003dc <nascerr_fill_buffer>:

void nascerr_fill_buffer(uint16_t* buffer, W_DataTypeDef write_type, uint32_t length){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	@ 0x28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	460b      	mov	r3, r1
 80003e6:	607a      	str	r2, [r7, #4]
 80003e8:	72fb      	strb	r3, [r7, #11]
	uint16_t data_cell; // Guarda o tipo de palavra a ser armazenada.
	switch(write_type){
 80003ea:	7afb      	ldrb	r3, [r7, #11]
 80003ec:	2b04      	cmp	r3, #4
 80003ee:	d87b      	bhi.n	80004e8 <nascerr_fill_buffer+0x10c>
 80003f0:	a201      	add	r2, pc, #4	@ (adr r2, 80003f8 <nascerr_fill_buffer+0x1c>)
 80003f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f6:	bf00      	nop
 80003f8:	0800040d 	.word	0x0800040d
 80003fc:	08000435 	.word	0x08000435
 8000400:	0800045f 	.word	0x0800045f
 8000404:	08000489 	.word	0x08000489
 8000408:	080004b3 	.word	0x080004b3
	// Preenche o buffer com zeros.
	case 0:
		data_cell = 0x0000;
 800040c:	2300      	movs	r3, #0
 800040e:	827b      	strh	r3, [r7, #18]
		for(uint32_t i = 0; i<(length/2); i++){
 8000410:	2300      	movs	r3, #0
 8000412:	627b      	str	r3, [r7, #36]	@ 0x24
 8000414:	e008      	b.n	8000428 <nascerr_fill_buffer+0x4c>
			buffer[i] = data_cell;
 8000416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	68fa      	ldr	r2, [r7, #12]
 800041c:	4413      	add	r3, r2
 800041e:	8a7a      	ldrh	r2, [r7, #18]
 8000420:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i<(length/2); i++){
 8000422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000424:	3301      	adds	r3, #1
 8000426:	627b      	str	r3, [r7, #36]	@ 0x24
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	085b      	lsrs	r3, r3, #1
 800042c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800042e:	429a      	cmp	r2, r3
 8000430:	d3f1      	bcc.n	8000416 <nascerr_fill_buffer+0x3a>
		}
		break;
 8000432:	e059      	b.n	80004e8 <nascerr_fill_buffer+0x10c>

	// Preenche o buffer com 0xFFFF.
	case 1:
		data_cell = 0xFFFF;
 8000434:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000438:	827b      	strh	r3, [r7, #18]
		for(uint32_t i = 0; i<(length/2); i++){
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
 800043e:	e008      	b.n	8000452 <nascerr_fill_buffer+0x76>
			buffer[i] = data_cell;
 8000440:	6a3b      	ldr	r3, [r7, #32]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	68fa      	ldr	r2, [r7, #12]
 8000446:	4413      	add	r3, r2
 8000448:	8a7a      	ldrh	r2, [r7, #18]
 800044a:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i<(length/2); i++){
 800044c:	6a3b      	ldr	r3, [r7, #32]
 800044e:	3301      	adds	r3, #1
 8000450:	623b      	str	r3, [r7, #32]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	085b      	lsrs	r3, r3, #1
 8000456:	6a3a      	ldr	r2, [r7, #32]
 8000458:	429a      	cmp	r2, r3
 800045a:	d3f1      	bcc.n	8000440 <nascerr_fill_buffer+0x64>
		}
		break;
 800045c:	e044      	b.n	80004e8 <nascerr_fill_buffer+0x10c>

	// Preenche o buffer com 0x5555.
	case 2:
		data_cell = 0x5555;
 800045e:	f245 5355 	movw	r3, #21845	@ 0x5555
 8000462:	827b      	strh	r3, [r7, #18]
		for(uint32_t i = 0; i<(length/2); i++){
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
 8000468:	e008      	b.n	800047c <nascerr_fill_buffer+0xa0>
			buffer[i] = data_cell;
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	4413      	add	r3, r2
 8000472:	8a7a      	ldrh	r2, [r7, #18]
 8000474:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i<(length/2); i++){
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	3301      	adds	r3, #1
 800047a:	61fb      	str	r3, [r7, #28]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	085b      	lsrs	r3, r3, #1
 8000480:	69fa      	ldr	r2, [r7, #28]
 8000482:	429a      	cmp	r2, r3
 8000484:	d3f1      	bcc.n	800046a <nascerr_fill_buffer+0x8e>
		}
		break;
 8000486:	e02f      	b.n	80004e8 <nascerr_fill_buffer+0x10c>

	// Preenche o buffer com 0xAAAA.
	case 3:
		data_cell = 0xAAAA;
 8000488:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
 800048c:	827b      	strh	r3, [r7, #18]
		for(uint32_t i = 0; i<(length/2); i++){
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
 8000492:	e008      	b.n	80004a6 <nascerr_fill_buffer+0xca>
			buffer[i] = data_cell;
 8000494:	69bb      	ldr	r3, [r7, #24]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	4413      	add	r3, r2
 800049c:	8a7a      	ldrh	r2, [r7, #18]
 800049e:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i<(length/2); i++){
 80004a0:	69bb      	ldr	r3, [r7, #24]
 80004a2:	3301      	adds	r3, #1
 80004a4:	61bb      	str	r3, [r7, #24]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	085b      	lsrs	r3, r3, #1
 80004aa:	69ba      	ldr	r2, [r7, #24]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d3f1      	bcc.n	8000494 <nascerr_fill_buffer+0xb8>
		}
		break;
 80004b0:	e01a      	b.n	80004e8 <nascerr_fill_buffer+0x10c>

	// Preenche o buffer com dados aleatórios.
	case 4:
		for(uint32_t i = 0; i<(length/2); i++){
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
 80004b6:	e011      	b.n	80004dc <nascerr_fill_buffer+0x100>
			data_cell = (rand() % 65536); // Escolhe um número aleatório entre 0 e 65535 (16 bits) para colocar no buffer.
 80004b8:	f002 f808 	bl	80024cc <rand>
 80004bc:	4603      	mov	r3, r0
 80004be:	425a      	negs	r2, r3
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	b292      	uxth	r2, r2
 80004c4:	bf58      	it	pl
 80004c6:	4253      	negpl	r3, r2
 80004c8:	827b      	strh	r3, [r7, #18]
			buffer[i] = data_cell;
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	4413      	add	r3, r2
 80004d2:	8a7a      	ldrh	r2, [r7, #18]
 80004d4:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i<(length/2); i++){
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3301      	adds	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	085b      	lsrs	r3, r3, #1
 80004e0:	697a      	ldr	r2, [r7, #20]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d3e8      	bcc.n	80004b8 <nascerr_fill_buffer+0xdc>
		}
		break;
 80004e6:	bf00      	nop
	}
}
 80004e8:	bf00      	nop
 80004ea:	3728      	adds	r7, #40	@ 0x28
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fba2 	bl	8000c3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f81d 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f8c9 	bl	8000694 <MX_GPIO_Init>
  MX_FMC_Init();
 8000502:	f000 f861 	bl	80005c8 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

//  nascerr_write_sram(write_buffer, 0, BYPASS_TO_SRAM, WRITE_x55h, 32);
  nascerr_write_sram1(&hsram1, write_buffer, 0, BYPASS_TO_SRAM, WRITE_x55h, 32);
 8000506:	2320      	movs	r3, #32
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2302      	movs	r3, #2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2301      	movs	r3, #1
 8000510:	2200      	movs	r2, #0
 8000512:	4906      	ldr	r1, [pc, #24]	@ (800052c <main+0x3c>)
 8000514:	4806      	ldr	r0, [pc, #24]	@ (8000530 <main+0x40>)
 8000516:	f7ff fec3 	bl	80002a0 <nascerr_write_sram1>
  nascerr_read_sram(read_from_sram, 0, BYPASS_TO_SRAM, 32);
 800051a:	2320      	movs	r3, #32
 800051c:	2201      	movs	r2, #1
 800051e:	2100      	movs	r1, #0
 8000520:	4804      	ldr	r0, [pc, #16]	@ (8000534 <main+0x44>)
 8000522:	f7ff fed9 	bl	80002d8 <nascerr_read_sram>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000526:	bf00      	nop
 8000528:	e7fd      	b.n	8000526 <main+0x36>
 800052a:	bf00      	nop
 800052c:	200000fc 	.word	0x200000fc
 8000530:	2000008c 	.word	0x2000008c
 8000534:	200000dc 	.word	0x200000dc

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	@ 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2244      	movs	r2, #68	@ 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 f903 	bl	8002752 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800055e:	f000 fe93 	bl	8001288 <HAL_PWREx_ControlVoltageScaling>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000568:	f000 f996 	bl	8000898 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800056c:	2310      	movs	r3, #16
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000578:	2360      	movs	r3, #96	@ 0x60
 800057a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4618      	mov	r0, r3
 8000586:	f000 ff33 	bl	80013f0 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000590:	f000 f982 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fb38 	bl	8001c24 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005ba:	f000 f96d 	bl	8000898 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3758      	adds	r7, #88	@ 0x58
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2220      	movs	r2, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 f8bc 	bl	8002752 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80005da:	4b2c      	ldr	r3, [pc, #176]	@ (800068c <MX_FMC_Init+0xc4>)
 80005dc:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80005e0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <MX_FMC_Init+0xc4>)
 80005e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000690 <MX_FMC_Init+0xc8>)
 80005e6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80005e8:	4b28      	ldr	r3, [pc, #160]	@ (800068c <MX_FMC_Init+0xc4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80005ee:	4b27      	ldr	r3, [pc, #156]	@ (800068c <MX_FMC_Init+0xc4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <MX_FMC_Init+0xc4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005fa:	4b24      	ldr	r3, [pc, #144]	@ (800068c <MX_FMC_Init+0xc4>)
 80005fc:	2210      	movs	r2, #16
 80005fe:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000600:	4b22      	ldr	r3, [pc, #136]	@ (800068c <MX_FMC_Init+0xc4>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000606:	4b21      	ldr	r3, [pc, #132]	@ (800068c <MX_FMC_Init+0xc4>)
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <MX_FMC_Init+0xc4>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000612:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <MX_FMC_Init+0xc4>)
 8000614:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000618:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800061a:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <MX_FMC_Init+0xc4>)
 800061c:	2200      	movs	r2, #0
 800061e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000620:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <MX_FMC_Init+0xc4>)
 8000622:	2200      	movs	r2, #0
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000626:	4b19      	ldr	r3, [pc, #100]	@ (800068c <MX_FMC_Init+0xc4>)
 8000628:	2200      	movs	r2, #0
 800062a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800062c:	4b17      	ldr	r3, [pc, #92]	@ (800068c <MX_FMC_Init+0xc4>)
 800062e:	2200      	movs	r2, #0
 8000630:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000632:	4b16      	ldr	r3, [pc, #88]	@ (800068c <MX_FMC_Init+0xc4>)
 8000634:	2200      	movs	r2, #0
 8000636:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_FMC_Init+0xc4>)
 800063a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800063e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_FMC_Init+0xc4>)
 8000642:	2200      	movs	r2, #0
 8000644:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000646:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_FMC_Init+0xc4>)
 8000648:	2200      	movs	r2, #0
 800064a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800064c:	230f      	movs	r3, #15
 800064e:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000650:	230f      	movs	r3, #15
 8000652:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000654:	23ff      	movs	r3, #255	@ 0xff
 8000656:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800065c:	230f      	movs	r3, #15
 800065e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000660:	2310      	movs	r3, #16
 8000662:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000664:	2311      	movs	r3, #17
 8000666:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	@ (800068c <MX_FMC_Init+0xc4>)
 8000674:	f001 fd5c 	bl	8002130 <HAL_SRAM_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_FMC_Init+0xba>
  {
    Error_Handler( );
 800067e:	f000 f90b 	bl	8000898 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000682:	bf00      	nop
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000008c 	.word	0x2000008c
 8000690:	a0000104 	.word	0xa0000104

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08e      	sub	sp, #56	@ 0x38
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b77      	ldr	r3, [pc, #476]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	4a76      	ldr	r2, [pc, #472]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b6:	4b74      	ldr	r3, [pc, #464]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	623b      	str	r3, [r7, #32]
 80006c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c2:	4b71      	ldr	r3, [pc, #452]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	4a70      	ldr	r2, [pc, #448]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 80006c8:	f043 0320 	orr.w	r3, r3, #32
 80006cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ce:	4b6e      	ldr	r3, [pc, #440]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	f003 0320 	and.w	r3, r3, #32
 80006d6:	61fb      	str	r3, [r7, #28]
 80006d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b6b      	ldr	r3, [pc, #428]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	4a6a      	ldr	r2, [pc, #424]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e6:	4b68      	ldr	r3, [pc, #416]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b65      	ldr	r3, [pc, #404]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a64      	ldr	r2, [pc, #400]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b62      	ldr	r3, [pc, #392]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800070a:	4b5f      	ldr	r3, [pc, #380]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a5e      	ldr	r2, [pc, #376]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 8000710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b5c      	ldr	r3, [pc, #368]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000722:	4b59      	ldr	r3, [pc, #356]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a58      	ldr	r2, [pc, #352]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b56      	ldr	r3, [pc, #344]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0310 	and.w	r3, r3, #16
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b53      	ldr	r3, [pc, #332]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a52      	ldr	r2, [pc, #328]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b50      	ldr	r3, [pc, #320]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	4b4d      	ldr	r3, [pc, #308]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a4c      	ldr	r2, [pc, #304]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b4a      	ldr	r3, [pc, #296]	@ (8000888 <MX_GPIO_Init+0x1f4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800076a:	f000 fe31 	bl	80013d0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ECC_SEL_0_Pin|ECC_SEL_1_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2103      	movs	r1, #3
 8000772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000776:	f000 fd4f 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000780:	4842      	ldr	r0, [pc, #264]	@ (800088c <MX_GPIO_Init+0x1f8>)
 8000782:	f000 fd49 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2140      	movs	r1, #64	@ 0x40
 800078a:	4841      	ldr	r0, [pc, #260]	@ (8000890 <MX_GPIO_Init+0x1fc>)
 800078c:	f000 fd44 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000796:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a4:	4619      	mov	r1, r3
 80007a6:	483b      	ldr	r0, [pc, #236]	@ (8000894 <MX_GPIO_Init+0x200>)
 80007a8:	f000 fba4 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECC_SEL_0_Pin ECC_SEL_1_Pin */
  GPIO_InitStruct.Pin = ECC_SEL_0_Pin|ECC_SEL_1_Pin;
 80007ac:	2303      	movs	r3, #3
 80007ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c0:	4619      	mov	r1, r3
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c6:	f000 fb95 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80007ca:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e0:	4619      	mov	r1, r3
 80007e2:	482a      	ldr	r0, [pc, #168]	@ (800088c <MX_GPIO_Init+0x1f8>)
 80007e4:	f000 fb86 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007e8:	2320      	movs	r3, #32
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	4825      	ldr	r0, [pc, #148]	@ (8000890 <MX_GPIO_Init+0x1fc>)
 80007fc:	f000 fb7a 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000800:	2340      	movs	r3, #64	@ 0x40
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000814:	4619      	mov	r1, r3
 8000816:	481e      	ldr	r0, [pc, #120]	@ (8000890 <MX_GPIO_Init+0x1fc>)
 8000818:	f000 fb6c 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_TX_Pin STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800081c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800082e:	2308      	movs	r3, #8
 8000830:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	4815      	ldr	r0, [pc, #84]	@ (8000890 <MX_GPIO_Init+0x1fc>)
 800083a:	f000 fb5b 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800083e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000850:	230a      	movs	r3, #10
 8000852:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085e:	f000 fb49 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000862:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087a:	f000 fb3b 	bl	8000ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	3738      	adds	r7, #56	@ 0x38
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400
 8000890:	48001800 	.word	0x48001800
 8000894:	48000800 	.word	0x48000800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ae:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000900:	4b2b      	ldr	r3, [pc, #172]	@ (80009b0 <HAL_FMC_MspInit+0xc4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 8000908:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <HAL_FMC_MspInit+0xc4>)
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800090e:	4b29      	ldr	r3, [pc, #164]	@ (80009b4 <HAL_FMC_MspInit+0xc8>)
 8000910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000912:	4a28      	ldr	r2, [pc, #160]	@ (80009b4 <HAL_FMC_MspInit+0xc8>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6513      	str	r3, [r2, #80]	@ 0x50
 800091a:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <HAL_FMC_MspInit+0xc8>)
 800091c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000926:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 800092a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000938:	230c      	movs	r3, #12
 800093a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	481d      	ldr	r0, [pc, #116]	@ (80009b8 <HAL_FMC_MspInit+0xcc>)
 8000942:	f000 fad7 	bl	8000ef4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000946:	2301      	movs	r3, #1
 8000948:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000956:	230c      	movs	r3, #12
 8000958:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	4619      	mov	r1, r3
 800095e:	4817      	ldr	r0, [pc, #92]	@ (80009bc <HAL_FMC_MspInit+0xd0>)
 8000960:	f000 fac8 	bl	8000ef4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000964:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000968:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000976:	230c      	movs	r3, #12
 8000978:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4810      	ldr	r0, [pc, #64]	@ (80009c0 <HAL_FMC_MspInit+0xd4>)
 8000980:	f000 fab8 	bl	8000ef4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000984:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000988:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	4619      	mov	r1, r3
 800099e:	4809      	ldr	r0, [pc, #36]	@ (80009c4 <HAL_FMC_MspInit+0xd8>)
 80009a0:	f000 faa8 	bl	8000ef4 <HAL_GPIO_Init>
 80009a4:	e000      	b.n	80009a8 <HAL_FMC_MspInit+0xbc>
    return;
 80009a6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000011c 	.word	0x2000011c
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48001400 	.word	0x48001400
 80009bc:	48001800 	.word	0x48001800
 80009c0:	48001000 	.word	0x48001000
 80009c4:	48000c00 	.word	0x48000c00

080009c8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80009d0:	f7ff ff8c 	bl	80008ec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <NMI_Handler+0x4>

080009e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <MemManage_Handler+0x4>

080009f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a32:	f000 f959 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  return 1;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_kill>:

int _kill(int pid, int sig)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a54:	f001 fecc 	bl	80027f0 <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2216      	movs	r2, #22
 8000a5c:	601a      	str	r2, [r3, #0]
  return -1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_exit>:

void _exit (int status)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a72:	f04f 31ff 	mov.w	r1, #4294967295
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffe7 	bl	8000a4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <_exit+0x12>

08000a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e00a      	b.n	8000aa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a92:	f3af 8000 	nop.w
 8000a96:	4601      	mov	r1, r0
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	60ba      	str	r2, [r7, #8]
 8000a9e:	b2ca      	uxtb	r2, r1
 8000aa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf0      	blt.n	8000a92 <_read+0x12>
  }

  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	e009      	b.n	8000ae0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf1      	blt.n	8000acc <_write+0x12>
  }
  return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_close>:

int _close(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_isatty>:

int _isatty(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f001 fe30 	bl	80027f0 <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200a0000 	.word	0x200a0000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	20000120 	.word	0x20000120
 8000bc4:	20000278 	.word	0x20000278

08000bc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	@ (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	@ (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f001 fdef 	bl	80027fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1e:	f7ff fc67 	bl	80004f0 <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c24:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c30:	080035d0 	.word	0x080035d0
  ldr r2, =_sbss
 8000c34:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c38:	20000274 	.word	0x20000274

08000c3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_IRQHandler>

08000c3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f91f 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f80e 	bl	8000c70 <HAL_InitTick>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	e001      	b.n	8000c64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c60:	f7ff fe20 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <HAL_InitTick+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d023      	beq.n	8000ccc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c84:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <HAL_InitTick+0x70>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_InitTick+0x6c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f91d 	bl	8000eda <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10f      	bne.n	8000cc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d809      	bhi.n	8000cc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 f8f5 	bl	8000ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <HAL_InitTick+0x74>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e007      	b.n	8000cd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e004      	b.n	8000cd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e001      	b.n	8000cd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000000c 	.word	0x2000000c
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2000000c 	.word	0x2000000c
 8000d0c:	20000124 	.word	0x20000124

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000124 	.word	0x20000124

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	@ (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	@ (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	@ 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	@ 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff47 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff5c 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffb0 	bl	8000e48 <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e166      	b.n	80011d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8158 	beq.w	80011cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d005      	beq.n	8000f34 <HAL_GPIO_Init+0x40>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d130      	bne.n	8000f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	f003 0201 	and.w	r2, r3, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d017      	beq.n	8000fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d123      	bne.n	8001026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	691a      	ldr	r2, [r3, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0203 	and.w	r2, r3, #3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 80b2 	beq.w	80011cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001068:	4b61      	ldr	r3, [pc, #388]	@ (80011f0 <HAL_GPIO_Init+0x2fc>)
 800106a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106c:	4a60      	ldr	r2, [pc, #384]	@ (80011f0 <HAL_GPIO_Init+0x2fc>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6613      	str	r3, [r2, #96]	@ 0x60
 8001074:	4b5e      	ldr	r3, [pc, #376]	@ (80011f0 <HAL_GPIO_Init+0x2fc>)
 8001076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001080:	4a5c      	ldr	r2, [pc, #368]	@ (80011f4 <HAL_GPIO_Init+0x300>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010aa:	d02b      	beq.n	8001104 <HAL_GPIO_Init+0x210>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a52      	ldr	r2, [pc, #328]	@ (80011f8 <HAL_GPIO_Init+0x304>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d025      	beq.n	8001100 <HAL_GPIO_Init+0x20c>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a51      	ldr	r2, [pc, #324]	@ (80011fc <HAL_GPIO_Init+0x308>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d01f      	beq.n	80010fc <HAL_GPIO_Init+0x208>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a50      	ldr	r2, [pc, #320]	@ (8001200 <HAL_GPIO_Init+0x30c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d019      	beq.n	80010f8 <HAL_GPIO_Init+0x204>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001204 <HAL_GPIO_Init+0x310>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d013      	beq.n	80010f4 <HAL_GPIO_Init+0x200>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a4e      	ldr	r2, [pc, #312]	@ (8001208 <HAL_GPIO_Init+0x314>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00d      	beq.n	80010f0 <HAL_GPIO_Init+0x1fc>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a4d      	ldr	r2, [pc, #308]	@ (800120c <HAL_GPIO_Init+0x318>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0x1f8>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a4c      	ldr	r2, [pc, #304]	@ (8001210 <HAL_GPIO_Init+0x31c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d101      	bne.n	80010e8 <HAL_GPIO_Init+0x1f4>
 80010e4:	2307      	movs	r3, #7
 80010e6:	e00e      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010e8:	2308      	movs	r3, #8
 80010ea:	e00c      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010ec:	2306      	movs	r3, #6
 80010ee:	e00a      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010f0:	2305      	movs	r3, #5
 80010f2:	e008      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010f4:	2304      	movs	r3, #4
 80010f6:	e006      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010f8:	2303      	movs	r3, #3
 80010fa:	e004      	b.n	8001106 <HAL_GPIO_Init+0x212>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e002      	b.n	8001106 <HAL_GPIO_Init+0x212>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <HAL_GPIO_Init+0x212>
 8001104:	2300      	movs	r3, #0
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	f002 0203 	and.w	r2, r2, #3
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	4093      	lsls	r3, r2
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001116:	4937      	ldr	r1, [pc, #220]	@ (80011f4 <HAL_GPIO_Init+0x300>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001124:	4b3b      	ldr	r3, [pc, #236]	@ (8001214 <HAL_GPIO_Init+0x320>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001148:	4a32      	ldr	r2, [pc, #200]	@ (8001214 <HAL_GPIO_Init+0x320>)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <HAL_GPIO_Init+0x320>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001172:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <HAL_GPIO_Init+0x320>)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001178:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <HAL_GPIO_Init+0x320>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800119c:	4a1d      	ldr	r2, [pc, #116]	@ (8001214 <HAL_GPIO_Init+0x320>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <HAL_GPIO_Init+0x320>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c6:	4a13      	ldr	r2, [pc, #76]	@ (8001214 <HAL_GPIO_Init+0x320>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f47f ae91 	bne.w	8000f04 <HAL_GPIO_Init+0x10>
  }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010000 	.word	0x40010000
 80011f8:	48000400 	.word	0x48000400
 80011fc:	48000800 	.word	0x48000800
 8001200:	48000c00 	.word	0x48000c00
 8001204:	48001000 	.word	0x48001000
 8001208:	48001400 	.word	0x48001400
 800120c:	48001800 	.word	0x48001800
 8001210:	48001c00 	.word	0x48001c00
 8001214:	40010400 	.word	0x40010400

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001234:	e002      	b.n	800123c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800124c:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <HAL_PWREx_GetVoltageRange+0x3c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001258:	d102      	bne.n	8001260 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800125a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800125e:	e00b      	b.n	8001278 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800126a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800126e:	d102      	bne.n	8001276 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001270:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001274:	e000      	b.n	8001278 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001276:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40007000 	.word	0x40007000

08001288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d141      	bne.n	800131a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001296:	4b4b      	ldr	r3, [pc, #300]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800129e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a2:	d131      	bne.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012a4:	4b47      	ldr	r3, [pc, #284]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012aa:	4a46      	ldr	r2, [pc, #280]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	4b43      	ldr	r3, [pc, #268]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012bc:	4a41      	ldr	r2, [pc, #260]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80012c4:	4b40      	ldr	r3, [pc, #256]	@ (80013c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2232      	movs	r2, #50	@ 0x32
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	4a3f      	ldr	r2, [pc, #252]	@ (80013cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	0c9b      	lsrs	r3, r3, #18
 80012d6:	3301      	adds	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012da:	e002      	b.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3b01      	subs	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e2:	4b38      	ldr	r3, [pc, #224]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ee:	d102      	bne.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f2      	bne.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012f6:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001302:	d158      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e057      	b.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001308:	4b2e      	ldr	r3, [pc, #184]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800130e:	4a2d      	ldr	r2, [pc, #180]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001318:	e04d      	b.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001320:	d141      	bne.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001322:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800132a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800132e:	d131      	bne.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001330:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001336:	4a23      	ldr	r2, [pc, #140]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800133c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001348:	4a1e      	ldr	r2, [pc, #120]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800134e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001350:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2232      	movs	r2, #50	@ 0x32
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	4a1c      	ldr	r2, [pc, #112]	@ (80013cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	0c9b      	lsrs	r3, r3, #18
 8001362:	3301      	adds	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001366:	e002      	b.n	800136e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3b01      	subs	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137a:	d102      	bne.n	8001382 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f2      	bne.n	8001368 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800138a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800138e:	d112      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e011      	b.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013a4:	e007      	b.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013a6:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013b4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40007000 	.word	0x40007000
 80013c8:	20000004 	.word	0x20000004
 80013cc:	431bde83 	.word	0x431bde83

080013d0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013de:	6053      	str	r3, [r2, #4]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40007000 	.word	0x40007000

080013f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	f000 bc08 	b.w	8001c14 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001404:	4b96      	ldr	r3, [pc, #600]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800140e:	4b94      	ldr	r3, [pc, #592]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80e4 	beq.w	80015ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d007      	beq.n	800143c <HAL_RCC_OscConfig+0x4c>
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b0c      	cmp	r3, #12
 8001430:	f040 808b 	bne.w	800154a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	2b01      	cmp	r3, #1
 8001438:	f040 8087 	bne.w	800154a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800143c:	4b88      	ldr	r3, [pc, #544]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_OscConfig+0x64>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e3df      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	4b81      	ldr	r3, [pc, #516]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <HAL_RCC_OscConfig+0x7e>
 8001464:	4b7e      	ldr	r3, [pc, #504]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800146c:	e005      	b.n	800147a <HAL_RCC_OscConfig+0x8a>
 800146e:	4b7c      	ldr	r3, [pc, #496]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001470:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800147a:	4293      	cmp	r3, r2
 800147c:	d223      	bcs.n	80014c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fd94 	bl	8001fb0 <RCC_SetFlashLatencyFromMSIRange>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e3c0      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001492:	4b73      	ldr	r3, [pc, #460]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a72      	ldr	r2, [pc, #456]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001498:	f043 0308 	orr.w	r3, r3, #8
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b70      	ldr	r3, [pc, #448]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	496d      	ldr	r1, [pc, #436]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	4968      	ldr	r1, [pc, #416]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	e025      	b.n	8001512 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c6:	4b66      	ldr	r3, [pc, #408]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a65      	ldr	r2, [pc, #404]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	4b63      	ldr	r3, [pc, #396]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4960      	ldr	r1, [pc, #384]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	495b      	ldr	r1, [pc, #364]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fd54 	bl	8001fb0 <RCC_SetFlashLatencyFromMSIRange>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e380      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001512:	f000 fcc1 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001516:	4602      	mov	r2, r0
 8001518:	4b51      	ldr	r3, [pc, #324]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	4950      	ldr	r1, [pc, #320]	@ (8001664 <HAL_RCC_OscConfig+0x274>)
 8001524:	5ccb      	ldrb	r3, [r1, r3]
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	4a4e      	ldr	r2, [pc, #312]	@ (8001668 <HAL_RCC_OscConfig+0x278>)
 8001530:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001532:	4b4e      	ldr	r3, [pc, #312]	@ (800166c <HAL_RCC_OscConfig+0x27c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fb9a 	bl	8000c70 <HAL_InitTick>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d052      	beq.n	80015ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	e364      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d032      	beq.n	80015b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001552:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a42      	ldr	r2, [pc, #264]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800155e:	f7ff fbd7 	bl	8000d10 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001566:	f7ff fbd3 	bl	8000d10 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e34d      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001578:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001584:	4b36      	ldr	r3, [pc, #216]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a35      	ldr	r2, [pc, #212]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b33      	ldr	r3, [pc, #204]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4930      	ldr	r1, [pc, #192]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	492b      	ldr	r1, [pc, #172]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
 80015b6:	e01a      	b.n	80015ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015b8:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a28      	ldr	r2, [pc, #160]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fba4 	bl	8000d10 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015cc:	f7ff fba0 	bl	8000d10 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e31a      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015de:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x1dc>
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d073      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d005      	beq.n	800160c <HAL_RCC_OscConfig+0x21c>
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d10e      	bne.n	8001624 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d10b      	bne.n	8001624 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d063      	beq.n	80016e0 <HAL_RCC_OscConfig+0x2f0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d15f      	bne.n	80016e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e2f7      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800162c:	d106      	bne.n	800163c <HAL_RCC_OscConfig+0x24c>
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a0b      	ldr	r2, [pc, #44]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e025      	b.n	8001688 <HAL_RCC_OscConfig+0x298>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001644:	d114      	bne.n	8001670 <HAL_RCC_OscConfig+0x280>
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 800164c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a02      	ldr	r2, [pc, #8]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e013      	b.n	8001688 <HAL_RCC_OscConfig+0x298>
 8001660:	40021000 	.word	0x40021000
 8001664:	080034a0 	.word	0x080034a0
 8001668:	20000004 	.word	0x20000004
 800166c:	20000008 	.word	0x20000008
 8001670:	4ba0      	ldr	r3, [pc, #640]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a9f      	ldr	r2, [pc, #636]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b9d      	ldr	r3, [pc, #628]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a9c      	ldr	r2, [pc, #624]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fb3e 	bl	8000d10 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fb3a 	bl	8000d10 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	@ 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e2b4      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016aa:	4b92      	ldr	r3, [pc, #584]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x2a8>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb2a 	bl	8000d10 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fb26 	bl	8000d10 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	@ 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e2a0      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d2:	4b88      	ldr	r3, [pc, #544]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2d0>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d060      	beq.n	80017b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_OscConfig+0x310>
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d119      	bne.n	800172e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d116      	bne.n	800172e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001700:	4b7c      	ldr	r3, [pc, #496]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_OscConfig+0x328>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e27d      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b76      	ldr	r3, [pc, #472]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	061b      	lsls	r3, r3, #24
 8001726:	4973      	ldr	r1, [pc, #460]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800172c:	e040      	b.n	80017b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d023      	beq.n	800177e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001736:	4b6f      	ldr	r3, [pc, #444]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a6e      	ldr	r2, [pc, #440]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fae5 	bl	8000d10 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fae1 	bl	8000d10 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e25b      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800175c:	4b65      	ldr	r3, [pc, #404]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b62      	ldr	r3, [pc, #392]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	061b      	lsls	r3, r3, #24
 8001776:	495f      	ldr	r1, [pc, #380]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e018      	b.n	80017b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b5d      	ldr	r3, [pc, #372]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5c      	ldr	r2, [pc, #368]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff fac1 	bl	8000d10 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff fabd 	bl	8000d10 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e237      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a4:	4b53      	ldr	r3, [pc, #332]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d03c      	beq.n	8001836 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01c      	beq.n	80017fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c4:	4b4b      	ldr	r3, [pc, #300]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80017c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ca:	4a4a      	ldr	r2, [pc, #296]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff fa9c 	bl	8000d10 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff fa98 	bl	8000d10 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e212      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ee:	4b41      	ldr	r3, [pc, #260]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80017f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0ef      	beq.n	80017dc <HAL_RCC_OscConfig+0x3ec>
 80017fc:	e01b      	b.n	8001836 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fe:	4b3d      	ldr	r3, [pc, #244]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001800:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001804:	4a3b      	ldr	r2, [pc, #236]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff fa7f 	bl	8000d10 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001816:	f7ff fa7b 	bl	8000d10 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1f5      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001828:	4b32      	ldr	r3, [pc, #200]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 800182a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ef      	bne.n	8001816 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80a6 	beq.w	8001990 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001848:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10d      	bne.n	8001870 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001858:	4a26      	ldr	r2, [pc, #152]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 800185a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001860:	4b24      	ldr	r3, [pc, #144]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186c:	2301      	movs	r3, #1
 800186e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001870:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <HAL_RCC_OscConfig+0x508>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d118      	bne.n	80018ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800187c:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <HAL_RCC_OscConfig+0x508>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1d      	ldr	r2, [pc, #116]	@ (80018f8 <HAL_RCC_OscConfig+0x508>)
 8001882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001886:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001888:	f7ff fa42 	bl	8000d10 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001890:	f7ff fa3e 	bl	8000d10 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e1b8      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <HAL_RCC_OscConfig+0x508>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d108      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4d8>
 80018b6:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80018b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018bc:	4a0d      	ldr	r2, [pc, #52]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018c6:	e029      	b.n	800191c <HAL_RCC_OscConfig+0x52c>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d115      	bne.n	80018fc <HAL_RCC_OscConfig+0x50c>
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d6:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80018e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e6:	4a03      	ldr	r2, [pc, #12]	@ (80018f4 <HAL_RCC_OscConfig+0x504>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f0:	e014      	b.n	800191c <HAL_RCC_OscConfig+0x52c>
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40007000 	.word	0x40007000
 80018fc:	4b9d      	ldr	r3, [pc, #628]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 80018fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001902:	4a9c      	ldr	r2, [pc, #624]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800190c:	4b99      	ldr	r3, [pc, #612]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001912:	4a98      	ldr	r2, [pc, #608]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001914:	f023 0304 	bic.w	r3, r3, #4
 8001918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d016      	beq.n	8001952 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff f9f4 	bl	8000d10 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff f9f0 	bl	8000d10 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e168      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001942:	4b8c      	ldr	r3, [pc, #560]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ed      	beq.n	800192c <HAL_RCC_OscConfig+0x53c>
 8001950:	e015      	b.n	800197e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001952:	f7ff f9dd 	bl	8000d10 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff f9d9 	bl	8000d10 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e151      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001970:	4b80      	ldr	r3, [pc, #512]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ed      	bne.n	800195a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800197e:	7ffb      	ldrb	r3, [r7, #31]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001984:	4b7b      	ldr	r3, [pc, #492]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001988:	4a7a      	ldr	r2, [pc, #488]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 800198a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800198e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	2b00      	cmp	r3, #0
 800199a:	d03c      	beq.n	8001a16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d01c      	beq.n	80019de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019a4:	4b73      	ldr	r3, [pc, #460]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 80019a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019aa:	4a72      	ldr	r2, [pc, #456]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b4:	f7ff f9ac 	bl	8000d10 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019bc:	f7ff f9a8 	bl	8000d10 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e122      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ce:	4b69      	ldr	r3, [pc, #420]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 80019d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0ef      	beq.n	80019bc <HAL_RCC_OscConfig+0x5cc>
 80019dc:	e01b      	b.n	8001a16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019de:	4b65      	ldr	r3, [pc, #404]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 80019e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019e4:	4a63      	ldr	r2, [pc, #396]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff f98f 	bl	8000d10 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019f6:	f7ff f98b 	bl	8000d10 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e105      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a08:	4b5a      	ldr	r3, [pc, #360]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1ef      	bne.n	80019f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80f9 	beq.w	8001c12 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	f040 80cf 	bne.w	8001bc8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a2a:	4b52      	ldr	r3, [pc, #328]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0203 	and.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d12c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d123      	bne.n	8001a98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d11b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d113      	bne.n	8001a98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d109      	bne.n	8001a98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	3b01      	subs	r3, #1
 8001a92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d071      	beq.n	8001b7c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d068      	beq.n	8001b70 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a9e:	4b35      	ldr	r3, [pc, #212]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d105      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001aaa:	4b32      	ldr	r3, [pc, #200]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0ac      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001aba:	4b2e      	ldr	r3, [pc, #184]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a2d      	ldr	r2, [pc, #180]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001ac0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ac4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ac6:	f7ff f923 	bl	8000d10 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff f91f 	bl	8000d10 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e099      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae0:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aec:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <HAL_RCC_OscConfig+0x788>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001afc:	3a01      	subs	r2, #1
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	4311      	orrs	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b06:	0212      	lsls	r2, r2, #8
 8001b08:	4311      	orrs	r1, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b0e:	0852      	lsrs	r2, r2, #1
 8001b10:	3a01      	subs	r2, #1
 8001b12:	0552      	lsls	r2, r2, #21
 8001b14:	4311      	orrs	r1, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b1a:	0852      	lsrs	r2, r2, #1
 8001b1c:	3a01      	subs	r2, #1
 8001b1e:	0652      	lsls	r2, r2, #25
 8001b20:	4311      	orrs	r1, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b26:	06d2      	lsls	r2, r2, #27
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	4912      	ldr	r1, [pc, #72]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b30:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0f      	ldr	r2, [pc, #60]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4a0c      	ldr	r2, [pc, #48]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b48:	f7ff f8e2 	bl	8000d10 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff f8de 	bl	8000d10 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e058      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b62:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <HAL_RCC_OscConfig+0x784>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b6e:	e050      	b.n	8001c12 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e04f      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
 8001b74:	40021000 	.word	0x40021000
 8001b78:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7c:	4b27      	ldr	r3, [pc, #156]	@ (8001c1c <HAL_RCC_OscConfig+0x82c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d144      	bne.n	8001c12 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <HAL_RCC_OscConfig+0x82c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a23      	ldr	r2, [pc, #140]	@ (8001c1c <HAL_RCC_OscConfig+0x82c>)
 8001b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b94:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <HAL_RCC_OscConfig+0x82c>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4a20      	ldr	r2, [pc, #128]	@ (8001c1c <HAL_RCC_OscConfig+0x82c>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ba0:	f7ff f8b6 	bl	8000d10 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f8b2 	bl	8000d10 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e02c      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <HAL_RCC_OscConfig+0x82c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x7b8>
 8001bc6:	e024      	b.n	8001c12 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d01f      	beq.n	8001c0e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <HAL_RCC_OscConfig+0x82c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <HAL_RCC_OscConfig+0x82c>)
 8001bd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7ff f899 	bl	8000d10 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff f895 	bl	8000d10 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e00f      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_RCC_OscConfig+0x82c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f0      	bne.n	8001be2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_RCC_OscConfig+0x82c>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	4905      	ldr	r1, [pc, #20]	@ (8001c1c <HAL_RCC_OscConfig+0x82c>)
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_RCC_OscConfig+0x830>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
 8001c0c:	e001      	b.n	8001c12 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	feeefffc 	.word	0xfeeefffc

08001c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e11d      	b.n	8001e78 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b90      	ldr	r3, [pc, #576]	@ (8001e80 <HAL_RCC_ClockConfig+0x25c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d910      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b8d      	ldr	r3, [pc, #564]	@ (8001e80 <HAL_RCC_ClockConfig+0x25c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 020f 	bic.w	r2, r3, #15
 8001c52:	498b      	ldr	r1, [pc, #556]	@ (8001e80 <HAL_RCC_ClockConfig+0x25c>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b89      	ldr	r3, [pc, #548]	@ (8001e80 <HAL_RCC_ClockConfig+0x25c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e105      	b.n	8001e78 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d010      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	4b81      	ldr	r3, [pc, #516]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d908      	bls.n	8001c9a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c88:	4b7e      	ldr	r3, [pc, #504]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	497b      	ldr	r1, [pc, #492]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d079      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d11e      	bne.n	8001cec <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	4b75      	ldr	r3, [pc, #468]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0dc      	b.n	8001e78 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001cbe:	f000 f9d1 	bl	8002064 <RCC_GetSysClockFreqFromPLLSource>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a70      	ldr	r2, [pc, #448]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d946      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001cca:	4b6e      	ldr	r3, [pc, #440]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d140      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cd6:	4b6b      	ldr	r3, [pc, #428]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cde:	4a69      	ldr	r2, [pc, #420]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ce6:	2380      	movs	r3, #128	@ 0x80
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e035      	b.n	8001d58 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf4:	4b63      	ldr	r3, [pc, #396]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d115      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0b9      	b.n	8001e78 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d0c:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0ad      	b.n	8001e78 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1c:	4b59      	ldr	r3, [pc, #356]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0a5      	b.n	8001e78 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001d2c:	f000 f8b4 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4a55      	ldr	r2, [pc, #340]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d90f      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d38:	4b52      	ldr	r3, [pc, #328]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d44:	4b4f      	ldr	r3, [pc, #316]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d52:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d54:	2380      	movs	r3, #128	@ 0x80
 8001d56:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d58:	4b4a      	ldr	r3, [pc, #296]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 0203 	bic.w	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4947      	ldr	r1, [pc, #284]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d6a:	f7fe ffd1 	bl	8000d10 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d72:	f7fe ffcd 	bl	8000d10 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e077      	b.n	8001e78 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d88:	4b3e      	ldr	r3, [pc, #248]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 020c 	and.w	r2, r3, #12
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d1eb      	bne.n	8001d72 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b80      	cmp	r3, #128	@ 0x80
 8001d9e:	d105      	bne.n	8001dac <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001da0:	4b38      	ldr	r3, [pc, #224]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4a37      	ldr	r2, [pc, #220]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001da6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001daa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d010      	beq.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d208      	bcs.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	492b      	ldr	r1, [pc, #172]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dda:	4b29      	ldr	r3, [pc, #164]	@ (8001e80 <HAL_RCC_ClockConfig+0x25c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d210      	bcs.n	8001e0a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de8:	4b25      	ldr	r3, [pc, #148]	@ (8001e80 <HAL_RCC_ClockConfig+0x25c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 020f 	bic.w	r2, r3, #15
 8001df0:	4923      	ldr	r1, [pc, #140]	@ (8001e80 <HAL_RCC_ClockConfig+0x25c>)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df8:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <HAL_RCC_ClockConfig+0x25c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e036      	b.n	8001e78 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e16:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	4918      	ldr	r1, [pc, #96]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d009      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e34:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4910      	ldr	r1, [pc, #64]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e48:	f000 f826 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	490c      	ldr	r1, [pc, #48]	@ (8001e8c <HAL_RCC_ClockConfig+0x268>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <HAL_RCC_ClockConfig+0x26c>)
 8001e66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e68:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_RCC_ClockConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe feff 	bl	8000c70 <HAL_InitTick>
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]

  return status;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40022000 	.word	0x40022000
 8001e84:	40021000 	.word	0x40021000
 8001e88:	04c4b400 	.word	0x04c4b400
 8001e8c:	080034a0 	.word	0x080034a0
 8001e90:	20000004 	.word	0x20000004
 8001e94:	20000008 	.word	0x20000008

08001e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	@ 0x24
 8001e9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x34>
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d121      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d11e      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ecc:	4b34      	ldr	r3, [pc, #208]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ed8:	4b31      	ldr	r3, [pc, #196]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e005      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10d      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d102      	bne.n	8001f16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f10:	4b25      	ldr	r3, [pc, #148]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	e004      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f1c:	4b23      	ldr	r3, [pc, #140]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x114>)
 8001f1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d134      	bne.n	8001f90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f26:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d003      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0xac>
 8001f3c:	e005      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f40:	617b      	str	r3, [r7, #20]
      break;
 8001f42:	e005      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x114>)
 8001f46:	617b      	str	r3, [r7, #20]
      break;
 8001f48:	e002      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	617b      	str	r3, [r7, #20]
      break;
 8001f4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f50:	4b13      	ldr	r3, [pc, #76]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	fb03 f202 	mul.w	r2, r3, r2
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f76:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	0e5b      	lsrs	r3, r3, #25
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	3301      	adds	r3, #1
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f90:	69bb      	ldr	r3, [r7, #24]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	@ 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	080034b0 	.word	0x080034b0
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	007a1200 	.word	0x007a1200

08001fb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fbc:	4b27      	ldr	r3, [pc, #156]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fc8:	f7ff f93e 	bl	8001248 <HAL_PWREx_GetVoltageRange>
 8001fcc:	6178      	str	r0, [r7, #20]
 8001fce:	e014      	b.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fd0:	4b22      	ldr	r3, [pc, #136]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd4:	4a21      	ldr	r2, [pc, #132]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fe8:	f7ff f92e 	bl	8001248 <HAL_PWREx_GetVoltageRange>
 8001fec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fee:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002000:	d10b      	bne.n	800201a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b80      	cmp	r3, #128	@ 0x80
 8002006:	d913      	bls.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2ba0      	cmp	r3, #160	@ 0xa0
 800200c:	d902      	bls.n	8002014 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800200e:	2302      	movs	r3, #2
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	e00d      	b.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002014:	2301      	movs	r3, #1
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	e00a      	b.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b7f      	cmp	r3, #127	@ 0x7f
 800201e:	d902      	bls.n	8002026 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002020:	2302      	movs	r3, #2
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	e004      	b.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b70      	cmp	r3, #112	@ 0x70
 800202a:	d101      	bne.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800202c:	2301      	movs	r3, #1
 800202e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 020f 	bic.w	r2, r3, #15
 8002038:	4909      	ldr	r1, [pc, #36]	@ (8002060 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002040:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	40022000 	.word	0x40022000

08002064 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800206a:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d00b      	beq.n	8002092 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d825      	bhi.n	80020cc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d008      	beq.n	8002098 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d11f      	bne.n	80020cc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800208c:	4b25      	ldr	r3, [pc, #148]	@ (8002124 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800208e:	613b      	str	r3, [r7, #16]
    break;
 8002090:	e01f      	b.n	80020d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002092:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002094:	613b      	str	r3, [r7, #16]
    break;
 8002096:	e01c      	b.n	80020d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002098:	4b21      	ldr	r3, [pc, #132]	@ (8002120 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d107      	bne.n	80020b4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e005      	b.n	80020c0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80020c0:	4a1a      	ldr	r2, [pc, #104]	@ (800212c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c8:	613b      	str	r3, [r7, #16]
    break;
 80020ca:	e002      	b.n	80020d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
    break;
 80020d0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020d2:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	3301      	adds	r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	fb03 f202 	mul.w	r2, r3, r2
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020f8:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0e5b      	lsrs	r3, r3, #25
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	3301      	adds	r3, #1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002110:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002112:	683b      	ldr	r3, [r7, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40021000 	.word	0x40021000
 8002124:	00f42400 	.word	0x00f42400
 8002128:	007a1200 	.word	0x007a1200
 800212c:	080034b0 	.word	0x080034b0

08002130 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e038      	b.n	80021b8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f7fe fc34 	bl	80009c8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3308      	adds	r3, #8
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f000 f88c 	bl	8002288 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	461a      	mov	r2, r3
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	f000 f91e 	bl	80023bc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6858      	ldr	r0, [r3, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	f000 f962 	bl	8002456 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	6892      	ldr	r2, [r2, #8]
 800219a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	6892      	ldr	r2, [r2, #8]
 80021a6:	f041 0101 	orr.w	r1, r1, #1
 80021aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_SRAM_Write_16b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer,
                                     uint32_t BufferSize)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	@ 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint32_t *psramaddress = pAddress;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	61bb      	str	r3, [r7, #24]
  uint16_t *psrcbuff = pSrcBuffer;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	617b      	str	r3, [r7, #20]
  uint8_t limit;

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d14a      	bne.n	8002278 <HAL_SRAM_Write_16b+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_SRAM_Write_16b+0x30>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e044      	b.n	800227a <HAL_SRAM_Write_16b+0xba>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Check if the size is a 32-bits multiple */
    limit = (((BufferSize % 2U) != 0U) ? 1U : 0U);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	74fb      	strb	r3, [r7, #19]

    /* Write data to memory */
    for (size = BufferSize; size != limit; size -= 2U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e018      	b.n	8002242 <HAL_SRAM_Write_16b+0x82>
    {
      *psramaddress = (uint32_t)(*psrcbuff);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	601a      	str	r2, [r3, #0]
      psrcbuff++;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3302      	adds	r3, #2
 800221e:	617b      	str	r3, [r7, #20]
      *psramaddress |= ((uint32_t)(*psrcbuff) << 16U);
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	601a      	str	r2, [r3, #0]
      psrcbuff++;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3302      	adds	r3, #2
 8002234:	617b      	str	r3, [r7, #20]
      psramaddress++;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	3304      	adds	r3, #4
 800223a:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != limit; size -= 2U)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	3b02      	subs	r3, #2
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	429a      	cmp	r2, r3
 8002248:	d1e2      	bne.n	8002210 <HAL_SRAM_Write_16b+0x50>
    }

    /* Write last 16-bits if size is not 32-bits multiple */
    if (limit != 0U)
 800224a:	7cfb      	ldrb	r3, [r7, #19]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d009      	beq.n	8002264 <HAL_SRAM_Write_16b+0xa4>
    {
      *psramaddress = ((uint32_t)(*psrcbuff) & 0x0000FFFFU) | ((*psramaddress) & 0xFFFF0000U);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	0c1b      	lsrs	r3, r3, #16
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	431a      	orrs	r2, r3
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	601a      	str	r2, [r3, #0]
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	e000      	b.n	800227a <HAL_SRAM_Write_16b+0xba>
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
}
 800227a:	4618      	mov	r0, r3
 800227c:	3724      	adds	r7, #36	@ 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	f023 0101 	bic.w	r1, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d102      	bne.n	80022b8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80022b2:	2340      	movs	r3, #64	@ 0x40
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e001      	b.n	80022bc <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80022c8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80022ce:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80022d4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80022da:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80022e0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80022e6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80022ec:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 80022f2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 80022f8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800232a:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <FMC_NORSRAM_Init+0x130>)
 800232c:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002334:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800233c:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8002344:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800234c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43db      	mvns	r3, r3
 800235c:	ea02 0103 	and.w	r1, r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4319      	orrs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002376:	d10c      	bne.n	8002392 <FMC_NORSRAM_Init+0x10a>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	0008fb7f 	.word	0x0008fb7f

080023bc <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 80023d2:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 80023da:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 80023e2:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80023ea:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80023f4:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	3b02      	subs	r3, #2
 80023fc:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80023fe:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800240a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800241e:	d113      	bne.n	8002448 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002428:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	3b01      	subs	r3, #1
 8002430:	051b      	lsls	r3, r3, #20
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	431a      	orrs	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800246a:	d121      	bne.n	80024b0 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	6819      	ldr	r1, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	4319      	orrs	r1, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	4319      	orrs	r1, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	079b      	lsls	r3, r3, #30
 8002492:	4319      	orrs	r1, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4319      	orrs	r1, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	430b      	orrs	r3, r1
 80024a2:	ea42 0103 	orr.w	r1, r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80024ae:	e005      	b.n	80024bc <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80024b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <rand>:
 80024cc:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <rand+0x5c>)
 80024ce:	b510      	push	{r4, lr}
 80024d0:	681c      	ldr	r4, [r3, #0]
 80024d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80024d4:	b9b3      	cbnz	r3, 8002504 <rand+0x38>
 80024d6:	2018      	movs	r0, #24
 80024d8:	f000 fa20 	bl	800291c <malloc>
 80024dc:	4602      	mov	r2, r0
 80024de:	6320      	str	r0, [r4, #48]	@ 0x30
 80024e0:	b920      	cbnz	r0, 80024ec <rand+0x20>
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <rand+0x60>)
 80024e4:	4812      	ldr	r0, [pc, #72]	@ (8002530 <rand+0x64>)
 80024e6:	2152      	movs	r1, #82	@ 0x52
 80024e8:	f000 f9b0 	bl	800284c <__assert_func>
 80024ec:	4911      	ldr	r1, [pc, #68]	@ (8002534 <rand+0x68>)
 80024ee:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <rand+0x6c>)
 80024f0:	e9c0 1300 	strd	r1, r3, [r0]
 80024f4:	4b11      	ldr	r3, [pc, #68]	@ (800253c <rand+0x70>)
 80024f6:	6083      	str	r3, [r0, #8]
 80024f8:	230b      	movs	r3, #11
 80024fa:	8183      	strh	r3, [r0, #12]
 80024fc:	2100      	movs	r1, #0
 80024fe:	2001      	movs	r0, #1
 8002500:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002504:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002506:	480e      	ldr	r0, [pc, #56]	@ (8002540 <rand+0x74>)
 8002508:	690b      	ldr	r3, [r1, #16]
 800250a:	694c      	ldr	r4, [r1, #20]
 800250c:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <rand+0x78>)
 800250e:	4358      	muls	r0, r3
 8002510:	fb02 0004 	mla	r0, r2, r4, r0
 8002514:	fba3 3202 	umull	r3, r2, r3, r2
 8002518:	3301      	adds	r3, #1
 800251a:	eb40 0002 	adc.w	r0, r0, r2
 800251e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002522:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002526:	bd10      	pop	{r4, pc}
 8002528:	2000001c 	.word	0x2000001c
 800252c:	080034e0 	.word	0x080034e0
 8002530:	080034f7 	.word	0x080034f7
 8002534:	abcd330e 	.word	0xabcd330e
 8002538:	e66d1234 	.word	0xe66d1234
 800253c:	0005deec 	.word	0x0005deec
 8002540:	5851f42d 	.word	0x5851f42d
 8002544:	4c957f2d 	.word	0x4c957f2d

08002548 <std>:
 8002548:	2300      	movs	r3, #0
 800254a:	b510      	push	{r4, lr}
 800254c:	4604      	mov	r4, r0
 800254e:	e9c0 3300 	strd	r3, r3, [r0]
 8002552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002556:	6083      	str	r3, [r0, #8]
 8002558:	8181      	strh	r1, [r0, #12]
 800255a:	6643      	str	r3, [r0, #100]	@ 0x64
 800255c:	81c2      	strh	r2, [r0, #14]
 800255e:	6183      	str	r3, [r0, #24]
 8002560:	4619      	mov	r1, r3
 8002562:	2208      	movs	r2, #8
 8002564:	305c      	adds	r0, #92	@ 0x5c
 8002566:	f000 f8f4 	bl	8002752 <memset>
 800256a:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <std+0x58>)
 800256c:	6263      	str	r3, [r4, #36]	@ 0x24
 800256e:	4b0d      	ldr	r3, [pc, #52]	@ (80025a4 <std+0x5c>)
 8002570:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <std+0x60>)
 8002574:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002576:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <std+0x64>)
 8002578:	6323      	str	r3, [r4, #48]	@ 0x30
 800257a:	4b0d      	ldr	r3, [pc, #52]	@ (80025b0 <std+0x68>)
 800257c:	6224      	str	r4, [r4, #32]
 800257e:	429c      	cmp	r4, r3
 8002580:	d006      	beq.n	8002590 <std+0x48>
 8002582:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002586:	4294      	cmp	r4, r2
 8002588:	d002      	beq.n	8002590 <std+0x48>
 800258a:	33d0      	adds	r3, #208	@ 0xd0
 800258c:	429c      	cmp	r4, r3
 800258e:	d105      	bne.n	800259c <std+0x54>
 8002590:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002598:	f000 b954 	b.w	8002844 <__retarget_lock_init_recursive>
 800259c:	bd10      	pop	{r4, pc}
 800259e:	bf00      	nop
 80025a0:	080026cd 	.word	0x080026cd
 80025a4:	080026ef 	.word	0x080026ef
 80025a8:	08002727 	.word	0x08002727
 80025ac:	0800274b 	.word	0x0800274b
 80025b0:	20000128 	.word	0x20000128

080025b4 <stdio_exit_handler>:
 80025b4:	4a02      	ldr	r2, [pc, #8]	@ (80025c0 <stdio_exit_handler+0xc>)
 80025b6:	4903      	ldr	r1, [pc, #12]	@ (80025c4 <stdio_exit_handler+0x10>)
 80025b8:	4803      	ldr	r0, [pc, #12]	@ (80025c8 <stdio_exit_handler+0x14>)
 80025ba:	f000 b869 	b.w	8002690 <_fwalk_sglue>
 80025be:	bf00      	nop
 80025c0:	20000010 	.word	0x20000010
 80025c4:	08002b91 	.word	0x08002b91
 80025c8:	20000020 	.word	0x20000020

080025cc <cleanup_stdio>:
 80025cc:	6841      	ldr	r1, [r0, #4]
 80025ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <cleanup_stdio+0x34>)
 80025d0:	4299      	cmp	r1, r3
 80025d2:	b510      	push	{r4, lr}
 80025d4:	4604      	mov	r4, r0
 80025d6:	d001      	beq.n	80025dc <cleanup_stdio+0x10>
 80025d8:	f000 fada 	bl	8002b90 <_fflush_r>
 80025dc:	68a1      	ldr	r1, [r4, #8]
 80025de:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <cleanup_stdio+0x38>)
 80025e0:	4299      	cmp	r1, r3
 80025e2:	d002      	beq.n	80025ea <cleanup_stdio+0x1e>
 80025e4:	4620      	mov	r0, r4
 80025e6:	f000 fad3 	bl	8002b90 <_fflush_r>
 80025ea:	68e1      	ldr	r1, [r4, #12]
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <cleanup_stdio+0x3c>)
 80025ee:	4299      	cmp	r1, r3
 80025f0:	d004      	beq.n	80025fc <cleanup_stdio+0x30>
 80025f2:	4620      	mov	r0, r4
 80025f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f8:	f000 baca 	b.w	8002b90 <_fflush_r>
 80025fc:	bd10      	pop	{r4, pc}
 80025fe:	bf00      	nop
 8002600:	20000128 	.word	0x20000128
 8002604:	20000190 	.word	0x20000190
 8002608:	200001f8 	.word	0x200001f8

0800260c <global_stdio_init.part.0>:
 800260c:	b510      	push	{r4, lr}
 800260e:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <global_stdio_init.part.0+0x30>)
 8002610:	4c0b      	ldr	r4, [pc, #44]	@ (8002640 <global_stdio_init.part.0+0x34>)
 8002612:	4a0c      	ldr	r2, [pc, #48]	@ (8002644 <global_stdio_init.part.0+0x38>)
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	4620      	mov	r0, r4
 8002618:	2200      	movs	r2, #0
 800261a:	2104      	movs	r1, #4
 800261c:	f7ff ff94 	bl	8002548 <std>
 8002620:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002624:	2201      	movs	r2, #1
 8002626:	2109      	movs	r1, #9
 8002628:	f7ff ff8e 	bl	8002548 <std>
 800262c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002630:	2202      	movs	r2, #2
 8002632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002636:	2112      	movs	r1, #18
 8002638:	f7ff bf86 	b.w	8002548 <std>
 800263c:	20000260 	.word	0x20000260
 8002640:	20000128 	.word	0x20000128
 8002644:	080025b5 	.word	0x080025b5

08002648 <__sfp_lock_acquire>:
 8002648:	4801      	ldr	r0, [pc, #4]	@ (8002650 <__sfp_lock_acquire+0x8>)
 800264a:	f000 b8fc 	b.w	8002846 <__retarget_lock_acquire_recursive>
 800264e:	bf00      	nop
 8002650:	20000269 	.word	0x20000269

08002654 <__sfp_lock_release>:
 8002654:	4801      	ldr	r0, [pc, #4]	@ (800265c <__sfp_lock_release+0x8>)
 8002656:	f000 b8f7 	b.w	8002848 <__retarget_lock_release_recursive>
 800265a:	bf00      	nop
 800265c:	20000269 	.word	0x20000269

08002660 <__sinit>:
 8002660:	b510      	push	{r4, lr}
 8002662:	4604      	mov	r4, r0
 8002664:	f7ff fff0 	bl	8002648 <__sfp_lock_acquire>
 8002668:	6a23      	ldr	r3, [r4, #32]
 800266a:	b11b      	cbz	r3, 8002674 <__sinit+0x14>
 800266c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002670:	f7ff bff0 	b.w	8002654 <__sfp_lock_release>
 8002674:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <__sinit+0x28>)
 8002676:	6223      	str	r3, [r4, #32]
 8002678:	4b04      	ldr	r3, [pc, #16]	@ (800268c <__sinit+0x2c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f5      	bne.n	800266c <__sinit+0xc>
 8002680:	f7ff ffc4 	bl	800260c <global_stdio_init.part.0>
 8002684:	e7f2      	b.n	800266c <__sinit+0xc>
 8002686:	bf00      	nop
 8002688:	080025cd 	.word	0x080025cd
 800268c:	20000260 	.word	0x20000260

08002690 <_fwalk_sglue>:
 8002690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002694:	4607      	mov	r7, r0
 8002696:	4688      	mov	r8, r1
 8002698:	4614      	mov	r4, r2
 800269a:	2600      	movs	r6, #0
 800269c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026a0:	f1b9 0901 	subs.w	r9, r9, #1
 80026a4:	d505      	bpl.n	80026b2 <_fwalk_sglue+0x22>
 80026a6:	6824      	ldr	r4, [r4, #0]
 80026a8:	2c00      	cmp	r4, #0
 80026aa:	d1f7      	bne.n	800269c <_fwalk_sglue+0xc>
 80026ac:	4630      	mov	r0, r6
 80026ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026b2:	89ab      	ldrh	r3, [r5, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d907      	bls.n	80026c8 <_fwalk_sglue+0x38>
 80026b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026bc:	3301      	adds	r3, #1
 80026be:	d003      	beq.n	80026c8 <_fwalk_sglue+0x38>
 80026c0:	4629      	mov	r1, r5
 80026c2:	4638      	mov	r0, r7
 80026c4:	47c0      	blx	r8
 80026c6:	4306      	orrs	r6, r0
 80026c8:	3568      	adds	r5, #104	@ 0x68
 80026ca:	e7e9      	b.n	80026a0 <_fwalk_sglue+0x10>

080026cc <__sread>:
 80026cc:	b510      	push	{r4, lr}
 80026ce:	460c      	mov	r4, r1
 80026d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026d4:	f000 f868 	bl	80027a8 <_read_r>
 80026d8:	2800      	cmp	r0, #0
 80026da:	bfab      	itete	ge
 80026dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80026de:	89a3      	ldrhlt	r3, [r4, #12]
 80026e0:	181b      	addge	r3, r3, r0
 80026e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80026e6:	bfac      	ite	ge
 80026e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80026ea:	81a3      	strhlt	r3, [r4, #12]
 80026ec:	bd10      	pop	{r4, pc}

080026ee <__swrite>:
 80026ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026f2:	461f      	mov	r7, r3
 80026f4:	898b      	ldrh	r3, [r1, #12]
 80026f6:	05db      	lsls	r3, r3, #23
 80026f8:	4605      	mov	r5, r0
 80026fa:	460c      	mov	r4, r1
 80026fc:	4616      	mov	r6, r2
 80026fe:	d505      	bpl.n	800270c <__swrite+0x1e>
 8002700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002704:	2302      	movs	r3, #2
 8002706:	2200      	movs	r2, #0
 8002708:	f000 f83c 	bl	8002784 <_lseek_r>
 800270c:	89a3      	ldrh	r3, [r4, #12]
 800270e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002712:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002716:	81a3      	strh	r3, [r4, #12]
 8002718:	4632      	mov	r2, r6
 800271a:	463b      	mov	r3, r7
 800271c:	4628      	mov	r0, r5
 800271e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002722:	f000 b853 	b.w	80027cc <_write_r>

08002726 <__sseek>:
 8002726:	b510      	push	{r4, lr}
 8002728:	460c      	mov	r4, r1
 800272a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800272e:	f000 f829 	bl	8002784 <_lseek_r>
 8002732:	1c43      	adds	r3, r0, #1
 8002734:	89a3      	ldrh	r3, [r4, #12]
 8002736:	bf15      	itete	ne
 8002738:	6560      	strne	r0, [r4, #84]	@ 0x54
 800273a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800273e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002742:	81a3      	strheq	r3, [r4, #12]
 8002744:	bf18      	it	ne
 8002746:	81a3      	strhne	r3, [r4, #12]
 8002748:	bd10      	pop	{r4, pc}

0800274a <__sclose>:
 800274a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800274e:	f000 b809 	b.w	8002764 <_close_r>

08002752 <memset>:
 8002752:	4402      	add	r2, r0
 8002754:	4603      	mov	r3, r0
 8002756:	4293      	cmp	r3, r2
 8002758:	d100      	bne.n	800275c <memset+0xa>
 800275a:	4770      	bx	lr
 800275c:	f803 1b01 	strb.w	r1, [r3], #1
 8002760:	e7f9      	b.n	8002756 <memset+0x4>
	...

08002764 <_close_r>:
 8002764:	b538      	push	{r3, r4, r5, lr}
 8002766:	4d06      	ldr	r5, [pc, #24]	@ (8002780 <_close_r+0x1c>)
 8002768:	2300      	movs	r3, #0
 800276a:	4604      	mov	r4, r0
 800276c:	4608      	mov	r0, r1
 800276e:	602b      	str	r3, [r5, #0]
 8002770:	f7fe f9bf 	bl	8000af2 <_close>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	d102      	bne.n	800277e <_close_r+0x1a>
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	b103      	cbz	r3, 800277e <_close_r+0x1a>
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	bd38      	pop	{r3, r4, r5, pc}
 8002780:	20000264 	.word	0x20000264

08002784 <_lseek_r>:
 8002784:	b538      	push	{r3, r4, r5, lr}
 8002786:	4d07      	ldr	r5, [pc, #28]	@ (80027a4 <_lseek_r+0x20>)
 8002788:	4604      	mov	r4, r0
 800278a:	4608      	mov	r0, r1
 800278c:	4611      	mov	r1, r2
 800278e:	2200      	movs	r2, #0
 8002790:	602a      	str	r2, [r5, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	f7fe f9d4 	bl	8000b40 <_lseek>
 8002798:	1c43      	adds	r3, r0, #1
 800279a:	d102      	bne.n	80027a2 <_lseek_r+0x1e>
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	b103      	cbz	r3, 80027a2 <_lseek_r+0x1e>
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	bd38      	pop	{r3, r4, r5, pc}
 80027a4:	20000264 	.word	0x20000264

080027a8 <_read_r>:
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4d07      	ldr	r5, [pc, #28]	@ (80027c8 <_read_r+0x20>)
 80027ac:	4604      	mov	r4, r0
 80027ae:	4608      	mov	r0, r1
 80027b0:	4611      	mov	r1, r2
 80027b2:	2200      	movs	r2, #0
 80027b4:	602a      	str	r2, [r5, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f7fe f962 	bl	8000a80 <_read>
 80027bc:	1c43      	adds	r3, r0, #1
 80027be:	d102      	bne.n	80027c6 <_read_r+0x1e>
 80027c0:	682b      	ldr	r3, [r5, #0]
 80027c2:	b103      	cbz	r3, 80027c6 <_read_r+0x1e>
 80027c4:	6023      	str	r3, [r4, #0]
 80027c6:	bd38      	pop	{r3, r4, r5, pc}
 80027c8:	20000264 	.word	0x20000264

080027cc <_write_r>:
 80027cc:	b538      	push	{r3, r4, r5, lr}
 80027ce:	4d07      	ldr	r5, [pc, #28]	@ (80027ec <_write_r+0x20>)
 80027d0:	4604      	mov	r4, r0
 80027d2:	4608      	mov	r0, r1
 80027d4:	4611      	mov	r1, r2
 80027d6:	2200      	movs	r2, #0
 80027d8:	602a      	str	r2, [r5, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	f7fe f96d 	bl	8000aba <_write>
 80027e0:	1c43      	adds	r3, r0, #1
 80027e2:	d102      	bne.n	80027ea <_write_r+0x1e>
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	b103      	cbz	r3, 80027ea <_write_r+0x1e>
 80027e8:	6023      	str	r3, [r4, #0]
 80027ea:	bd38      	pop	{r3, r4, r5, pc}
 80027ec:	20000264 	.word	0x20000264

080027f0 <__errno>:
 80027f0:	4b01      	ldr	r3, [pc, #4]	@ (80027f8 <__errno+0x8>)
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	2000001c 	.word	0x2000001c

080027fc <__libc_init_array>:
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	4d0d      	ldr	r5, [pc, #52]	@ (8002834 <__libc_init_array+0x38>)
 8002800:	4c0d      	ldr	r4, [pc, #52]	@ (8002838 <__libc_init_array+0x3c>)
 8002802:	1b64      	subs	r4, r4, r5
 8002804:	10a4      	asrs	r4, r4, #2
 8002806:	2600      	movs	r6, #0
 8002808:	42a6      	cmp	r6, r4
 800280a:	d109      	bne.n	8002820 <__libc_init_array+0x24>
 800280c:	4d0b      	ldr	r5, [pc, #44]	@ (800283c <__libc_init_array+0x40>)
 800280e:	4c0c      	ldr	r4, [pc, #48]	@ (8002840 <__libc_init_array+0x44>)
 8002810:	f000 fe3a 	bl	8003488 <_init>
 8002814:	1b64      	subs	r4, r4, r5
 8002816:	10a4      	asrs	r4, r4, #2
 8002818:	2600      	movs	r6, #0
 800281a:	42a6      	cmp	r6, r4
 800281c:	d105      	bne.n	800282a <__libc_init_array+0x2e>
 800281e:	bd70      	pop	{r4, r5, r6, pc}
 8002820:	f855 3b04 	ldr.w	r3, [r5], #4
 8002824:	4798      	blx	r3
 8002826:	3601      	adds	r6, #1
 8002828:	e7ee      	b.n	8002808 <__libc_init_array+0xc>
 800282a:	f855 3b04 	ldr.w	r3, [r5], #4
 800282e:	4798      	blx	r3
 8002830:	3601      	adds	r6, #1
 8002832:	e7f2      	b.n	800281a <__libc_init_array+0x1e>
 8002834:	080035c8 	.word	0x080035c8
 8002838:	080035c8 	.word	0x080035c8
 800283c:	080035c8 	.word	0x080035c8
 8002840:	080035cc 	.word	0x080035cc

08002844 <__retarget_lock_init_recursive>:
 8002844:	4770      	bx	lr

08002846 <__retarget_lock_acquire_recursive>:
 8002846:	4770      	bx	lr

08002848 <__retarget_lock_release_recursive>:
 8002848:	4770      	bx	lr
	...

0800284c <__assert_func>:
 800284c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800284e:	4614      	mov	r4, r2
 8002850:	461a      	mov	r2, r3
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <__assert_func+0x2c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4605      	mov	r5, r0
 8002858:	68d8      	ldr	r0, [r3, #12]
 800285a:	b954      	cbnz	r4, 8002872 <__assert_func+0x26>
 800285c:	4b07      	ldr	r3, [pc, #28]	@ (800287c <__assert_func+0x30>)
 800285e:	461c      	mov	r4, r3
 8002860:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002864:	9100      	str	r1, [sp, #0]
 8002866:	462b      	mov	r3, r5
 8002868:	4905      	ldr	r1, [pc, #20]	@ (8002880 <__assert_func+0x34>)
 800286a:	f000 f9b9 	bl	8002be0 <fiprintf>
 800286e:	f000 f9d9 	bl	8002c24 <abort>
 8002872:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <__assert_func+0x38>)
 8002874:	e7f4      	b.n	8002860 <__assert_func+0x14>
 8002876:	bf00      	nop
 8002878:	2000001c 	.word	0x2000001c
 800287c:	0800358a 	.word	0x0800358a
 8002880:	0800355c 	.word	0x0800355c
 8002884:	0800354f 	.word	0x0800354f

08002888 <_free_r>:
 8002888:	b538      	push	{r3, r4, r5, lr}
 800288a:	4605      	mov	r5, r0
 800288c:	2900      	cmp	r1, #0
 800288e:	d041      	beq.n	8002914 <_free_r+0x8c>
 8002890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002894:	1f0c      	subs	r4, r1, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	bfb8      	it	lt
 800289a:	18e4      	addlt	r4, r4, r3
 800289c:	f000 f8e8 	bl	8002a70 <__malloc_lock>
 80028a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002918 <_free_r+0x90>)
 80028a2:	6813      	ldr	r3, [r2, #0]
 80028a4:	b933      	cbnz	r3, 80028b4 <_free_r+0x2c>
 80028a6:	6063      	str	r3, [r4, #4]
 80028a8:	6014      	str	r4, [r2, #0]
 80028aa:	4628      	mov	r0, r5
 80028ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028b0:	f000 b8e4 	b.w	8002a7c <__malloc_unlock>
 80028b4:	42a3      	cmp	r3, r4
 80028b6:	d908      	bls.n	80028ca <_free_r+0x42>
 80028b8:	6820      	ldr	r0, [r4, #0]
 80028ba:	1821      	adds	r1, r4, r0
 80028bc:	428b      	cmp	r3, r1
 80028be:	bf01      	itttt	eq
 80028c0:	6819      	ldreq	r1, [r3, #0]
 80028c2:	685b      	ldreq	r3, [r3, #4]
 80028c4:	1809      	addeq	r1, r1, r0
 80028c6:	6021      	streq	r1, [r4, #0]
 80028c8:	e7ed      	b.n	80028a6 <_free_r+0x1e>
 80028ca:	461a      	mov	r2, r3
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	b10b      	cbz	r3, 80028d4 <_free_r+0x4c>
 80028d0:	42a3      	cmp	r3, r4
 80028d2:	d9fa      	bls.n	80028ca <_free_r+0x42>
 80028d4:	6811      	ldr	r1, [r2, #0]
 80028d6:	1850      	adds	r0, r2, r1
 80028d8:	42a0      	cmp	r0, r4
 80028da:	d10b      	bne.n	80028f4 <_free_r+0x6c>
 80028dc:	6820      	ldr	r0, [r4, #0]
 80028de:	4401      	add	r1, r0
 80028e0:	1850      	adds	r0, r2, r1
 80028e2:	4283      	cmp	r3, r0
 80028e4:	6011      	str	r1, [r2, #0]
 80028e6:	d1e0      	bne.n	80028aa <_free_r+0x22>
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	6053      	str	r3, [r2, #4]
 80028ee:	4408      	add	r0, r1
 80028f0:	6010      	str	r0, [r2, #0]
 80028f2:	e7da      	b.n	80028aa <_free_r+0x22>
 80028f4:	d902      	bls.n	80028fc <_free_r+0x74>
 80028f6:	230c      	movs	r3, #12
 80028f8:	602b      	str	r3, [r5, #0]
 80028fa:	e7d6      	b.n	80028aa <_free_r+0x22>
 80028fc:	6820      	ldr	r0, [r4, #0]
 80028fe:	1821      	adds	r1, r4, r0
 8002900:	428b      	cmp	r3, r1
 8002902:	bf04      	itt	eq
 8002904:	6819      	ldreq	r1, [r3, #0]
 8002906:	685b      	ldreq	r3, [r3, #4]
 8002908:	6063      	str	r3, [r4, #4]
 800290a:	bf04      	itt	eq
 800290c:	1809      	addeq	r1, r1, r0
 800290e:	6021      	streq	r1, [r4, #0]
 8002910:	6054      	str	r4, [r2, #4]
 8002912:	e7ca      	b.n	80028aa <_free_r+0x22>
 8002914:	bd38      	pop	{r3, r4, r5, pc}
 8002916:	bf00      	nop
 8002918:	20000270 	.word	0x20000270

0800291c <malloc>:
 800291c:	4b02      	ldr	r3, [pc, #8]	@ (8002928 <malloc+0xc>)
 800291e:	4601      	mov	r1, r0
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	f000 b825 	b.w	8002970 <_malloc_r>
 8002926:	bf00      	nop
 8002928:	2000001c 	.word	0x2000001c

0800292c <sbrk_aligned>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	4e0f      	ldr	r6, [pc, #60]	@ (800296c <sbrk_aligned+0x40>)
 8002930:	460c      	mov	r4, r1
 8002932:	6831      	ldr	r1, [r6, #0]
 8002934:	4605      	mov	r5, r0
 8002936:	b911      	cbnz	r1, 800293e <sbrk_aligned+0x12>
 8002938:	f000 f964 	bl	8002c04 <_sbrk_r>
 800293c:	6030      	str	r0, [r6, #0]
 800293e:	4621      	mov	r1, r4
 8002940:	4628      	mov	r0, r5
 8002942:	f000 f95f 	bl	8002c04 <_sbrk_r>
 8002946:	1c43      	adds	r3, r0, #1
 8002948:	d103      	bne.n	8002952 <sbrk_aligned+0x26>
 800294a:	f04f 34ff 	mov.w	r4, #4294967295
 800294e:	4620      	mov	r0, r4
 8002950:	bd70      	pop	{r4, r5, r6, pc}
 8002952:	1cc4      	adds	r4, r0, #3
 8002954:	f024 0403 	bic.w	r4, r4, #3
 8002958:	42a0      	cmp	r0, r4
 800295a:	d0f8      	beq.n	800294e <sbrk_aligned+0x22>
 800295c:	1a21      	subs	r1, r4, r0
 800295e:	4628      	mov	r0, r5
 8002960:	f000 f950 	bl	8002c04 <_sbrk_r>
 8002964:	3001      	adds	r0, #1
 8002966:	d1f2      	bne.n	800294e <sbrk_aligned+0x22>
 8002968:	e7ef      	b.n	800294a <sbrk_aligned+0x1e>
 800296a:	bf00      	nop
 800296c:	2000026c 	.word	0x2000026c

08002970 <_malloc_r>:
 8002970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002974:	1ccd      	adds	r5, r1, #3
 8002976:	f025 0503 	bic.w	r5, r5, #3
 800297a:	3508      	adds	r5, #8
 800297c:	2d0c      	cmp	r5, #12
 800297e:	bf38      	it	cc
 8002980:	250c      	movcc	r5, #12
 8002982:	2d00      	cmp	r5, #0
 8002984:	4606      	mov	r6, r0
 8002986:	db01      	blt.n	800298c <_malloc_r+0x1c>
 8002988:	42a9      	cmp	r1, r5
 800298a:	d904      	bls.n	8002996 <_malloc_r+0x26>
 800298c:	230c      	movs	r3, #12
 800298e:	6033      	str	r3, [r6, #0]
 8002990:	2000      	movs	r0, #0
 8002992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a6c <_malloc_r+0xfc>
 800299a:	f000 f869 	bl	8002a70 <__malloc_lock>
 800299e:	f8d8 3000 	ldr.w	r3, [r8]
 80029a2:	461c      	mov	r4, r3
 80029a4:	bb44      	cbnz	r4, 80029f8 <_malloc_r+0x88>
 80029a6:	4629      	mov	r1, r5
 80029a8:	4630      	mov	r0, r6
 80029aa:	f7ff ffbf 	bl	800292c <sbrk_aligned>
 80029ae:	1c43      	adds	r3, r0, #1
 80029b0:	4604      	mov	r4, r0
 80029b2:	d158      	bne.n	8002a66 <_malloc_r+0xf6>
 80029b4:	f8d8 4000 	ldr.w	r4, [r8]
 80029b8:	4627      	mov	r7, r4
 80029ba:	2f00      	cmp	r7, #0
 80029bc:	d143      	bne.n	8002a46 <_malloc_r+0xd6>
 80029be:	2c00      	cmp	r4, #0
 80029c0:	d04b      	beq.n	8002a5a <_malloc_r+0xea>
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	4639      	mov	r1, r7
 80029c6:	4630      	mov	r0, r6
 80029c8:	eb04 0903 	add.w	r9, r4, r3
 80029cc:	f000 f91a 	bl	8002c04 <_sbrk_r>
 80029d0:	4581      	cmp	r9, r0
 80029d2:	d142      	bne.n	8002a5a <_malloc_r+0xea>
 80029d4:	6821      	ldr	r1, [r4, #0]
 80029d6:	1a6d      	subs	r5, r5, r1
 80029d8:	4629      	mov	r1, r5
 80029da:	4630      	mov	r0, r6
 80029dc:	f7ff ffa6 	bl	800292c <sbrk_aligned>
 80029e0:	3001      	adds	r0, #1
 80029e2:	d03a      	beq.n	8002a5a <_malloc_r+0xea>
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	442b      	add	r3, r5
 80029e8:	6023      	str	r3, [r4, #0]
 80029ea:	f8d8 3000 	ldr.w	r3, [r8]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	bb62      	cbnz	r2, 8002a4c <_malloc_r+0xdc>
 80029f2:	f8c8 7000 	str.w	r7, [r8]
 80029f6:	e00f      	b.n	8002a18 <_malloc_r+0xa8>
 80029f8:	6822      	ldr	r2, [r4, #0]
 80029fa:	1b52      	subs	r2, r2, r5
 80029fc:	d420      	bmi.n	8002a40 <_malloc_r+0xd0>
 80029fe:	2a0b      	cmp	r2, #11
 8002a00:	d917      	bls.n	8002a32 <_malloc_r+0xc2>
 8002a02:	1961      	adds	r1, r4, r5
 8002a04:	42a3      	cmp	r3, r4
 8002a06:	6025      	str	r5, [r4, #0]
 8002a08:	bf18      	it	ne
 8002a0a:	6059      	strne	r1, [r3, #4]
 8002a0c:	6863      	ldr	r3, [r4, #4]
 8002a0e:	bf08      	it	eq
 8002a10:	f8c8 1000 	streq.w	r1, [r8]
 8002a14:	5162      	str	r2, [r4, r5]
 8002a16:	604b      	str	r3, [r1, #4]
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f000 f82f 	bl	8002a7c <__malloc_unlock>
 8002a1e:	f104 000b 	add.w	r0, r4, #11
 8002a22:	1d23      	adds	r3, r4, #4
 8002a24:	f020 0007 	bic.w	r0, r0, #7
 8002a28:	1ac2      	subs	r2, r0, r3
 8002a2a:	bf1c      	itt	ne
 8002a2c:	1a1b      	subne	r3, r3, r0
 8002a2e:	50a3      	strne	r3, [r4, r2]
 8002a30:	e7af      	b.n	8002992 <_malloc_r+0x22>
 8002a32:	6862      	ldr	r2, [r4, #4]
 8002a34:	42a3      	cmp	r3, r4
 8002a36:	bf0c      	ite	eq
 8002a38:	f8c8 2000 	streq.w	r2, [r8]
 8002a3c:	605a      	strne	r2, [r3, #4]
 8002a3e:	e7eb      	b.n	8002a18 <_malloc_r+0xa8>
 8002a40:	4623      	mov	r3, r4
 8002a42:	6864      	ldr	r4, [r4, #4]
 8002a44:	e7ae      	b.n	80029a4 <_malloc_r+0x34>
 8002a46:	463c      	mov	r4, r7
 8002a48:	687f      	ldr	r7, [r7, #4]
 8002a4a:	e7b6      	b.n	80029ba <_malloc_r+0x4a>
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	42a3      	cmp	r3, r4
 8002a52:	d1fb      	bne.n	8002a4c <_malloc_r+0xdc>
 8002a54:	2300      	movs	r3, #0
 8002a56:	6053      	str	r3, [r2, #4]
 8002a58:	e7de      	b.n	8002a18 <_malloc_r+0xa8>
 8002a5a:	230c      	movs	r3, #12
 8002a5c:	6033      	str	r3, [r6, #0]
 8002a5e:	4630      	mov	r0, r6
 8002a60:	f000 f80c 	bl	8002a7c <__malloc_unlock>
 8002a64:	e794      	b.n	8002990 <_malloc_r+0x20>
 8002a66:	6005      	str	r5, [r0, #0]
 8002a68:	e7d6      	b.n	8002a18 <_malloc_r+0xa8>
 8002a6a:	bf00      	nop
 8002a6c:	20000270 	.word	0x20000270

08002a70 <__malloc_lock>:
 8002a70:	4801      	ldr	r0, [pc, #4]	@ (8002a78 <__malloc_lock+0x8>)
 8002a72:	f7ff bee8 	b.w	8002846 <__retarget_lock_acquire_recursive>
 8002a76:	bf00      	nop
 8002a78:	20000268 	.word	0x20000268

08002a7c <__malloc_unlock>:
 8002a7c:	4801      	ldr	r0, [pc, #4]	@ (8002a84 <__malloc_unlock+0x8>)
 8002a7e:	f7ff bee3 	b.w	8002848 <__retarget_lock_release_recursive>
 8002a82:	bf00      	nop
 8002a84:	20000268 	.word	0x20000268

08002a88 <__sflush_r>:
 8002a88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a90:	0716      	lsls	r6, r2, #28
 8002a92:	4605      	mov	r5, r0
 8002a94:	460c      	mov	r4, r1
 8002a96:	d454      	bmi.n	8002b42 <__sflush_r+0xba>
 8002a98:	684b      	ldr	r3, [r1, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	dc02      	bgt.n	8002aa4 <__sflush_r+0x1c>
 8002a9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	dd48      	ble.n	8002b36 <__sflush_r+0xae>
 8002aa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002aa6:	2e00      	cmp	r6, #0
 8002aa8:	d045      	beq.n	8002b36 <__sflush_r+0xae>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002ab0:	682f      	ldr	r7, [r5, #0]
 8002ab2:	6a21      	ldr	r1, [r4, #32]
 8002ab4:	602b      	str	r3, [r5, #0]
 8002ab6:	d030      	beq.n	8002b1a <__sflush_r+0x92>
 8002ab8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002aba:	89a3      	ldrh	r3, [r4, #12]
 8002abc:	0759      	lsls	r1, r3, #29
 8002abe:	d505      	bpl.n	8002acc <__sflush_r+0x44>
 8002ac0:	6863      	ldr	r3, [r4, #4]
 8002ac2:	1ad2      	subs	r2, r2, r3
 8002ac4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002ac6:	b10b      	cbz	r3, 8002acc <__sflush_r+0x44>
 8002ac8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002aca:	1ad2      	subs	r2, r2, r3
 8002acc:	2300      	movs	r3, #0
 8002ace:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ad0:	6a21      	ldr	r1, [r4, #32]
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	47b0      	blx	r6
 8002ad6:	1c43      	adds	r3, r0, #1
 8002ad8:	89a3      	ldrh	r3, [r4, #12]
 8002ada:	d106      	bne.n	8002aea <__sflush_r+0x62>
 8002adc:	6829      	ldr	r1, [r5, #0]
 8002ade:	291d      	cmp	r1, #29
 8002ae0:	d82b      	bhi.n	8002b3a <__sflush_r+0xb2>
 8002ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8002b8c <__sflush_r+0x104>)
 8002ae4:	410a      	asrs	r2, r1
 8002ae6:	07d6      	lsls	r6, r2, #31
 8002ae8:	d427      	bmi.n	8002b3a <__sflush_r+0xb2>
 8002aea:	2200      	movs	r2, #0
 8002aec:	6062      	str	r2, [r4, #4]
 8002aee:	04d9      	lsls	r1, r3, #19
 8002af0:	6922      	ldr	r2, [r4, #16]
 8002af2:	6022      	str	r2, [r4, #0]
 8002af4:	d504      	bpl.n	8002b00 <__sflush_r+0x78>
 8002af6:	1c42      	adds	r2, r0, #1
 8002af8:	d101      	bne.n	8002afe <__sflush_r+0x76>
 8002afa:	682b      	ldr	r3, [r5, #0]
 8002afc:	b903      	cbnz	r3, 8002b00 <__sflush_r+0x78>
 8002afe:	6560      	str	r0, [r4, #84]	@ 0x54
 8002b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b02:	602f      	str	r7, [r5, #0]
 8002b04:	b1b9      	cbz	r1, 8002b36 <__sflush_r+0xae>
 8002b06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b0a:	4299      	cmp	r1, r3
 8002b0c:	d002      	beq.n	8002b14 <__sflush_r+0x8c>
 8002b0e:	4628      	mov	r0, r5
 8002b10:	f7ff feba 	bl	8002888 <_free_r>
 8002b14:	2300      	movs	r3, #0
 8002b16:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b18:	e00d      	b.n	8002b36 <__sflush_r+0xae>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	47b0      	blx	r6
 8002b20:	4602      	mov	r2, r0
 8002b22:	1c50      	adds	r0, r2, #1
 8002b24:	d1c9      	bne.n	8002aba <__sflush_r+0x32>
 8002b26:	682b      	ldr	r3, [r5, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0c6      	beq.n	8002aba <__sflush_r+0x32>
 8002b2c:	2b1d      	cmp	r3, #29
 8002b2e:	d001      	beq.n	8002b34 <__sflush_r+0xac>
 8002b30:	2b16      	cmp	r3, #22
 8002b32:	d11e      	bne.n	8002b72 <__sflush_r+0xea>
 8002b34:	602f      	str	r7, [r5, #0]
 8002b36:	2000      	movs	r0, #0
 8002b38:	e022      	b.n	8002b80 <__sflush_r+0xf8>
 8002b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b3e:	b21b      	sxth	r3, r3
 8002b40:	e01b      	b.n	8002b7a <__sflush_r+0xf2>
 8002b42:	690f      	ldr	r7, [r1, #16]
 8002b44:	2f00      	cmp	r7, #0
 8002b46:	d0f6      	beq.n	8002b36 <__sflush_r+0xae>
 8002b48:	0793      	lsls	r3, r2, #30
 8002b4a:	680e      	ldr	r6, [r1, #0]
 8002b4c:	bf08      	it	eq
 8002b4e:	694b      	ldreq	r3, [r1, #20]
 8002b50:	600f      	str	r7, [r1, #0]
 8002b52:	bf18      	it	ne
 8002b54:	2300      	movne	r3, #0
 8002b56:	eba6 0807 	sub.w	r8, r6, r7
 8002b5a:	608b      	str	r3, [r1, #8]
 8002b5c:	f1b8 0f00 	cmp.w	r8, #0
 8002b60:	dde9      	ble.n	8002b36 <__sflush_r+0xae>
 8002b62:	6a21      	ldr	r1, [r4, #32]
 8002b64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002b66:	4643      	mov	r3, r8
 8002b68:	463a      	mov	r2, r7
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	47b0      	blx	r6
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	dc08      	bgt.n	8002b84 <__sflush_r+0xfc>
 8002b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b7a:	81a3      	strh	r3, [r4, #12]
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b84:	4407      	add	r7, r0
 8002b86:	eba8 0800 	sub.w	r8, r8, r0
 8002b8a:	e7e7      	b.n	8002b5c <__sflush_r+0xd4>
 8002b8c:	dfbffffe 	.word	0xdfbffffe

08002b90 <_fflush_r>:
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	690b      	ldr	r3, [r1, #16]
 8002b94:	4605      	mov	r5, r0
 8002b96:	460c      	mov	r4, r1
 8002b98:	b913      	cbnz	r3, 8002ba0 <_fflush_r+0x10>
 8002b9a:	2500      	movs	r5, #0
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ba0:	b118      	cbz	r0, 8002baa <_fflush_r+0x1a>
 8002ba2:	6a03      	ldr	r3, [r0, #32]
 8002ba4:	b90b      	cbnz	r3, 8002baa <_fflush_r+0x1a>
 8002ba6:	f7ff fd5b 	bl	8002660 <__sinit>
 8002baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f3      	beq.n	8002b9a <_fflush_r+0xa>
 8002bb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002bb4:	07d0      	lsls	r0, r2, #31
 8002bb6:	d404      	bmi.n	8002bc2 <_fflush_r+0x32>
 8002bb8:	0599      	lsls	r1, r3, #22
 8002bba:	d402      	bmi.n	8002bc2 <_fflush_r+0x32>
 8002bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bbe:	f7ff fe42 	bl	8002846 <__retarget_lock_acquire_recursive>
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	f7ff ff5f 	bl	8002a88 <__sflush_r>
 8002bca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bcc:	07da      	lsls	r2, r3, #31
 8002bce:	4605      	mov	r5, r0
 8002bd0:	d4e4      	bmi.n	8002b9c <_fflush_r+0xc>
 8002bd2:	89a3      	ldrh	r3, [r4, #12]
 8002bd4:	059b      	lsls	r3, r3, #22
 8002bd6:	d4e1      	bmi.n	8002b9c <_fflush_r+0xc>
 8002bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bda:	f7ff fe35 	bl	8002848 <__retarget_lock_release_recursive>
 8002bde:	e7dd      	b.n	8002b9c <_fflush_r+0xc>

08002be0 <fiprintf>:
 8002be0:	b40e      	push	{r1, r2, r3}
 8002be2:	b503      	push	{r0, r1, lr}
 8002be4:	4601      	mov	r1, r0
 8002be6:	ab03      	add	r3, sp, #12
 8002be8:	4805      	ldr	r0, [pc, #20]	@ (8002c00 <fiprintf+0x20>)
 8002bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bee:	6800      	ldr	r0, [r0, #0]
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	f000 f847 	bl	8002c84 <_vfiprintf_r>
 8002bf6:	b002      	add	sp, #8
 8002bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bfc:	b003      	add	sp, #12
 8002bfe:	4770      	bx	lr
 8002c00:	2000001c 	.word	0x2000001c

08002c04 <_sbrk_r>:
 8002c04:	b538      	push	{r3, r4, r5, lr}
 8002c06:	4d06      	ldr	r5, [pc, #24]	@ (8002c20 <_sbrk_r+0x1c>)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	602b      	str	r3, [r5, #0]
 8002c10:	f7fd ffa4 	bl	8000b5c <_sbrk>
 8002c14:	1c43      	adds	r3, r0, #1
 8002c16:	d102      	bne.n	8002c1e <_sbrk_r+0x1a>
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	b103      	cbz	r3, 8002c1e <_sbrk_r+0x1a>
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	bd38      	pop	{r3, r4, r5, pc}
 8002c20:	20000264 	.word	0x20000264

08002c24 <abort>:
 8002c24:	b508      	push	{r3, lr}
 8002c26:	2006      	movs	r0, #6
 8002c28:	f000 fb8e 	bl	8003348 <raise>
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f7fd ff1c 	bl	8000a6a <_exit>

08002c32 <__sfputc_r>:
 8002c32:	6893      	ldr	r3, [r2, #8]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	b410      	push	{r4}
 8002c3a:	6093      	str	r3, [r2, #8]
 8002c3c:	da08      	bge.n	8002c50 <__sfputc_r+0x1e>
 8002c3e:	6994      	ldr	r4, [r2, #24]
 8002c40:	42a3      	cmp	r3, r4
 8002c42:	db01      	blt.n	8002c48 <__sfputc_r+0x16>
 8002c44:	290a      	cmp	r1, #10
 8002c46:	d103      	bne.n	8002c50 <__sfputc_r+0x1e>
 8002c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c4c:	f000 bac0 	b.w	80031d0 <__swbuf_r>
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	1c58      	adds	r0, r3, #1
 8002c54:	6010      	str	r0, [r2, #0]
 8002c56:	7019      	strb	r1, [r3, #0]
 8002c58:	4608      	mov	r0, r1
 8002c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <__sfputs_r>:
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c62:	4606      	mov	r6, r0
 8002c64:	460f      	mov	r7, r1
 8002c66:	4614      	mov	r4, r2
 8002c68:	18d5      	adds	r5, r2, r3
 8002c6a:	42ac      	cmp	r4, r5
 8002c6c:	d101      	bne.n	8002c72 <__sfputs_r+0x12>
 8002c6e:	2000      	movs	r0, #0
 8002c70:	e007      	b.n	8002c82 <__sfputs_r+0x22>
 8002c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c76:	463a      	mov	r2, r7
 8002c78:	4630      	mov	r0, r6
 8002c7a:	f7ff ffda 	bl	8002c32 <__sfputc_r>
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	d1f3      	bne.n	8002c6a <__sfputs_r+0xa>
 8002c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c84 <_vfiprintf_r>:
 8002c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c88:	460d      	mov	r5, r1
 8002c8a:	b09d      	sub	sp, #116	@ 0x74
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	4698      	mov	r8, r3
 8002c90:	4606      	mov	r6, r0
 8002c92:	b118      	cbz	r0, 8002c9c <_vfiprintf_r+0x18>
 8002c94:	6a03      	ldr	r3, [r0, #32]
 8002c96:	b90b      	cbnz	r3, 8002c9c <_vfiprintf_r+0x18>
 8002c98:	f7ff fce2 	bl	8002660 <__sinit>
 8002c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c9e:	07d9      	lsls	r1, r3, #31
 8002ca0:	d405      	bmi.n	8002cae <_vfiprintf_r+0x2a>
 8002ca2:	89ab      	ldrh	r3, [r5, #12]
 8002ca4:	059a      	lsls	r2, r3, #22
 8002ca6:	d402      	bmi.n	8002cae <_vfiprintf_r+0x2a>
 8002ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002caa:	f7ff fdcc 	bl	8002846 <__retarget_lock_acquire_recursive>
 8002cae:	89ab      	ldrh	r3, [r5, #12]
 8002cb0:	071b      	lsls	r3, r3, #28
 8002cb2:	d501      	bpl.n	8002cb8 <_vfiprintf_r+0x34>
 8002cb4:	692b      	ldr	r3, [r5, #16]
 8002cb6:	b99b      	cbnz	r3, 8002ce0 <_vfiprintf_r+0x5c>
 8002cb8:	4629      	mov	r1, r5
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f000 fac6 	bl	800324c <__swsetup_r>
 8002cc0:	b170      	cbz	r0, 8002ce0 <_vfiprintf_r+0x5c>
 8002cc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002cc4:	07dc      	lsls	r4, r3, #31
 8002cc6:	d504      	bpl.n	8002cd2 <_vfiprintf_r+0x4e>
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	b01d      	add	sp, #116	@ 0x74
 8002cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cd2:	89ab      	ldrh	r3, [r5, #12]
 8002cd4:	0598      	lsls	r0, r3, #22
 8002cd6:	d4f7      	bmi.n	8002cc8 <_vfiprintf_r+0x44>
 8002cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cda:	f7ff fdb5 	bl	8002848 <__retarget_lock_release_recursive>
 8002cde:	e7f3      	b.n	8002cc8 <_vfiprintf_r+0x44>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cee:	2330      	movs	r3, #48	@ 0x30
 8002cf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002ea0 <_vfiprintf_r+0x21c>
 8002cf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002cf8:	f04f 0901 	mov.w	r9, #1
 8002cfc:	4623      	mov	r3, r4
 8002cfe:	469a      	mov	sl, r3
 8002d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d04:	b10a      	cbz	r2, 8002d0a <_vfiprintf_r+0x86>
 8002d06:	2a25      	cmp	r2, #37	@ 0x25
 8002d08:	d1f9      	bne.n	8002cfe <_vfiprintf_r+0x7a>
 8002d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8002d0e:	d00b      	beq.n	8002d28 <_vfiprintf_r+0xa4>
 8002d10:	465b      	mov	r3, fp
 8002d12:	4622      	mov	r2, r4
 8002d14:	4629      	mov	r1, r5
 8002d16:	4630      	mov	r0, r6
 8002d18:	f7ff ffa2 	bl	8002c60 <__sfputs_r>
 8002d1c:	3001      	adds	r0, #1
 8002d1e:	f000 80a7 	beq.w	8002e70 <_vfiprintf_r+0x1ec>
 8002d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d24:	445a      	add	r2, fp
 8002d26:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d28:	f89a 3000 	ldrb.w	r3, [sl]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 809f 	beq.w	8002e70 <_vfiprintf_r+0x1ec>
 8002d32:	2300      	movs	r3, #0
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295
 8002d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d3c:	f10a 0a01 	add.w	sl, sl, #1
 8002d40:	9304      	str	r3, [sp, #16]
 8002d42:	9307      	str	r3, [sp, #28]
 8002d44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d48:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d4a:	4654      	mov	r4, sl
 8002d4c:	2205      	movs	r2, #5
 8002d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d52:	4853      	ldr	r0, [pc, #332]	@ (8002ea0 <_vfiprintf_r+0x21c>)
 8002d54:	f7fd fa54 	bl	8000200 <memchr>
 8002d58:	9a04      	ldr	r2, [sp, #16]
 8002d5a:	b9d8      	cbnz	r0, 8002d94 <_vfiprintf_r+0x110>
 8002d5c:	06d1      	lsls	r1, r2, #27
 8002d5e:	bf44      	itt	mi
 8002d60:	2320      	movmi	r3, #32
 8002d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d66:	0713      	lsls	r3, r2, #28
 8002d68:	bf44      	itt	mi
 8002d6a:	232b      	movmi	r3, #43	@ 0x2b
 8002d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d70:	f89a 3000 	ldrb.w	r3, [sl]
 8002d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d76:	d015      	beq.n	8002da4 <_vfiprintf_r+0x120>
 8002d78:	9a07      	ldr	r2, [sp, #28]
 8002d7a:	4654      	mov	r4, sl
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f04f 0c0a 	mov.w	ip, #10
 8002d82:	4621      	mov	r1, r4
 8002d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d88:	3b30      	subs	r3, #48	@ 0x30
 8002d8a:	2b09      	cmp	r3, #9
 8002d8c:	d94b      	bls.n	8002e26 <_vfiprintf_r+0x1a2>
 8002d8e:	b1b0      	cbz	r0, 8002dbe <_vfiprintf_r+0x13a>
 8002d90:	9207      	str	r2, [sp, #28]
 8002d92:	e014      	b.n	8002dbe <_vfiprintf_r+0x13a>
 8002d94:	eba0 0308 	sub.w	r3, r0, r8
 8002d98:	fa09 f303 	lsl.w	r3, r9, r3
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	9304      	str	r3, [sp, #16]
 8002da0:	46a2      	mov	sl, r4
 8002da2:	e7d2      	b.n	8002d4a <_vfiprintf_r+0xc6>
 8002da4:	9b03      	ldr	r3, [sp, #12]
 8002da6:	1d19      	adds	r1, r3, #4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	9103      	str	r1, [sp, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bfbb      	ittet	lt
 8002db0:	425b      	neglt	r3, r3
 8002db2:	f042 0202 	orrlt.w	r2, r2, #2
 8002db6:	9307      	strge	r3, [sp, #28]
 8002db8:	9307      	strlt	r3, [sp, #28]
 8002dba:	bfb8      	it	lt
 8002dbc:	9204      	strlt	r2, [sp, #16]
 8002dbe:	7823      	ldrb	r3, [r4, #0]
 8002dc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8002dc2:	d10a      	bne.n	8002dda <_vfiprintf_r+0x156>
 8002dc4:	7863      	ldrb	r3, [r4, #1]
 8002dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dc8:	d132      	bne.n	8002e30 <_vfiprintf_r+0x1ac>
 8002dca:	9b03      	ldr	r3, [sp, #12]
 8002dcc:	1d1a      	adds	r2, r3, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	9203      	str	r2, [sp, #12]
 8002dd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002dd6:	3402      	adds	r4, #2
 8002dd8:	9305      	str	r3, [sp, #20]
 8002dda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002eb0 <_vfiprintf_r+0x22c>
 8002dde:	7821      	ldrb	r1, [r4, #0]
 8002de0:	2203      	movs	r2, #3
 8002de2:	4650      	mov	r0, sl
 8002de4:	f7fd fa0c 	bl	8000200 <memchr>
 8002de8:	b138      	cbz	r0, 8002dfa <_vfiprintf_r+0x176>
 8002dea:	9b04      	ldr	r3, [sp, #16]
 8002dec:	eba0 000a 	sub.w	r0, r0, sl
 8002df0:	2240      	movs	r2, #64	@ 0x40
 8002df2:	4082      	lsls	r2, r0
 8002df4:	4313      	orrs	r3, r2
 8002df6:	3401      	adds	r4, #1
 8002df8:	9304      	str	r3, [sp, #16]
 8002dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dfe:	4829      	ldr	r0, [pc, #164]	@ (8002ea4 <_vfiprintf_r+0x220>)
 8002e00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e04:	2206      	movs	r2, #6
 8002e06:	f7fd f9fb 	bl	8000200 <memchr>
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	d03f      	beq.n	8002e8e <_vfiprintf_r+0x20a>
 8002e0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <_vfiprintf_r+0x224>)
 8002e10:	bb1b      	cbnz	r3, 8002e5a <_vfiprintf_r+0x1d6>
 8002e12:	9b03      	ldr	r3, [sp, #12]
 8002e14:	3307      	adds	r3, #7
 8002e16:	f023 0307 	bic.w	r3, r3, #7
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	9303      	str	r3, [sp, #12]
 8002e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e20:	443b      	add	r3, r7
 8002e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e24:	e76a      	b.n	8002cfc <_vfiprintf_r+0x78>
 8002e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	e7a8      	b.n	8002d82 <_vfiprintf_r+0xfe>
 8002e30:	2300      	movs	r3, #0
 8002e32:	3401      	adds	r4, #1
 8002e34:	9305      	str	r3, [sp, #20]
 8002e36:	4619      	mov	r1, r3
 8002e38:	f04f 0c0a 	mov.w	ip, #10
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e42:	3a30      	subs	r2, #48	@ 0x30
 8002e44:	2a09      	cmp	r2, #9
 8002e46:	d903      	bls.n	8002e50 <_vfiprintf_r+0x1cc>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0c6      	beq.n	8002dda <_vfiprintf_r+0x156>
 8002e4c:	9105      	str	r1, [sp, #20]
 8002e4e:	e7c4      	b.n	8002dda <_vfiprintf_r+0x156>
 8002e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e54:	4604      	mov	r4, r0
 8002e56:	2301      	movs	r3, #1
 8002e58:	e7f0      	b.n	8002e3c <_vfiprintf_r+0x1b8>
 8002e5a:	ab03      	add	r3, sp, #12
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	462a      	mov	r2, r5
 8002e60:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <_vfiprintf_r+0x228>)
 8002e62:	a904      	add	r1, sp, #16
 8002e64:	4630      	mov	r0, r6
 8002e66:	f3af 8000 	nop.w
 8002e6a:	4607      	mov	r7, r0
 8002e6c:	1c78      	adds	r0, r7, #1
 8002e6e:	d1d6      	bne.n	8002e1e <_vfiprintf_r+0x19a>
 8002e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e72:	07d9      	lsls	r1, r3, #31
 8002e74:	d405      	bmi.n	8002e82 <_vfiprintf_r+0x1fe>
 8002e76:	89ab      	ldrh	r3, [r5, #12]
 8002e78:	059a      	lsls	r2, r3, #22
 8002e7a:	d402      	bmi.n	8002e82 <_vfiprintf_r+0x1fe>
 8002e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e7e:	f7ff fce3 	bl	8002848 <__retarget_lock_release_recursive>
 8002e82:	89ab      	ldrh	r3, [r5, #12]
 8002e84:	065b      	lsls	r3, r3, #25
 8002e86:	f53f af1f 	bmi.w	8002cc8 <_vfiprintf_r+0x44>
 8002e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e8c:	e71e      	b.n	8002ccc <_vfiprintf_r+0x48>
 8002e8e:	ab03      	add	r3, sp, #12
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	462a      	mov	r2, r5
 8002e94:	4b05      	ldr	r3, [pc, #20]	@ (8002eac <_vfiprintf_r+0x228>)
 8002e96:	a904      	add	r1, sp, #16
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f000 f879 	bl	8002f90 <_printf_i>
 8002e9e:	e7e4      	b.n	8002e6a <_vfiprintf_r+0x1e6>
 8002ea0:	0800358b 	.word	0x0800358b
 8002ea4:	08003595 	.word	0x08003595
 8002ea8:	00000000 	.word	0x00000000
 8002eac:	08002c61 	.word	0x08002c61
 8002eb0:	08003591 	.word	0x08003591

08002eb4 <_printf_common>:
 8002eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb8:	4616      	mov	r6, r2
 8002eba:	4698      	mov	r8, r3
 8002ebc:	688a      	ldr	r2, [r1, #8]
 8002ebe:	690b      	ldr	r3, [r1, #16]
 8002ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	bfb8      	it	lt
 8002ec8:	4613      	movlt	r3, r2
 8002eca:	6033      	str	r3, [r6, #0]
 8002ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002ed0:	4607      	mov	r7, r0
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	b10a      	cbz	r2, 8002eda <_printf_common+0x26>
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	6033      	str	r3, [r6, #0]
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	0699      	lsls	r1, r3, #26
 8002ede:	bf42      	ittt	mi
 8002ee0:	6833      	ldrmi	r3, [r6, #0]
 8002ee2:	3302      	addmi	r3, #2
 8002ee4:	6033      	strmi	r3, [r6, #0]
 8002ee6:	6825      	ldr	r5, [r4, #0]
 8002ee8:	f015 0506 	ands.w	r5, r5, #6
 8002eec:	d106      	bne.n	8002efc <_printf_common+0x48>
 8002eee:	f104 0a19 	add.w	sl, r4, #25
 8002ef2:	68e3      	ldr	r3, [r4, #12]
 8002ef4:	6832      	ldr	r2, [r6, #0]
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	42ab      	cmp	r3, r5
 8002efa:	dc26      	bgt.n	8002f4a <_printf_common+0x96>
 8002efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f00:	6822      	ldr	r2, [r4, #0]
 8002f02:	3b00      	subs	r3, #0
 8002f04:	bf18      	it	ne
 8002f06:	2301      	movne	r3, #1
 8002f08:	0692      	lsls	r2, r2, #26
 8002f0a:	d42b      	bmi.n	8002f64 <_printf_common+0xb0>
 8002f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f10:	4641      	mov	r1, r8
 8002f12:	4638      	mov	r0, r7
 8002f14:	47c8      	blx	r9
 8002f16:	3001      	adds	r0, #1
 8002f18:	d01e      	beq.n	8002f58 <_printf_common+0xa4>
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	6922      	ldr	r2, [r4, #16]
 8002f1e:	f003 0306 	and.w	r3, r3, #6
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	bf02      	ittt	eq
 8002f26:	68e5      	ldreq	r5, [r4, #12]
 8002f28:	6833      	ldreq	r3, [r6, #0]
 8002f2a:	1aed      	subeq	r5, r5, r3
 8002f2c:	68a3      	ldr	r3, [r4, #8]
 8002f2e:	bf0c      	ite	eq
 8002f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f34:	2500      	movne	r5, #0
 8002f36:	4293      	cmp	r3, r2
 8002f38:	bfc4      	itt	gt
 8002f3a:	1a9b      	subgt	r3, r3, r2
 8002f3c:	18ed      	addgt	r5, r5, r3
 8002f3e:	2600      	movs	r6, #0
 8002f40:	341a      	adds	r4, #26
 8002f42:	42b5      	cmp	r5, r6
 8002f44:	d11a      	bne.n	8002f7c <_printf_common+0xc8>
 8002f46:	2000      	movs	r0, #0
 8002f48:	e008      	b.n	8002f5c <_printf_common+0xa8>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	4652      	mov	r2, sl
 8002f4e:	4641      	mov	r1, r8
 8002f50:	4638      	mov	r0, r7
 8002f52:	47c8      	blx	r9
 8002f54:	3001      	adds	r0, #1
 8002f56:	d103      	bne.n	8002f60 <_printf_common+0xac>
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f60:	3501      	adds	r5, #1
 8002f62:	e7c6      	b.n	8002ef2 <_printf_common+0x3e>
 8002f64:	18e1      	adds	r1, r4, r3
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	2030      	movs	r0, #48	@ 0x30
 8002f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f6e:	4422      	add	r2, r4
 8002f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f78:	3302      	adds	r3, #2
 8002f7a:	e7c7      	b.n	8002f0c <_printf_common+0x58>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	4622      	mov	r2, r4
 8002f80:	4641      	mov	r1, r8
 8002f82:	4638      	mov	r0, r7
 8002f84:	47c8      	blx	r9
 8002f86:	3001      	adds	r0, #1
 8002f88:	d0e6      	beq.n	8002f58 <_printf_common+0xa4>
 8002f8a:	3601      	adds	r6, #1
 8002f8c:	e7d9      	b.n	8002f42 <_printf_common+0x8e>
	...

08002f90 <_printf_i>:
 8002f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f94:	7e0f      	ldrb	r7, [r1, #24]
 8002f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f98:	2f78      	cmp	r7, #120	@ 0x78
 8002f9a:	4691      	mov	r9, r2
 8002f9c:	4680      	mov	r8, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	469a      	mov	sl, r3
 8002fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002fa6:	d807      	bhi.n	8002fb8 <_printf_i+0x28>
 8002fa8:	2f62      	cmp	r7, #98	@ 0x62
 8002faa:	d80a      	bhi.n	8002fc2 <_printf_i+0x32>
 8002fac:	2f00      	cmp	r7, #0
 8002fae:	f000 80d2 	beq.w	8003156 <_printf_i+0x1c6>
 8002fb2:	2f58      	cmp	r7, #88	@ 0x58
 8002fb4:	f000 80b9 	beq.w	800312a <_printf_i+0x19a>
 8002fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002fc0:	e03a      	b.n	8003038 <_printf_i+0xa8>
 8002fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002fc6:	2b15      	cmp	r3, #21
 8002fc8:	d8f6      	bhi.n	8002fb8 <_printf_i+0x28>
 8002fca:	a101      	add	r1, pc, #4	@ (adr r1, 8002fd0 <_printf_i+0x40>)
 8002fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fd0:	08003029 	.word	0x08003029
 8002fd4:	0800303d 	.word	0x0800303d
 8002fd8:	08002fb9 	.word	0x08002fb9
 8002fdc:	08002fb9 	.word	0x08002fb9
 8002fe0:	08002fb9 	.word	0x08002fb9
 8002fe4:	08002fb9 	.word	0x08002fb9
 8002fe8:	0800303d 	.word	0x0800303d
 8002fec:	08002fb9 	.word	0x08002fb9
 8002ff0:	08002fb9 	.word	0x08002fb9
 8002ff4:	08002fb9 	.word	0x08002fb9
 8002ff8:	08002fb9 	.word	0x08002fb9
 8002ffc:	0800313d 	.word	0x0800313d
 8003000:	08003067 	.word	0x08003067
 8003004:	080030f7 	.word	0x080030f7
 8003008:	08002fb9 	.word	0x08002fb9
 800300c:	08002fb9 	.word	0x08002fb9
 8003010:	0800315f 	.word	0x0800315f
 8003014:	08002fb9 	.word	0x08002fb9
 8003018:	08003067 	.word	0x08003067
 800301c:	08002fb9 	.word	0x08002fb9
 8003020:	08002fb9 	.word	0x08002fb9
 8003024:	080030ff 	.word	0x080030ff
 8003028:	6833      	ldr	r3, [r6, #0]
 800302a:	1d1a      	adds	r2, r3, #4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6032      	str	r2, [r6, #0]
 8003030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003038:	2301      	movs	r3, #1
 800303a:	e09d      	b.n	8003178 <_printf_i+0x1e8>
 800303c:	6833      	ldr	r3, [r6, #0]
 800303e:	6820      	ldr	r0, [r4, #0]
 8003040:	1d19      	adds	r1, r3, #4
 8003042:	6031      	str	r1, [r6, #0]
 8003044:	0606      	lsls	r6, r0, #24
 8003046:	d501      	bpl.n	800304c <_printf_i+0xbc>
 8003048:	681d      	ldr	r5, [r3, #0]
 800304a:	e003      	b.n	8003054 <_printf_i+0xc4>
 800304c:	0645      	lsls	r5, r0, #25
 800304e:	d5fb      	bpl.n	8003048 <_printf_i+0xb8>
 8003050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003054:	2d00      	cmp	r5, #0
 8003056:	da03      	bge.n	8003060 <_printf_i+0xd0>
 8003058:	232d      	movs	r3, #45	@ 0x2d
 800305a:	426d      	negs	r5, r5
 800305c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003060:	4859      	ldr	r0, [pc, #356]	@ (80031c8 <_printf_i+0x238>)
 8003062:	230a      	movs	r3, #10
 8003064:	e011      	b.n	800308a <_printf_i+0xfa>
 8003066:	6821      	ldr	r1, [r4, #0]
 8003068:	6833      	ldr	r3, [r6, #0]
 800306a:	0608      	lsls	r0, r1, #24
 800306c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003070:	d402      	bmi.n	8003078 <_printf_i+0xe8>
 8003072:	0649      	lsls	r1, r1, #25
 8003074:	bf48      	it	mi
 8003076:	b2ad      	uxthmi	r5, r5
 8003078:	2f6f      	cmp	r7, #111	@ 0x6f
 800307a:	4853      	ldr	r0, [pc, #332]	@ (80031c8 <_printf_i+0x238>)
 800307c:	6033      	str	r3, [r6, #0]
 800307e:	bf14      	ite	ne
 8003080:	230a      	movne	r3, #10
 8003082:	2308      	moveq	r3, #8
 8003084:	2100      	movs	r1, #0
 8003086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800308a:	6866      	ldr	r6, [r4, #4]
 800308c:	60a6      	str	r6, [r4, #8]
 800308e:	2e00      	cmp	r6, #0
 8003090:	bfa2      	ittt	ge
 8003092:	6821      	ldrge	r1, [r4, #0]
 8003094:	f021 0104 	bicge.w	r1, r1, #4
 8003098:	6021      	strge	r1, [r4, #0]
 800309a:	b90d      	cbnz	r5, 80030a0 <_printf_i+0x110>
 800309c:	2e00      	cmp	r6, #0
 800309e:	d04b      	beq.n	8003138 <_printf_i+0x1a8>
 80030a0:	4616      	mov	r6, r2
 80030a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80030a6:	fb03 5711 	mls	r7, r3, r1, r5
 80030aa:	5dc7      	ldrb	r7, [r0, r7]
 80030ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030b0:	462f      	mov	r7, r5
 80030b2:	42bb      	cmp	r3, r7
 80030b4:	460d      	mov	r5, r1
 80030b6:	d9f4      	bls.n	80030a2 <_printf_i+0x112>
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d10b      	bne.n	80030d4 <_printf_i+0x144>
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	07df      	lsls	r7, r3, #31
 80030c0:	d508      	bpl.n	80030d4 <_printf_i+0x144>
 80030c2:	6923      	ldr	r3, [r4, #16]
 80030c4:	6861      	ldr	r1, [r4, #4]
 80030c6:	4299      	cmp	r1, r3
 80030c8:	bfde      	ittt	le
 80030ca:	2330      	movle	r3, #48	@ 0x30
 80030cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030d4:	1b92      	subs	r2, r2, r6
 80030d6:	6122      	str	r2, [r4, #16]
 80030d8:	f8cd a000 	str.w	sl, [sp]
 80030dc:	464b      	mov	r3, r9
 80030de:	aa03      	add	r2, sp, #12
 80030e0:	4621      	mov	r1, r4
 80030e2:	4640      	mov	r0, r8
 80030e4:	f7ff fee6 	bl	8002eb4 <_printf_common>
 80030e8:	3001      	adds	r0, #1
 80030ea:	d14a      	bne.n	8003182 <_printf_i+0x1f2>
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	b004      	add	sp, #16
 80030f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	f043 0320 	orr.w	r3, r3, #32
 80030fc:	6023      	str	r3, [r4, #0]
 80030fe:	4833      	ldr	r0, [pc, #204]	@ (80031cc <_printf_i+0x23c>)
 8003100:	2778      	movs	r7, #120	@ 0x78
 8003102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	6831      	ldr	r1, [r6, #0]
 800310a:	061f      	lsls	r7, r3, #24
 800310c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003110:	d402      	bmi.n	8003118 <_printf_i+0x188>
 8003112:	065f      	lsls	r7, r3, #25
 8003114:	bf48      	it	mi
 8003116:	b2ad      	uxthmi	r5, r5
 8003118:	6031      	str	r1, [r6, #0]
 800311a:	07d9      	lsls	r1, r3, #31
 800311c:	bf44      	itt	mi
 800311e:	f043 0320 	orrmi.w	r3, r3, #32
 8003122:	6023      	strmi	r3, [r4, #0]
 8003124:	b11d      	cbz	r5, 800312e <_printf_i+0x19e>
 8003126:	2310      	movs	r3, #16
 8003128:	e7ac      	b.n	8003084 <_printf_i+0xf4>
 800312a:	4827      	ldr	r0, [pc, #156]	@ (80031c8 <_printf_i+0x238>)
 800312c:	e7e9      	b.n	8003102 <_printf_i+0x172>
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	f023 0320 	bic.w	r3, r3, #32
 8003134:	6023      	str	r3, [r4, #0]
 8003136:	e7f6      	b.n	8003126 <_printf_i+0x196>
 8003138:	4616      	mov	r6, r2
 800313a:	e7bd      	b.n	80030b8 <_printf_i+0x128>
 800313c:	6833      	ldr	r3, [r6, #0]
 800313e:	6825      	ldr	r5, [r4, #0]
 8003140:	6961      	ldr	r1, [r4, #20]
 8003142:	1d18      	adds	r0, r3, #4
 8003144:	6030      	str	r0, [r6, #0]
 8003146:	062e      	lsls	r6, r5, #24
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	d501      	bpl.n	8003150 <_printf_i+0x1c0>
 800314c:	6019      	str	r1, [r3, #0]
 800314e:	e002      	b.n	8003156 <_printf_i+0x1c6>
 8003150:	0668      	lsls	r0, r5, #25
 8003152:	d5fb      	bpl.n	800314c <_printf_i+0x1bc>
 8003154:	8019      	strh	r1, [r3, #0]
 8003156:	2300      	movs	r3, #0
 8003158:	6123      	str	r3, [r4, #16]
 800315a:	4616      	mov	r6, r2
 800315c:	e7bc      	b.n	80030d8 <_printf_i+0x148>
 800315e:	6833      	ldr	r3, [r6, #0]
 8003160:	1d1a      	adds	r2, r3, #4
 8003162:	6032      	str	r2, [r6, #0]
 8003164:	681e      	ldr	r6, [r3, #0]
 8003166:	6862      	ldr	r2, [r4, #4]
 8003168:	2100      	movs	r1, #0
 800316a:	4630      	mov	r0, r6
 800316c:	f7fd f848 	bl	8000200 <memchr>
 8003170:	b108      	cbz	r0, 8003176 <_printf_i+0x1e6>
 8003172:	1b80      	subs	r0, r0, r6
 8003174:	6060      	str	r0, [r4, #4]
 8003176:	6863      	ldr	r3, [r4, #4]
 8003178:	6123      	str	r3, [r4, #16]
 800317a:	2300      	movs	r3, #0
 800317c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003180:	e7aa      	b.n	80030d8 <_printf_i+0x148>
 8003182:	6923      	ldr	r3, [r4, #16]
 8003184:	4632      	mov	r2, r6
 8003186:	4649      	mov	r1, r9
 8003188:	4640      	mov	r0, r8
 800318a:	47d0      	blx	sl
 800318c:	3001      	adds	r0, #1
 800318e:	d0ad      	beq.n	80030ec <_printf_i+0x15c>
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	079b      	lsls	r3, r3, #30
 8003194:	d413      	bmi.n	80031be <_printf_i+0x22e>
 8003196:	68e0      	ldr	r0, [r4, #12]
 8003198:	9b03      	ldr	r3, [sp, #12]
 800319a:	4298      	cmp	r0, r3
 800319c:	bfb8      	it	lt
 800319e:	4618      	movlt	r0, r3
 80031a0:	e7a6      	b.n	80030f0 <_printf_i+0x160>
 80031a2:	2301      	movs	r3, #1
 80031a4:	4632      	mov	r2, r6
 80031a6:	4649      	mov	r1, r9
 80031a8:	4640      	mov	r0, r8
 80031aa:	47d0      	blx	sl
 80031ac:	3001      	adds	r0, #1
 80031ae:	d09d      	beq.n	80030ec <_printf_i+0x15c>
 80031b0:	3501      	adds	r5, #1
 80031b2:	68e3      	ldr	r3, [r4, #12]
 80031b4:	9903      	ldr	r1, [sp, #12]
 80031b6:	1a5b      	subs	r3, r3, r1
 80031b8:	42ab      	cmp	r3, r5
 80031ba:	dcf2      	bgt.n	80031a2 <_printf_i+0x212>
 80031bc:	e7eb      	b.n	8003196 <_printf_i+0x206>
 80031be:	2500      	movs	r5, #0
 80031c0:	f104 0619 	add.w	r6, r4, #25
 80031c4:	e7f5      	b.n	80031b2 <_printf_i+0x222>
 80031c6:	bf00      	nop
 80031c8:	0800359c 	.word	0x0800359c
 80031cc:	080035ad 	.word	0x080035ad

080031d0 <__swbuf_r>:
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d2:	460e      	mov	r6, r1
 80031d4:	4614      	mov	r4, r2
 80031d6:	4605      	mov	r5, r0
 80031d8:	b118      	cbz	r0, 80031e2 <__swbuf_r+0x12>
 80031da:	6a03      	ldr	r3, [r0, #32]
 80031dc:	b90b      	cbnz	r3, 80031e2 <__swbuf_r+0x12>
 80031de:	f7ff fa3f 	bl	8002660 <__sinit>
 80031e2:	69a3      	ldr	r3, [r4, #24]
 80031e4:	60a3      	str	r3, [r4, #8]
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	071a      	lsls	r2, r3, #28
 80031ea:	d501      	bpl.n	80031f0 <__swbuf_r+0x20>
 80031ec:	6923      	ldr	r3, [r4, #16]
 80031ee:	b943      	cbnz	r3, 8003202 <__swbuf_r+0x32>
 80031f0:	4621      	mov	r1, r4
 80031f2:	4628      	mov	r0, r5
 80031f4:	f000 f82a 	bl	800324c <__swsetup_r>
 80031f8:	b118      	cbz	r0, 8003202 <__swbuf_r+0x32>
 80031fa:	f04f 37ff 	mov.w	r7, #4294967295
 80031fe:	4638      	mov	r0, r7
 8003200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	6922      	ldr	r2, [r4, #16]
 8003206:	1a98      	subs	r0, r3, r2
 8003208:	6963      	ldr	r3, [r4, #20]
 800320a:	b2f6      	uxtb	r6, r6
 800320c:	4283      	cmp	r3, r0
 800320e:	4637      	mov	r7, r6
 8003210:	dc05      	bgt.n	800321e <__swbuf_r+0x4e>
 8003212:	4621      	mov	r1, r4
 8003214:	4628      	mov	r0, r5
 8003216:	f7ff fcbb 	bl	8002b90 <_fflush_r>
 800321a:	2800      	cmp	r0, #0
 800321c:	d1ed      	bne.n	80031fa <__swbuf_r+0x2a>
 800321e:	68a3      	ldr	r3, [r4, #8]
 8003220:	3b01      	subs	r3, #1
 8003222:	60a3      	str	r3, [r4, #8]
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	6022      	str	r2, [r4, #0]
 800322a:	701e      	strb	r6, [r3, #0]
 800322c:	6962      	ldr	r2, [r4, #20]
 800322e:	1c43      	adds	r3, r0, #1
 8003230:	429a      	cmp	r2, r3
 8003232:	d004      	beq.n	800323e <__swbuf_r+0x6e>
 8003234:	89a3      	ldrh	r3, [r4, #12]
 8003236:	07db      	lsls	r3, r3, #31
 8003238:	d5e1      	bpl.n	80031fe <__swbuf_r+0x2e>
 800323a:	2e0a      	cmp	r6, #10
 800323c:	d1df      	bne.n	80031fe <__swbuf_r+0x2e>
 800323e:	4621      	mov	r1, r4
 8003240:	4628      	mov	r0, r5
 8003242:	f7ff fca5 	bl	8002b90 <_fflush_r>
 8003246:	2800      	cmp	r0, #0
 8003248:	d0d9      	beq.n	80031fe <__swbuf_r+0x2e>
 800324a:	e7d6      	b.n	80031fa <__swbuf_r+0x2a>

0800324c <__swsetup_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4b29      	ldr	r3, [pc, #164]	@ (80032f4 <__swsetup_r+0xa8>)
 8003250:	4605      	mov	r5, r0
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	460c      	mov	r4, r1
 8003256:	b118      	cbz	r0, 8003260 <__swsetup_r+0x14>
 8003258:	6a03      	ldr	r3, [r0, #32]
 800325a:	b90b      	cbnz	r3, 8003260 <__swsetup_r+0x14>
 800325c:	f7ff fa00 	bl	8002660 <__sinit>
 8003260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003264:	0719      	lsls	r1, r3, #28
 8003266:	d422      	bmi.n	80032ae <__swsetup_r+0x62>
 8003268:	06da      	lsls	r2, r3, #27
 800326a:	d407      	bmi.n	800327c <__swsetup_r+0x30>
 800326c:	2209      	movs	r2, #9
 800326e:	602a      	str	r2, [r5, #0]
 8003270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003274:	81a3      	strh	r3, [r4, #12]
 8003276:	f04f 30ff 	mov.w	r0, #4294967295
 800327a:	e033      	b.n	80032e4 <__swsetup_r+0x98>
 800327c:	0758      	lsls	r0, r3, #29
 800327e:	d512      	bpl.n	80032a6 <__swsetup_r+0x5a>
 8003280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003282:	b141      	cbz	r1, 8003296 <__swsetup_r+0x4a>
 8003284:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003288:	4299      	cmp	r1, r3
 800328a:	d002      	beq.n	8003292 <__swsetup_r+0x46>
 800328c:	4628      	mov	r0, r5
 800328e:	f7ff fafb 	bl	8002888 <_free_r>
 8003292:	2300      	movs	r3, #0
 8003294:	6363      	str	r3, [r4, #52]	@ 0x34
 8003296:	89a3      	ldrh	r3, [r4, #12]
 8003298:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800329c:	81a3      	strh	r3, [r4, #12]
 800329e:	2300      	movs	r3, #0
 80032a0:	6063      	str	r3, [r4, #4]
 80032a2:	6923      	ldr	r3, [r4, #16]
 80032a4:	6023      	str	r3, [r4, #0]
 80032a6:	89a3      	ldrh	r3, [r4, #12]
 80032a8:	f043 0308 	orr.w	r3, r3, #8
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	6923      	ldr	r3, [r4, #16]
 80032b0:	b94b      	cbnz	r3, 80032c6 <__swsetup_r+0x7a>
 80032b2:	89a3      	ldrh	r3, [r4, #12]
 80032b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80032b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032bc:	d003      	beq.n	80032c6 <__swsetup_r+0x7a>
 80032be:	4621      	mov	r1, r4
 80032c0:	4628      	mov	r0, r5
 80032c2:	f000 f883 	bl	80033cc <__smakebuf_r>
 80032c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ca:	f013 0201 	ands.w	r2, r3, #1
 80032ce:	d00a      	beq.n	80032e6 <__swsetup_r+0x9a>
 80032d0:	2200      	movs	r2, #0
 80032d2:	60a2      	str	r2, [r4, #8]
 80032d4:	6962      	ldr	r2, [r4, #20]
 80032d6:	4252      	negs	r2, r2
 80032d8:	61a2      	str	r2, [r4, #24]
 80032da:	6922      	ldr	r2, [r4, #16]
 80032dc:	b942      	cbnz	r2, 80032f0 <__swsetup_r+0xa4>
 80032de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80032e2:	d1c5      	bne.n	8003270 <__swsetup_r+0x24>
 80032e4:	bd38      	pop	{r3, r4, r5, pc}
 80032e6:	0799      	lsls	r1, r3, #30
 80032e8:	bf58      	it	pl
 80032ea:	6962      	ldrpl	r2, [r4, #20]
 80032ec:	60a2      	str	r2, [r4, #8]
 80032ee:	e7f4      	b.n	80032da <__swsetup_r+0x8e>
 80032f0:	2000      	movs	r0, #0
 80032f2:	e7f7      	b.n	80032e4 <__swsetup_r+0x98>
 80032f4:	2000001c 	.word	0x2000001c

080032f8 <_raise_r>:
 80032f8:	291f      	cmp	r1, #31
 80032fa:	b538      	push	{r3, r4, r5, lr}
 80032fc:	4605      	mov	r5, r0
 80032fe:	460c      	mov	r4, r1
 8003300:	d904      	bls.n	800330c <_raise_r+0x14>
 8003302:	2316      	movs	r3, #22
 8003304:	6003      	str	r3, [r0, #0]
 8003306:	f04f 30ff 	mov.w	r0, #4294967295
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800330e:	b112      	cbz	r2, 8003316 <_raise_r+0x1e>
 8003310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003314:	b94b      	cbnz	r3, 800332a <_raise_r+0x32>
 8003316:	4628      	mov	r0, r5
 8003318:	f000 f830 	bl	800337c <_getpid_r>
 800331c:	4622      	mov	r2, r4
 800331e:	4601      	mov	r1, r0
 8003320:	4628      	mov	r0, r5
 8003322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003326:	f000 b817 	b.w	8003358 <_kill_r>
 800332a:	2b01      	cmp	r3, #1
 800332c:	d00a      	beq.n	8003344 <_raise_r+0x4c>
 800332e:	1c59      	adds	r1, r3, #1
 8003330:	d103      	bne.n	800333a <_raise_r+0x42>
 8003332:	2316      	movs	r3, #22
 8003334:	6003      	str	r3, [r0, #0]
 8003336:	2001      	movs	r0, #1
 8003338:	e7e7      	b.n	800330a <_raise_r+0x12>
 800333a:	2100      	movs	r1, #0
 800333c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003340:	4620      	mov	r0, r4
 8003342:	4798      	blx	r3
 8003344:	2000      	movs	r0, #0
 8003346:	e7e0      	b.n	800330a <_raise_r+0x12>

08003348 <raise>:
 8003348:	4b02      	ldr	r3, [pc, #8]	@ (8003354 <raise+0xc>)
 800334a:	4601      	mov	r1, r0
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	f7ff bfd3 	b.w	80032f8 <_raise_r>
 8003352:	bf00      	nop
 8003354:	2000001c 	.word	0x2000001c

08003358 <_kill_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4d07      	ldr	r5, [pc, #28]	@ (8003378 <_kill_r+0x20>)
 800335c:	2300      	movs	r3, #0
 800335e:	4604      	mov	r4, r0
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	602b      	str	r3, [r5, #0]
 8003366:	f7fd fb70 	bl	8000a4a <_kill>
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	d102      	bne.n	8003374 <_kill_r+0x1c>
 800336e:	682b      	ldr	r3, [r5, #0]
 8003370:	b103      	cbz	r3, 8003374 <_kill_r+0x1c>
 8003372:	6023      	str	r3, [r4, #0]
 8003374:	bd38      	pop	{r3, r4, r5, pc}
 8003376:	bf00      	nop
 8003378:	20000264 	.word	0x20000264

0800337c <_getpid_r>:
 800337c:	f7fd bb5d 	b.w	8000a3a <_getpid>

08003380 <__swhatbuf_r>:
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	460c      	mov	r4, r1
 8003384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003388:	2900      	cmp	r1, #0
 800338a:	b096      	sub	sp, #88	@ 0x58
 800338c:	4615      	mov	r5, r2
 800338e:	461e      	mov	r6, r3
 8003390:	da0d      	bge.n	80033ae <__swhatbuf_r+0x2e>
 8003392:	89a3      	ldrh	r3, [r4, #12]
 8003394:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	bf14      	ite	ne
 800339e:	2340      	movne	r3, #64	@ 0x40
 80033a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80033a4:	2000      	movs	r0, #0
 80033a6:	6031      	str	r1, [r6, #0]
 80033a8:	602b      	str	r3, [r5, #0]
 80033aa:	b016      	add	sp, #88	@ 0x58
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
 80033ae:	466a      	mov	r2, sp
 80033b0:	f000 f848 	bl	8003444 <_fstat_r>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	dbec      	blt.n	8003392 <__swhatbuf_r+0x12>
 80033b8:	9901      	ldr	r1, [sp, #4]
 80033ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80033be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80033c2:	4259      	negs	r1, r3
 80033c4:	4159      	adcs	r1, r3
 80033c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033ca:	e7eb      	b.n	80033a4 <__swhatbuf_r+0x24>

080033cc <__smakebuf_r>:
 80033cc:	898b      	ldrh	r3, [r1, #12]
 80033ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033d0:	079d      	lsls	r5, r3, #30
 80033d2:	4606      	mov	r6, r0
 80033d4:	460c      	mov	r4, r1
 80033d6:	d507      	bpl.n	80033e8 <__smakebuf_r+0x1c>
 80033d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	6123      	str	r3, [r4, #16]
 80033e0:	2301      	movs	r3, #1
 80033e2:	6163      	str	r3, [r4, #20]
 80033e4:	b003      	add	sp, #12
 80033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e8:	ab01      	add	r3, sp, #4
 80033ea:	466a      	mov	r2, sp
 80033ec:	f7ff ffc8 	bl	8003380 <__swhatbuf_r>
 80033f0:	9f00      	ldr	r7, [sp, #0]
 80033f2:	4605      	mov	r5, r0
 80033f4:	4639      	mov	r1, r7
 80033f6:	4630      	mov	r0, r6
 80033f8:	f7ff faba 	bl	8002970 <_malloc_r>
 80033fc:	b948      	cbnz	r0, 8003412 <__smakebuf_r+0x46>
 80033fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003402:	059a      	lsls	r2, r3, #22
 8003404:	d4ee      	bmi.n	80033e4 <__smakebuf_r+0x18>
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	f043 0302 	orr.w	r3, r3, #2
 800340e:	81a3      	strh	r3, [r4, #12]
 8003410:	e7e2      	b.n	80033d8 <__smakebuf_r+0xc>
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	6020      	str	r0, [r4, #0]
 8003416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800341a:	81a3      	strh	r3, [r4, #12]
 800341c:	9b01      	ldr	r3, [sp, #4]
 800341e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003422:	b15b      	cbz	r3, 800343c <__smakebuf_r+0x70>
 8003424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003428:	4630      	mov	r0, r6
 800342a:	f000 f81d 	bl	8003468 <_isatty_r>
 800342e:	b128      	cbz	r0, 800343c <__smakebuf_r+0x70>
 8003430:	89a3      	ldrh	r3, [r4, #12]
 8003432:	f023 0303 	bic.w	r3, r3, #3
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	81a3      	strh	r3, [r4, #12]
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	431d      	orrs	r5, r3
 8003440:	81a5      	strh	r5, [r4, #12]
 8003442:	e7cf      	b.n	80033e4 <__smakebuf_r+0x18>

08003444 <_fstat_r>:
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	4d07      	ldr	r5, [pc, #28]	@ (8003464 <_fstat_r+0x20>)
 8003448:	2300      	movs	r3, #0
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	602b      	str	r3, [r5, #0]
 8003452:	f7fd fb5a 	bl	8000b0a <_fstat>
 8003456:	1c43      	adds	r3, r0, #1
 8003458:	d102      	bne.n	8003460 <_fstat_r+0x1c>
 800345a:	682b      	ldr	r3, [r5, #0]
 800345c:	b103      	cbz	r3, 8003460 <_fstat_r+0x1c>
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	bd38      	pop	{r3, r4, r5, pc}
 8003462:	bf00      	nop
 8003464:	20000264 	.word	0x20000264

08003468 <_isatty_r>:
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	4d06      	ldr	r5, [pc, #24]	@ (8003484 <_isatty_r+0x1c>)
 800346c:	2300      	movs	r3, #0
 800346e:	4604      	mov	r4, r0
 8003470:	4608      	mov	r0, r1
 8003472:	602b      	str	r3, [r5, #0]
 8003474:	f7fd fb59 	bl	8000b2a <_isatty>
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d102      	bne.n	8003482 <_isatty_r+0x1a>
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	b103      	cbz	r3, 8003482 <_isatty_r+0x1a>
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	bd38      	pop	{r3, r4, r5, pc}
 8003484:	20000264 	.word	0x20000264

08003488 <_init>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	bf00      	nop
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr

08003494 <_fini>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	bf00      	nop
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr
