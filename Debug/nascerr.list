
nascerr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003350  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003510  08003510  00004510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003630  08003630  00005080  2**0
                  CONTENTS
  4 .ARM          00000008  08003630  08003630  00004630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003638  08003638  00005080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003638  08003638  00004638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800363c  0800363c  0000463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08003640  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c4  20000080  080036c0  00005080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a44  080036c0  00005a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008657  00000000  00000000  000050b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ceb  00000000  00000000  0000d707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0000f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062c  00000000  00000000  0000fc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038d0  00000000  00000000  000102a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a58b  00000000  00000000  00013b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faeec  00000000  00000000  0001e0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118feb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002900  00000000  00000000  00119030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080034f8 	.word	0x080034f8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	080034f8 	.word	0x080034f8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <nascerr_experiment_select_ecc>:
 *                        03 - EDAC
 *                        04 - BYPASS (no ECC)
 *  @retval      : None
 * ******************************************************************************
 */
void nascerr_experiment_select_ecc(NASCERR_MODE ecc){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
//	ptr = (uint16_t *)NASCERR_SRAM_ADDRESS;

	switch(ecc){
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	2b04      	cmp	r3, #4
 80002b0:	d838      	bhi.n	8000324 <nascerr_experiment_select_ecc+0x84>
 80002b2:	a201      	add	r2, pc, #4	@ (adr r2, 80002b8 <nascerr_experiment_select_ecc+0x18>)
 80002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b8:	0800030f 	.word	0x0800030f
 80002bc:	08000325 	.word	0x08000325
 80002c0:	080002cd 	.word	0x080002cd
 80002c4:	080002e3 	.word	0x080002e3
 80002c8:	080002f9 	.word	0x080002f9
	// 10
	case ECC_MOD1: // Hamming
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2101      	movs	r1, #1
 80002d0:	4816      	ldr	r0, [pc, #88]	@ (800032c <nascerr_experiment_select_ecc+0x8c>)
 80002d2:	f001 f83d 	bl	8001350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2102      	movs	r1, #2
 80002da:	4814      	ldr	r0, [pc, #80]	@ (800032c <nascerr_experiment_select_ecc+0x8c>)
 80002dc:	f001 f838 	bl	8001350 <HAL_GPIO_WritePin>
		break;
 80002e0:	e020      	b.n	8000324 <nascerr_experiment_select_ecc+0x84>

	// 01
	case ECC_MOD2: // TBEC
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2101      	movs	r1, #1
 80002e6:	4811      	ldr	r0, [pc, #68]	@ (800032c <nascerr_experiment_select_ecc+0x8c>)
 80002e8:	f001 f832 	bl	8001350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2102      	movs	r1, #2
 80002f0:	480e      	ldr	r0, [pc, #56]	@ (800032c <nascerr_experiment_select_ecc+0x8c>)
 80002f2:	f001 f82d 	bl	8001350 <HAL_GPIO_WritePin>
		break;
 80002f6:	e015      	b.n	8000324 <nascerr_experiment_select_ecc+0x84>

	// 11
	case ECC_MOD3: // EDAC
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	2101      	movs	r1, #1
 80002fc:	480b      	ldr	r0, [pc, #44]	@ (800032c <nascerr_experiment_select_ecc+0x8c>)
 80002fe:	f001 f827 	bl	8001350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000302:	2201      	movs	r2, #1
 8000304:	2102      	movs	r1, #2
 8000306:	4809      	ldr	r0, [pc, #36]	@ (800032c <nascerr_experiment_select_ecc+0x8c>)
 8000308:	f001 f822 	bl	8001350 <HAL_GPIO_WritePin>
		break;
 800030c:	e00a      	b.n	8000324 <nascerr_experiment_select_ecc+0x84>

	// 00
	case BYPASS_TO_SRAM:
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	2101      	movs	r1, #1
 8000312:	4806      	ldr	r0, [pc, #24]	@ (800032c <nascerr_experiment_select_ecc+0x8c>)
 8000314:	f001 f81c 	bl	8001350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2102      	movs	r1, #2
 800031c:	4803      	ldr	r0, [pc, #12]	@ (800032c <nascerr_experiment_select_ecc+0x8c>)
 800031e:	f001 f817 	bl	8001350 <HAL_GPIO_WritePin>
		break;
 8000322:	bf00      	nop

	}
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	48000800 	.word	0x48000800

08000330 <nascerr_experiment_test_error_amount>:


uint16_t nascerr_experiment_test_error_amount(NASCERR_CTRL command){
 8000330:	b084      	sub	sp, #16
 8000332:	b580      	push	{r7, lr}
 8000334:	b084      	sub	sp, #16
 8000336:	af02      	add	r7, sp, #8
 8000338:	f107 0c10 	add.w	ip, r7, #16
 800033c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t error_total = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	80fb      	strh	r3, [r7, #6]

	for(int i = 0; i < command.repeat; i++){
 8000344:	2300      	movs	r3, #0
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	e01d      	b.n	8000386 <nascerr_experiment_test_error_amount+0x56>
		nascerr_memory_write_sram((uint16_t*)write_buffer, 0, command.mode, command.write_type, command.data_lenght);
 800034a:	7f3a      	ldrb	r2, [r7, #28]
 800034c:	7eb9      	ldrb	r1, [r7, #26]
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	460b      	mov	r3, r1
 8000354:	2100      	movs	r1, #0
 8000356:	4812      	ldr	r0, [pc, #72]	@ (80003a0 <nascerr_experiment_test_error_amount+0x70>)
 8000358:	f000 f868 	bl	800042c <nascerr_memory_write_sram>
		nascerr_io_delay(command.delay);
 800035c:	8bfb      	ldrh	r3, [r7, #30]
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f859 	bl	8000416 <nascerr_io_delay>
		nascerr_memory_read_sram(read_buffer, 0, command.mode, command.data_lenght);
 8000364:	7f3a      	ldrb	r2, [r7, #28]
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	2100      	movs	r1, #0
 800036a:	480e      	ldr	r0, [pc, #56]	@ (80003a4 <nascerr_experiment_test_error_amount+0x74>)
 800036c:	f000 f890 	bl	8000490 <nascerr_memory_read_sram>
		// rodar a função de erros
		error_total = nascerr_experiment_process_buffers(command.data_lenght, (uint16_t*)write_buffer, read_buffer, errors);
 8000370:	6978      	ldr	r0, [r7, #20]
 8000372:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <nascerr_experiment_test_error_amount+0x78>)
 8000374:	4a0b      	ldr	r2, [pc, #44]	@ (80003a4 <nascerr_experiment_test_error_amount+0x74>)
 8000376:	490a      	ldr	r1, [pc, #40]	@ (80003a0 <nascerr_experiment_test_error_amount+0x70>)
 8000378:	f000 f818 	bl	80003ac <nascerr_experiment_process_buffers>
 800037c:	4603      	mov	r3, r0
 800037e:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < command.repeat; i++){
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	3301      	adds	r3, #1
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	8b3b      	ldrh	r3, [r7, #24]
 8000388:	461a      	mov	r2, r3
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	4293      	cmp	r3, r2
 800038e:	dbdc      	blt.n	800034a <nascerr_experiment_test_error_amount+0x1a>
	}

	return error_total;
 8000390:	88fb      	ldrh	r3, [r7, #6]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr
 80003a0:	2000009c 	.word	0x2000009c
 80003a4:	2000089c 	.word	0x2000089c
 80003a8:	2000109c 	.word	0x2000109c

080003ac <nascerr_experiment_process_buffers>:


uint16_t nascerr_experiment_process_buffers(uint32_t length, uint16_t* data_write, uint16_t* data_read, uint16_t* errors) {
 80003ac:	b480      	push	{r7}
 80003ae:	b087      	sub	sp, #28
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
 80003b8:	603b      	str	r3, [r7, #0]
	uint16_t error_total = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	82fb      	strh	r3, [r7, #22]

	for (uint32_t i = 0; i < length; ++i) {
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	e01d      	b.n	8000400 <nascerr_experiment_process_buffers+0x54>

		// Perform XOR operation between buffer1 and buffer2 and store the result in buffer3
		errors[i] = data_write[i] ^ data_read[i];
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	4413      	add	r3, r2
 80003cc:	8819      	ldrh	r1, [r3, #0]
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	4413      	add	r3, r2
 80003d6:	881a      	ldrh	r2, [r3, #0]
 80003d8:	693b      	ldr	r3, [r7, #16]
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	6838      	ldr	r0, [r7, #0]
 80003de:	4403      	add	r3, r0
 80003e0:	404a      	eors	r2, r1
 80003e2:	b292      	uxth	r2, r2
 80003e4:	801a      	strh	r2, [r3, #0]
		if (errors[i]!=0)
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	683a      	ldr	r2, [r7, #0]
 80003ec:	4413      	add	r3, r2
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d002      	beq.n	80003fa <nascerr_experiment_process_buffers+0x4e>
			error_total++;
 80003f4:	8afb      	ldrh	r3, [r7, #22]
 80003f6:	3301      	adds	r3, #1
 80003f8:	82fb      	strh	r3, [r7, #22]
	for (uint32_t i = 0; i < length; ++i) {
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	3301      	adds	r3, #1
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693a      	ldr	r2, [r7, #16]
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	429a      	cmp	r2, r3
 8000406:	d3dd      	bcc.n	80003c4 <nascerr_experiment_process_buffers+0x18>
	}
	return error_total;
 8000408:	8afb      	ldrh	r3, [r7, #22]
	// Further processing as needed
}
 800040a:	4618      	mov	r0, r3
 800040c:	371c      	adds	r7, #28
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <nascerr_io_delay>:

void nascerr_io_pin_reset(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);
}

void nascerr_io_delay(uint32_t delay){
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f000 fcfa 	bl	8000e18 <HAL_Delay>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <nascerr_memory_write_sram>:
 *  @param       : length - A 32-bit value specifying the size of the block to
 *                          be written in bytes. It should be an even number.
 *  @retval      : None
 * ******************************************************************************
 */
void nascerr_memory_write_sram(uint16_t* write_buffer, uint32_t address, NASCERR_MODE ecc, W_DataTypeDef write_type, uint32_t length){
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	4611      	mov	r1, r2
 8000438:	461a      	mov	r2, r3
 800043a:	460b      	mov	r3, r1
 800043c:	71fb      	strb	r3, [r7, #7]
 800043e:	4613      	mov	r3, r2
 8000440:	71bb      	strb	r3, [r7, #6]
	nascerr_memory_fill_buffer(write_buffer, write_type, length); // Preenche o buffer com o tipo de dado indicado no comando.
 8000442:	79bb      	ldrb	r3, [r7, #6]
 8000444:	6a3a      	ldr	r2, [r7, #32]
 8000446:	4619      	mov	r1, r3
 8000448:	68f8      	ldr	r0, [r7, #12]
 800044a:	f000 f84d 	bl	80004e8 <nascerr_memory_fill_buffer>
	nascerr_experiment_select_ecc(ecc); // seleciona o ECC.
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff25 	bl	80002a0 <nascerr_experiment_select_ecc>

	for(int i = 0; i < length; i++){
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	e00d      	b.n	8000478 <nascerr_memory_write_sram+0x4c>
		*(ptr + i) = write_buffer[i];
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	68fa      	ldr	r2, [r7, #12]
 8000462:	441a      	add	r2, r3
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <nascerr_memory_write_sram+0x60>)
 8000466:	6819      	ldr	r1, [r3, #0]
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	440b      	add	r3, r1
 800046e:	8812      	ldrh	r2, [r2, #0]
 8000470:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	3301      	adds	r3, #1
 8000476:	617b      	str	r3, [r7, #20]
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	6a3a      	ldr	r2, [r7, #32]
 800047c:	429a      	cmp	r2, r3
 800047e:	d8ed      	bhi.n	800045c <nascerr_memory_write_sram+0x30>
	}
}
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000000 	.word	0x20000000

08000490 <nascerr_memory_read_sram>:
 *  @param       : length - A 32-bit value specifying the size of the block to
 *                          be read in bytes. It should be an even number.
 *  @retval      : None
 * ******************************************************************************
 */
void nascerr_memory_read_sram(uint16_t* read_buffer, uint32_t address, NASCERR_MODE ecc, uint32_t length){
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	4613      	mov	r3, r2
 800049e:	71fb      	strb	r3, [r7, #7]
	nascerr_experiment_select_ecc(ecc);
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff fefc 	bl	80002a0 <nascerr_experiment_select_ecc>
	for(int i = 0; i < length; i++){
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	e010      	b.n	80004d0 <nascerr_memory_read_sram+0x40>
		read_buffer[i] = *(ptr + address + i);
 80004ae:	4b0d      	ldr	r3, [pc, #52]	@ (80004e4 <nascerr_memory_read_sram+0x54>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	6979      	ldr	r1, [r7, #20]
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	440b      	add	r3, r1
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	441a      	add	r2, r3
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	68f9      	ldr	r1, [r7, #12]
 80004c2:	440b      	add	r3, r1
 80004c4:	8812      	ldrh	r2, [r2, #0]
 80004c6:	b292      	uxth	r2, r2
 80004c8:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	3301      	adds	r3, #1
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	683a      	ldr	r2, [r7, #0]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d8ea      	bhi.n	80004ae <nascerr_memory_read_sram+0x1e>
	}
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000000 	.word	0x20000000

080004e8 <nascerr_memory_fill_buffer>:


void nascerr_memory_fill_buffer(uint16_t* buffer, W_DataTypeDef write_type, uint32_t length){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	@ 0x28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	460b      	mov	r3, r1
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	72fb      	strb	r3, [r7, #11]
	uint8_t data_cell; // Guarda o tipo de palavra a ser armazenada.
	switch(write_type){
 80004f6:	7afb      	ldrb	r3, [r7, #11]
 80004f8:	2b04      	cmp	r3, #4
 80004fa:	d87d      	bhi.n	80005f8 <nascerr_memory_fill_buffer+0x110>
 80004fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000504 <nascerr_memory_fill_buffer+0x1c>)
 80004fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000502:	bf00      	nop
 8000504:	08000519 	.word	0x08000519
 8000508:	08000543 	.word	0x08000543
 800050c:	0800056d 	.word	0x0800056d
 8000510:	08000597 	.word	0x08000597
 8000514:	080005c1 	.word	0x080005c1
	// Preenche o buffer com zeros.
	case 0:
		data_cell = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	74fb      	strb	r3, [r7, #19]
		for(uint32_t i = 0; i<(length/2); i++){
 800051c:	2300      	movs	r3, #0
 800051e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000520:	e009      	b.n	8000536 <nascerr_memory_fill_buffer+0x4e>
			buffer[i] = data_cell;
 8000522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	4413      	add	r3, r2
 800052a:	7cfa      	ldrb	r2, [r7, #19]
 800052c:	b292      	uxth	r2, r2
 800052e:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i<(length/2); i++){
 8000530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000532:	3301      	adds	r3, #1
 8000534:	627b      	str	r3, [r7, #36]	@ 0x24
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	085b      	lsrs	r3, r3, #1
 800053a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800053c:	429a      	cmp	r2, r3
 800053e:	d3f0      	bcc.n	8000522 <nascerr_memory_fill_buffer+0x3a>
		}
		break;
 8000540:	e05a      	b.n	80005f8 <nascerr_memory_fill_buffer+0x110>

	// Preenche o buffer com 0xFFFF.
	case 1:
		data_cell = 0xFF;
 8000542:	23ff      	movs	r3, #255	@ 0xff
 8000544:	74fb      	strb	r3, [r7, #19]
		for(uint32_t i = 0; i<(length/2); i++){
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
 800054a:	e009      	b.n	8000560 <nascerr_memory_fill_buffer+0x78>
			buffer[i] = data_cell;
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	4413      	add	r3, r2
 8000554:	7cfa      	ldrb	r2, [r7, #19]
 8000556:	b292      	uxth	r2, r2
 8000558:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i<(length/2); i++){
 800055a:	6a3b      	ldr	r3, [r7, #32]
 800055c:	3301      	adds	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	085b      	lsrs	r3, r3, #1
 8000564:	6a3a      	ldr	r2, [r7, #32]
 8000566:	429a      	cmp	r2, r3
 8000568:	d3f0      	bcc.n	800054c <nascerr_memory_fill_buffer+0x64>
		}
		break;
 800056a:	e045      	b.n	80005f8 <nascerr_memory_fill_buffer+0x110>

	// Preenche o buffer com 0x5555.
	case 2:
		data_cell = 0x55;
 800056c:	2355      	movs	r3, #85	@ 0x55
 800056e:	74fb      	strb	r3, [r7, #19]
		for(uint32_t i = 0; i<(length/2); i++){
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
 8000574:	e009      	b.n	800058a <nascerr_memory_fill_buffer+0xa2>
			buffer[i] = data_cell;
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	4413      	add	r3, r2
 800057e:	7cfa      	ldrb	r2, [r7, #19]
 8000580:	b292      	uxth	r2, r2
 8000582:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i<(length/2); i++){
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	3301      	adds	r3, #1
 8000588:	61fb      	str	r3, [r7, #28]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	085b      	lsrs	r3, r3, #1
 800058e:	69fa      	ldr	r2, [r7, #28]
 8000590:	429a      	cmp	r2, r3
 8000592:	d3f0      	bcc.n	8000576 <nascerr_memory_fill_buffer+0x8e>
		}
		break;
 8000594:	e030      	b.n	80005f8 <nascerr_memory_fill_buffer+0x110>

	// Preenche o buffer com 0xAAAA.
	case 3:
		data_cell = 0xAA;
 8000596:	23aa      	movs	r3, #170	@ 0xaa
 8000598:	74fb      	strb	r3, [r7, #19]
		for(uint32_t i = 0; i<(length/2); i++){
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
 800059e:	e009      	b.n	80005b4 <nascerr_memory_fill_buffer+0xcc>
			buffer[i] = data_cell;
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	7cfa      	ldrb	r2, [r7, #19]
 80005aa:	b292      	uxth	r2, r2
 80005ac:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i<(length/2); i++){
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	3301      	adds	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	085b      	lsrs	r3, r3, #1
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d3f0      	bcc.n	80005a0 <nascerr_memory_fill_buffer+0xb8>
		}
		break;
 80005be:	e01b      	b.n	80005f8 <nascerr_memory_fill_buffer+0x110>

	// Preenche o buffer com dados aleatórios.
	case 4:
		for(uint32_t i = 0; i<(length/2); i++){
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	e012      	b.n	80005ec <nascerr_memory_fill_buffer+0x104>
			data_cell = (rand() % 256); // Escolhe um número aleatório entre 0 e 255 (8 bits) para colocar no buffer.
 80005c6:	f001 ffb9 	bl	800253c <rand>
 80005ca:	4603      	mov	r3, r0
 80005cc:	425a      	negs	r2, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	bf58      	it	pl
 80005d4:	4253      	negpl	r3, r2
 80005d6:	74fb      	strb	r3, [r7, #19]
			buffer[i] = data_cell;
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	7cfa      	ldrb	r2, [r7, #19]
 80005e2:	b292      	uxth	r2, r2
 80005e4:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i<(length/2); i++){
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	085b      	lsrs	r3, r3, #1
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d3e7      	bcc.n	80005c6 <nascerr_memory_fill_buffer+0xde>
		}
		break;
 80005f6:	bf00      	nop
	}
}
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	@ 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fb92 	bl	8000d2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f80f 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8bb 	bl	8000788 <MX_GPIO_Init>
  MX_FMC_Init();
 8000612:	f000 f853 	bl	80006bc <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  nascerr_experiment_test_error_amount(command);
 8000616:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <main+0x28>)
 8000618:	691a      	ldr	r2, [r3, #16]
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061e:	f7ff fe87 	bl	8000330 <nascerr_experiment_test_error_amount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0x22>
 8000626:	bf00      	nop
 8000628:	20000004 	.word	0x20000004

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b096      	sub	sp, #88	@ 0x58
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2244      	movs	r2, #68	@ 0x44
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 f8c1 	bl	80027c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000652:	f000 feb5 	bl	80013c0 <HAL_PWREx_ControlVoltageScaling>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800065c:	f000 f994 	bl	8000988 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000660:	2310      	movs	r3, #16
 8000662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800066c:	2360      	movs	r3, #96	@ 0x60
 800066e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4618      	mov	r0, r3
 800067a:	f000 ff55 	bl	8001528 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000684:	f000 f980 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fb5a 	bl	8001d5c <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006ae:	f000 f96b 	bl	8000988 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3758      	adds	r7, #88	@ 0x58
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2220      	movs	r2, #32
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 f87a 	bl	80027c2 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80006ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <MX_FMC_Init+0xc4>)
 80006d0:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80006d4:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80006d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <MX_FMC_Init+0xc4>)
 80006d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000784 <MX_FMC_Init+0xc8>)
 80006da:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <MX_FMC_Init+0xc4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80006e2:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <MX_FMC_Init+0xc4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <MX_FMC_Init+0xc4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80006ee:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_FMC_Init+0xc4>)
 80006f0:	2210      	movs	r2, #16
 80006f2:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80006f4:	4b22      	ldr	r3, [pc, #136]	@ (8000780 <MX_FMC_Init+0xc4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80006fa:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <MX_FMC_Init+0xc4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000700:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <MX_FMC_Init+0xc4>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000706:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_FMC_Init+0xc4>)
 8000708:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800070c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800070e:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <MX_FMC_Init+0xc4>)
 8000710:	2200      	movs	r2, #0
 8000712:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000714:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_FMC_Init+0xc4>)
 8000716:	2200      	movs	r2, #0
 8000718:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800071a:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_FMC_Init+0xc4>)
 800071c:	2200      	movs	r2, #0
 800071e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <MX_FMC_Init+0xc4>)
 8000722:	2200      	movs	r2, #0
 8000724:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000726:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_FMC_Init+0xc4>)
 8000728:	2200      	movs	r2, #0
 800072a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_FMC_Init+0xc4>)
 800072e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000732:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_FMC_Init+0xc4>)
 8000736:	2200      	movs	r2, #0
 8000738:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_FMC_Init+0xc4>)
 800073c:	2200      	movs	r2, #0
 800073e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000740:	230f      	movs	r3, #15
 8000742:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000744:	230f      	movs	r3, #15
 8000746:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000748:	23ff      	movs	r3, #255	@ 0xff
 800074a:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000750:	230f      	movs	r3, #15
 8000752:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000754:	2310      	movs	r3, #16
 8000756:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000758:	2311      	movs	r3, #17
 800075a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	@ (8000780 <MX_FMC_Init+0xc4>)
 8000768:	f001 fd7e 	bl	8002268 <HAL_SRAM_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_FMC_Init+0xba>
  {
    Error_Handler( );
 8000772:	f000 f909 	bl	8000988 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2000189c 	.word	0x2000189c
 8000784:	a0000104 	.word	0xa0000104

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	@ 0x38
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b76      	ldr	r3, [pc, #472]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	4a75      	ldr	r2, [pc, #468]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007aa:	4b73      	ldr	r3, [pc, #460]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	623b      	str	r3, [r7, #32]
 80007b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	4b70      	ldr	r3, [pc, #448]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a6f      	ldr	r2, [pc, #444]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b6d      	ldr	r3, [pc, #436]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0320 	and.w	r3, r3, #32
 80007ca:	61fb      	str	r3, [r7, #28]
 80007cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b6a      	ldr	r3, [pc, #424]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a69      	ldr	r2, [pc, #420]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b67      	ldr	r3, [pc, #412]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	4b64      	ldr	r3, [pc, #400]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a63      	ldr	r2, [pc, #396]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b61      	ldr	r3, [pc, #388]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	4b5e      	ldr	r3, [pc, #376]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a5d      	ldr	r2, [pc, #372]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b5b      	ldr	r3, [pc, #364]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b58      	ldr	r3, [pc, #352]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a57      	ldr	r2, [pc, #348]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b55      	ldr	r3, [pc, #340]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b52      	ldr	r3, [pc, #328]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a51      	ldr	r2, [pc, #324]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b4f      	ldr	r3, [pc, #316]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000846:	f000 fe5f 	bl	8001508 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b4b      	ldr	r3, [pc, #300]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a4a      	ldr	r2, [pc, #296]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b48      	ldr	r3, [pc, #288]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ECC_SEL_0_Pin|ECC_SEL_1_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2103      	movs	r1, #3
 8000866:	4845      	ldr	r0, [pc, #276]	@ (800097c <MX_GPIO_Init+0x1f4>)
 8000868:	f000 fd72 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000872:	4843      	ldr	r0, [pc, #268]	@ (8000980 <MX_GPIO_Init+0x1f8>)
 8000874:	f000 fd6c 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2140      	movs	r1, #64	@ 0x40
 800087c:	4841      	ldr	r0, [pc, #260]	@ (8000984 <MX_GPIO_Init+0x1fc>)
 800087e:	f000 fd67 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000882:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000888:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	4838      	ldr	r0, [pc, #224]	@ (800097c <MX_GPIO_Init+0x1f4>)
 800089a:	f000 fbc7 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : ECC_SEL_0_Pin ECC_SEL_1_Pin */
  GPIO_InitStruct.Pin = ECC_SEL_0_Pin|ECC_SEL_1_Pin;
 800089e:	2303      	movs	r3, #3
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	4831      	ldr	r0, [pc, #196]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80008b6:	f000 fbb9 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008ba:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	482b      	ldr	r0, [pc, #172]	@ (8000980 <MX_GPIO_Init+0x1f8>)
 80008d4:	f000 fbaa 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d8:	2320      	movs	r3, #32
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	4826      	ldr	r0, [pc, #152]	@ (8000984 <MX_GPIO_Init+0x1fc>)
 80008ec:	f000 fb9e 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f0:	2340      	movs	r3, #64	@ 0x40
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	481f      	ldr	r0, [pc, #124]	@ (8000984 <MX_GPIO_Init+0x1fc>)
 8000908:	f000 fb90 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_TX_Pin STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800090c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800091e:	2308      	movs	r3, #8
 8000920:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	4816      	ldr	r0, [pc, #88]	@ (8000984 <MX_GPIO_Init+0x1fc>)
 800092a:	f000 fb7f 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800092e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000940:	230a      	movs	r3, #10
 8000942:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094e:	f000 fb6d 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000952:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000964:	4619      	mov	r1, r3
 8000966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096a:	f000 fb5f 	bl	800102c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096e:	bf00      	nop
 8000970:	3738      	adds	r7, #56	@ 0x38
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	48000800 	.word	0x48000800
 8000980:	48000400 	.word	0x48000400
 8000984:	48001800 	.word	0x48001800

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099e:	4a0e      	ldr	r2, [pc, #56]	@ (80009d8 <HAL_MspInit+0x44>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <HAL_MspInit+0x44>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b6:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_MspInit+0x44>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_MspInit+0x44>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80009f0:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa0 <HAL_FMC_MspInit+0xc4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14e      	bne.n	8000a96 <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 80009f8:	4b29      	ldr	r3, [pc, #164]	@ (8000aa0 <HAL_FMC_MspInit+0xc4>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80009fe:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <HAL_FMC_MspInit+0xc8>)
 8000a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a02:	4a28      	ldr	r2, [pc, #160]	@ (8000aa4 <HAL_FMC_MspInit+0xc8>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6513      	str	r3, [r2, #80]	@ 0x50
 8000a0a:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <HAL_FMC_MspInit+0xc8>)
 8000a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a16:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8000a1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481d      	ldr	r0, [pc, #116]	@ (8000aa8 <HAL_FMC_MspInit+0xcc>)
 8000a32:	f000 fafb 	bl	800102c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a36:	2301      	movs	r3, #1
 8000a38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a46:	230c      	movs	r3, #12
 8000a48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4817      	ldr	r0, [pc, #92]	@ (8000aac <HAL_FMC_MspInit+0xd0>)
 8000a50:	f000 faec 	bl	800102c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a54:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000a58:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a66:	230c      	movs	r3, #12
 8000a68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4810      	ldr	r0, [pc, #64]	@ (8000ab0 <HAL_FMC_MspInit+0xd4>)
 8000a70:	f000 fadc 	bl	800102c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000a74:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000a78:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a86:	230c      	movs	r3, #12
 8000a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <HAL_FMC_MspInit+0xd8>)
 8000a90:	f000 facc 	bl	800102c <HAL_GPIO_Init>
 8000a94:	e000      	b.n	8000a98 <HAL_FMC_MspInit+0xbc>
    return;
 8000a96:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200018ec 	.word	0x200018ec
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48001400 	.word	0x48001400
 8000aac:	48001800 	.word	0x48001800
 8000ab0:	48001000 	.word	0x48001000
 8000ab4:	48000c00 	.word	0x48000c00

08000ab8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000ac0:	f7ff ff8c 	bl	80009dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b22:	f000 f959 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  return 1;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_kill>:

int _kill(int pid, int sig)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b44:	f001 fe8c 	bl	8002860 <__errno>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2216      	movs	r2, #22
 8000b4c:	601a      	str	r2, [r3, #0]
  return -1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_exit>:

void _exit (int status)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b62:	f04f 31ff 	mov.w	r1, #4294967295
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffe7 	bl	8000b3a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <_exit+0x12>

08000b70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00a      	b.n	8000b98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b82:	f3af 8000 	nop.w
 8000b86:	4601      	mov	r1, r0
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf0      	blt.n	8000b82 <_read+0x12>
  }

  return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	e009      	b.n	8000bd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	60ba      	str	r2, [r7, #8]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbf1      	blt.n	8000bbc <_write+0x12>
  }
  return len;
 8000bd8:	687b      	ldr	r3, [r7, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <_close>:

int _close(int file)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_isatty>:

int _isatty(int file)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c54:	4a14      	ldr	r2, [pc, #80]	@ (8000ca8 <_sbrk+0x5c>)
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <_sbrk+0x60>)
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c7c:	f001 fdf0 	bl	8002860 <__errno>
 8000c80:	4603      	mov	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <_sbrk+0x64>)
 8000c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200a0000 	.word	0x200a0000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	200018f0 	.word	0x200018f0
 8000cb4:	20001a48 	.word	0x20001a48

08000cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce0:	f7ff ffea 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <LoopForever+0xe>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d28 <LoopForever+0x16>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f001 fdaf 	bl	800286c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0e:	f7ff fc77 	bl	8000600 <main>

08000d12 <LoopForever>:

LoopForever:
    b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d14:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d20:	08003640 	.word	0x08003640
  ldr r2, =_sbss
 8000d24:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d28:	20001a44 	.word	0x20001a44

08000d2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_IRQHandler>

08000d2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f943 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f000 f80e 	bl	8000d60 <HAL_InitTick>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d002      	beq.n	8000d50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	71fb      	strb	r3, [r7, #7]
 8000d4e:	e001      	b.n	8000d54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d50:	f7ff fe20 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d6c:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <HAL_InitTick+0x6c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d023      	beq.n	8000dbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <HAL_InitTick+0x70>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <HAL_InitTick+0x6c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f941 	bl	8001012 <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10f      	bne.n	8000db6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d809      	bhi.n	8000db0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f919 	bl	8000fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da8:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <HAL_InitTick+0x74>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e007      	b.n	8000dc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e004      	b.n	8000dc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e001      	b.n	8000dc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000020 	.word	0x20000020
 8000dd0:	20000018 	.word	0x20000018
 8000dd4:	2000001c 	.word	0x2000001c

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_IncTick+0x20>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_IncTick+0x24>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <HAL_IncTick+0x24>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000020 	.word	0x20000020
 8000dfc:	200018f4 	.word	0x200018f4

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	@ (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200018f4 	.word	0x200018f4

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff ffee 	bl	8000e00 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d005      	beq.n	8000e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <HAL_Delay+0x44>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3e:	bf00      	nop
 8000e40:	f7ff ffde 	bl	8000e00 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8f7      	bhi.n	8000e40 <HAL_Delay+0x28>
  {
  }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000020 	.word	0x20000020

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff47 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff5c 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffb0 	bl	8000f80 <SysTick_Config>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	e166      	b.n	800130a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8158 	beq.w	8001304 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d005      	beq.n	800106c <HAL_GPIO_Init+0x40>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d130      	bne.n	80010ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010a2:	2201      	movs	r2, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	f003 0201 	and.w	r2, r3, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d017      	beq.n	800110a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d123      	bne.n	800115e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	6939      	ldr	r1, [r7, #16]
 800115a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0203 	and.w	r2, r3, #3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 80b2 	beq.w	8001304 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a0:	4b61      	ldr	r3, [pc, #388]	@ (8001328 <HAL_GPIO_Init+0x2fc>)
 80011a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a4:	4a60      	ldr	r2, [pc, #384]	@ (8001328 <HAL_GPIO_Init+0x2fc>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001328 <HAL_GPIO_Init+0x2fc>)
 80011ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b8:	4a5c      	ldr	r2, [pc, #368]	@ (800132c <HAL_GPIO_Init+0x300>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011e2:	d02b      	beq.n	800123c <HAL_GPIO_Init+0x210>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a52      	ldr	r2, [pc, #328]	@ (8001330 <HAL_GPIO_Init+0x304>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d025      	beq.n	8001238 <HAL_GPIO_Init+0x20c>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a51      	ldr	r2, [pc, #324]	@ (8001334 <HAL_GPIO_Init+0x308>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d01f      	beq.n	8001234 <HAL_GPIO_Init+0x208>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a50      	ldr	r2, [pc, #320]	@ (8001338 <HAL_GPIO_Init+0x30c>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d019      	beq.n	8001230 <HAL_GPIO_Init+0x204>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4f      	ldr	r2, [pc, #316]	@ (800133c <HAL_GPIO_Init+0x310>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d013      	beq.n	800122c <HAL_GPIO_Init+0x200>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4e      	ldr	r2, [pc, #312]	@ (8001340 <HAL_GPIO_Init+0x314>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d00d      	beq.n	8001228 <HAL_GPIO_Init+0x1fc>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4d      	ldr	r2, [pc, #308]	@ (8001344 <HAL_GPIO_Init+0x318>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d007      	beq.n	8001224 <HAL_GPIO_Init+0x1f8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a4c      	ldr	r2, [pc, #304]	@ (8001348 <HAL_GPIO_Init+0x31c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d101      	bne.n	8001220 <HAL_GPIO_Init+0x1f4>
 800121c:	2307      	movs	r3, #7
 800121e:	e00e      	b.n	800123e <HAL_GPIO_Init+0x212>
 8001220:	2308      	movs	r3, #8
 8001222:	e00c      	b.n	800123e <HAL_GPIO_Init+0x212>
 8001224:	2306      	movs	r3, #6
 8001226:	e00a      	b.n	800123e <HAL_GPIO_Init+0x212>
 8001228:	2305      	movs	r3, #5
 800122a:	e008      	b.n	800123e <HAL_GPIO_Init+0x212>
 800122c:	2304      	movs	r3, #4
 800122e:	e006      	b.n	800123e <HAL_GPIO_Init+0x212>
 8001230:	2303      	movs	r3, #3
 8001232:	e004      	b.n	800123e <HAL_GPIO_Init+0x212>
 8001234:	2302      	movs	r3, #2
 8001236:	e002      	b.n	800123e <HAL_GPIO_Init+0x212>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <HAL_GPIO_Init+0x212>
 800123c:	2300      	movs	r3, #0
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	f002 0203 	and.w	r2, r2, #3
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	4093      	lsls	r3, r2
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124e:	4937      	ldr	r1, [pc, #220]	@ (800132c <HAL_GPIO_Init+0x300>)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800125c:	4b3b      	ldr	r3, [pc, #236]	@ (800134c <HAL_GPIO_Init+0x320>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001280:	4a32      	ldr	r2, [pc, #200]	@ (800134c <HAL_GPIO_Init+0x320>)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001286:	4b31      	ldr	r3, [pc, #196]	@ (800134c <HAL_GPIO_Init+0x320>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012aa:	4a28      	ldr	r2, [pc, #160]	@ (800134c <HAL_GPIO_Init+0x320>)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012b0:	4b26      	ldr	r3, [pc, #152]	@ (800134c <HAL_GPIO_Init+0x320>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d4:	4a1d      	ldr	r2, [pc, #116]	@ (800134c <HAL_GPIO_Init+0x320>)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012da:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <HAL_GPIO_Init+0x320>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012fe:	4a13      	ldr	r2, [pc, #76]	@ (800134c <HAL_GPIO_Init+0x320>)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	f47f ae91 	bne.w	800103c <HAL_GPIO_Init+0x10>
  }
}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40021000 	.word	0x40021000
 800132c:	40010000 	.word	0x40010000
 8001330:	48000400 	.word	0x48000400
 8001334:	48000800 	.word	0x48000800
 8001338:	48000c00 	.word	0x48000c00
 800133c:	48001000 	.word	0x48001000
 8001340:	48001400 	.word	0x48001400
 8001344:	48001800 	.word	0x48001800
 8001348:	48001c00 	.word	0x48001c00
 800134c:	40010400 	.word	0x40010400

08001350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001360:	787b      	ldrb	r3, [r7, #1]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800136c:	e002      	b.n	8001374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001384:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800138c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001390:	d102      	bne.n	8001398 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001396:	e00b      	b.n	80013b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_PWREx_GetVoltageRange+0x3c>)
 800139a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800139e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013a6:	d102      	bne.n	80013ae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80013a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013ac:	e000      	b.n	80013b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80013ae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40007000 	.word	0x40007000

080013c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d141      	bne.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ce:	4b4b      	ldr	r3, [pc, #300]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013da:	d131      	bne.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013dc:	4b47      	ldr	r3, [pc, #284]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e2:	4a46      	ldr	r2, [pc, #280]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ec:	4b43      	ldr	r3, [pc, #268]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013f4:	4a41      	ldr	r2, [pc, #260]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80013fc:	4b40      	ldr	r3, [pc, #256]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2232      	movs	r2, #50	@ 0x32
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	4a3f      	ldr	r2, [pc, #252]	@ (8001504 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	0c9b      	lsrs	r3, r3, #18
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001412:	e002      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3b01      	subs	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141a:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001426:	d102      	bne.n	800142e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f2      	bne.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800142e:	4b33      	ldr	r3, [pc, #204]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800143a:	d158      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e057      	b.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001440:	4b2e      	ldr	r3, [pc, #184]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001446:	4a2d      	ldr	r2, [pc, #180]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800144c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001450:	e04d      	b.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001458:	d141      	bne.n	80014de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800145a:	4b28      	ldr	r3, [pc, #160]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001466:	d131      	bne.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001468:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800146e:	4a23      	ldr	r2, [pc, #140]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001474:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001478:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001480:	4a1e      	ldr	r2, [pc, #120]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001482:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001486:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2232      	movs	r2, #50	@ 0x32
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	4a1c      	ldr	r2, [pc, #112]	@ (8001504 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	0c9b      	lsrs	r3, r3, #18
 800149a:	3301      	adds	r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800149e:	e002      	b.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014b2:	d102      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f2      	bne.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c6:	d112      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e011      	b.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014d2:	4a0a      	ldr	r2, [pc, #40]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014dc:	e007      	b.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40007000 	.word	0x40007000
 8001500:	20000018 	.word	0x20000018
 8001504:	431bde83 	.word	0x431bde83

08001508 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_PWREx_EnableVddIO2+0x1c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001512:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001516:	6053      	str	r3, [r2, #4]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40007000 	.word	0x40007000

08001528 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	f000 bc08 	b.w	8001d4c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153c:	4b96      	ldr	r3, [pc, #600]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001546:	4b94      	ldr	r3, [pc, #592]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80e4 	beq.w	8001726 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <HAL_RCC_OscConfig+0x4c>
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	f040 808b 	bne.w	8001682 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b01      	cmp	r3, #1
 8001570:	f040 8087 	bne.w	8001682 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001574:	4b88      	ldr	r3, [pc, #544]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_OscConfig+0x64>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e3df      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	4b81      	ldr	r3, [pc, #516]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <HAL_RCC_OscConfig+0x7e>
 800159c:	4b7e      	ldr	r3, [pc, #504]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015a4:	e005      	b.n	80015b2 <HAL_RCC_OscConfig+0x8a>
 80015a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d223      	bcs.n	80015fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fd94 	bl	80020e8 <RCC_SetFlashLatencyFromMSIRange>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e3c0      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ca:	4b73      	ldr	r3, [pc, #460]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a72      	ldr	r2, [pc, #456]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b70      	ldr	r3, [pc, #448]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	496d      	ldr	r1, [pc, #436]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	4968      	ldr	r1, [pc, #416]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
 80015fc:	e025      	b.n	800164a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fe:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a65      	ldr	r2, [pc, #404]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b63      	ldr	r3, [pc, #396]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4960      	ldr	r1, [pc, #384]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800161c:	4b5e      	ldr	r3, [pc, #376]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	495b      	ldr	r1, [pc, #364]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fd54 	bl	80020e8 <RCC_SetFlashLatencyFromMSIRange>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e380      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800164a:	f000 fcc1 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 800164e:	4602      	mov	r2, r0
 8001650:	4b51      	ldr	r3, [pc, #324]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	4950      	ldr	r1, [pc, #320]	@ (800179c <HAL_RCC_OscConfig+0x274>)
 800165c:	5ccb      	ldrb	r3, [r1, r3]
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	fa22 f303 	lsr.w	r3, r2, r3
 8001666:	4a4e      	ldr	r2, [pc, #312]	@ (80017a0 <HAL_RCC_OscConfig+0x278>)
 8001668:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800166a:	4b4e      	ldr	r3, [pc, #312]	@ (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fb76 	bl	8000d60 <HAL_InitTick>
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d052      	beq.n	8001724 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	e364      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d032      	beq.n	80016f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800168a:	4b43      	ldr	r3, [pc, #268]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a42      	ldr	r2, [pc, #264]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001696:	f7ff fbb3 	bl	8000e00 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169e:	f7ff fbaf 	bl	8000e00 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e34d      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b0:	4b39      	ldr	r3, [pc, #228]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016bc:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a35      	ldr	r2, [pc, #212]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4930      	ldr	r1, [pc, #192]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016da:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	492b      	ldr	r1, [pc, #172]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
 80016ee:	e01a      	b.n	8001726 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016f0:	4b29      	ldr	r3, [pc, #164]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb80 	bl	8000e00 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001704:	f7ff fb7c 	bl	8000e00 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e31a      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x1dc>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d073      	beq.n	800181a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x21c>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d10e      	bne.n	800175c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d10b      	bne.n	800175c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d063      	beq.n	8001818 <HAL_RCC_OscConfig+0x2f0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d15f      	bne.n	8001818 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e2f7      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001764:	d106      	bne.n	8001774 <HAL_RCC_OscConfig+0x24c>
 8001766:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e025      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800177c:	d114      	bne.n	80017a8 <HAL_RCC_OscConfig+0x280>
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a02      	ldr	r2, [pc, #8]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e013      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001798:	40021000 	.word	0x40021000
 800179c:	08003510 	.word	0x08003510
 80017a0:	20000018 	.word	0x20000018
 80017a4:	2000001c 	.word	0x2000001c
 80017a8:	4ba0      	ldr	r3, [pc, #640]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a9f      	ldr	r2, [pc, #636]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b9d      	ldr	r3, [pc, #628]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a9c      	ldr	r2, [pc, #624]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb1a 	bl	8000e00 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fb16 	bl	8000e00 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e2b4      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e2:	4b92      	ldr	r3, [pc, #584]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2a8>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb06 	bl	8000e00 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fb02 	bl	8000e00 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	@ 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e2a0      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180a:	4b88      	ldr	r3, [pc, #544]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2d0>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d060      	beq.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d005      	beq.n	8001838 <HAL_RCC_OscConfig+0x310>
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d119      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d116      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	4b7c      	ldr	r3, [pc, #496]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x328>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e27d      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b76      	ldr	r3, [pc, #472]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	4973      	ldr	r1, [pc, #460]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001864:	e040      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d023      	beq.n	80018b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186e:	4b6f      	ldr	r3, [pc, #444]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6e      	ldr	r2, [pc, #440]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fac1 	bl	8000e00 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fabd 	bl	8000e00 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e25b      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001894:	4b65      	ldr	r3, [pc, #404]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b62      	ldr	r3, [pc, #392]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	495f      	ldr	r1, [pc, #380]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
 80018b4:	e018      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a5c      	ldr	r2, [pc, #368]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fa9d 	bl	8000e00 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fa99 	bl	8000e00 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e237      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018dc:	4b53      	ldr	r3, [pc, #332]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d03c      	beq.n	800196e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01c      	beq.n	8001936 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fc:	4b4b      	ldr	r3, [pc, #300]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001902:	4a4a      	ldr	r2, [pc, #296]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fa78 	bl	8000e00 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff fa74 	bl	8000e00 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e212      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001926:	4b41      	ldr	r3, [pc, #260]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ef      	beq.n	8001914 <HAL_RCC_OscConfig+0x3ec>
 8001934:	e01b      	b.n	800196e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b3d      	ldr	r3, [pc, #244]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193c:	4a3b      	ldr	r2, [pc, #236]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff fa5b 	bl	8000e00 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff fa57 	bl	8000e00 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1f5      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001960:	4b32      	ldr	r3, [pc, #200]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ef      	bne.n	800194e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80a6 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001980:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10d      	bne.n	80019a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	4a26      	ldr	r2, [pc, #152]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001996:	6593      	str	r3, [r2, #88]	@ 0x58
 8001998:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a8:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d118      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa1e 	bl	8000e00 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c8:	f7ff fa1a 	bl	8000e00 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1b8      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4d8>
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019fe:	e029      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d115      	bne.n	8001a34 <HAL_RCC_OscConfig+0x50c>
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0e:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1e:	4a03      	ldr	r2, [pc, #12]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a28:	e014      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40007000 	.word	0x40007000
 8001a34:	4b9d      	ldr	r3, [pc, #628]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3a:	4a9c      	ldr	r2, [pc, #624]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a44:	4b99      	ldr	r3, [pc, #612]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4a:	4a98      	ldr	r2, [pc, #608]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d016      	beq.n	8001a8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f9d0 	bl	8000e00 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff f9cc 	bl	8000e00 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e168      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	4b8c      	ldr	r3, [pc, #560]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ed      	beq.n	8001a64 <HAL_RCC_OscConfig+0x53c>
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f9b9 	bl	8000e00 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff f9b5 	bl	8000e00 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e151      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	4b80      	ldr	r3, [pc, #512]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ed      	bne.n	8001a92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b7b      	ldr	r3, [pc, #492]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001adc:	4b73      	ldr	r3, [pc, #460]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ae2:	4a72      	ldr	r2, [pc, #456]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff f988 	bl	8000e00 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001af4:	f7ff f984 	bl	8000e00 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e122      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b06:	4b69      	ldr	r3, [pc, #420]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ef      	beq.n	8001af4 <HAL_RCC_OscConfig+0x5cc>
 8001b14:	e01b      	b.n	8001b4e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b16:	4b65      	ldr	r3, [pc, #404]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b1c:	4a63      	ldr	r2, [pc, #396]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b26:	f7ff f96b 	bl	8000e00 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2e:	f7ff f967 	bl	8000e00 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e105      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b40:	4b5a      	ldr	r3, [pc, #360]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1ef      	bne.n	8001b2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80f9 	beq.w	8001d4a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	f040 80cf 	bne.w	8001d00 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b62:	4b52      	ldr	r3, [pc, #328]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 0203 	and.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d12c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b80:	3b01      	subs	r3, #1
 8001b82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d123      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d11b      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d113      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d109      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d071      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d068      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bd6:	4b35      	ldr	r3, [pc, #212]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d105      	bne.n	8001bee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001be2:	4b32      	ldr	r3, [pc, #200]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0ac      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001bf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bfc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bfe:	f7ff f8ff 	bl	8000e00 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c06:	f7ff f8fb 	bl	8000e00 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e099      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c18:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <HAL_RCC_OscConfig+0x788>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c34:	3a01      	subs	r2, #1
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c3e:	0212      	lsls	r2, r2, #8
 8001c40:	4311      	orrs	r1, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c46:	0852      	lsrs	r2, r2, #1
 8001c48:	3a01      	subs	r2, #1
 8001c4a:	0552      	lsls	r2, r2, #21
 8001c4c:	4311      	orrs	r1, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c52:	0852      	lsrs	r2, r2, #1
 8001c54:	3a01      	subs	r2, #1
 8001c56:	0652      	lsls	r2, r2, #25
 8001c58:	4311      	orrs	r1, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c5e:	06d2      	lsls	r2, r2, #27
 8001c60:	430a      	orrs	r2, r1
 8001c62:	4912      	ldr	r1, [pc, #72]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c68:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c74:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c80:	f7ff f8be 	bl	8000e00 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff f8ba 	bl	8000e00 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e058      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca6:	e050      	b.n	8001d4a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e04f      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <HAL_RCC_OscConfig+0x82c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d144      	bne.n	8001d4a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <HAL_RCC_OscConfig+0x82c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a23      	ldr	r2, [pc, #140]	@ (8001d54 <HAL_RCC_OscConfig+0x82c>)
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <HAL_RCC_OscConfig+0x82c>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a20      	ldr	r2, [pc, #128]	@ (8001d54 <HAL_RCC_OscConfig+0x82c>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cd8:	f7ff f892 	bl	8000e00 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f88e 	bl	8000e00 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e02c      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <HAL_RCC_OscConfig+0x82c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x7b8>
 8001cfe:	e024      	b.n	8001d4a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	d01f      	beq.n	8001d46 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_RCC_OscConfig+0x82c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <HAL_RCC_OscConfig+0x82c>)
 8001d0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff f875 	bl	8000e00 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7ff f871 	bl	8000e00 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_RCC_OscConfig+0x82c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_OscConfig+0x82c>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	4905      	ldr	r1, [pc, #20]	@ (8001d54 <HAL_RCC_OscConfig+0x82c>)
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_RCC_OscConfig+0x830>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	60cb      	str	r3, [r1, #12]
 8001d44:	e001      	b.n	8001d4a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	feeefffc 	.word	0xfeeefffc

08001d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e11d      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b90      	ldr	r3, [pc, #576]	@ (8001fb8 <HAL_RCC_ClockConfig+0x25c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d910      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b8d      	ldr	r3, [pc, #564]	@ (8001fb8 <HAL_RCC_ClockConfig+0x25c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 020f 	bic.w	r2, r3, #15
 8001d8a:	498b      	ldr	r1, [pc, #556]	@ (8001fb8 <HAL_RCC_ClockConfig+0x25c>)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b89      	ldr	r3, [pc, #548]	@ (8001fb8 <HAL_RCC_ClockConfig+0x25c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e105      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d010      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	4b81      	ldr	r3, [pc, #516]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d908      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	497b      	ldr	r1, [pc, #492]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d079      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d11e      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de6:	4b75      	ldr	r3, [pc, #468]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0dc      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001df6:	f000 f9d1 	bl	800219c <RCC_GetSysClockFreqFromPLLSource>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4a70      	ldr	r2, [pc, #448]	@ (8001fc0 <HAL_RCC_ClockConfig+0x264>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d946      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e02:	4b6e      	ldr	r3, [pc, #440]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d140      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e0e:	4b6b      	ldr	r3, [pc, #428]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e16:	4a69      	ldr	r2, [pc, #420]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e1e:	2380      	movs	r3, #128	@ 0x80
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e035      	b.n	8001e90 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2c:	4b63      	ldr	r3, [pc, #396]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d115      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0b9      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e44:	4b5d      	ldr	r3, [pc, #372]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0ad      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e54:	4b59      	ldr	r3, [pc, #356]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0a5      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001e64:	f000 f8b4 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a55      	ldr	r2, [pc, #340]	@ (8001fc0 <HAL_RCC_ClockConfig+0x264>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d90f      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e70:	4b52      	ldr	r3, [pc, #328]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e84:	4a4d      	ldr	r2, [pc, #308]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e8a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e90:	4b4a      	ldr	r3, [pc, #296]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f023 0203 	bic.w	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4947      	ldr	r1, [pc, #284]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea2:	f7fe ffad 	bl	8000e00 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eaa:	f7fe ffa9 	bl	8000e00 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e077      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 020c 	and.w	r2, r3, #12
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d1eb      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b80      	cmp	r3, #128	@ 0x80
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ed8:	4b38      	ldr	r3, [pc, #224]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a37      	ldr	r2, [pc, #220]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ee2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d010      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	4b31      	ldr	r3, [pc, #196]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d208      	bcs.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f00:	4b2e      	ldr	r3, [pc, #184]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	492b      	ldr	r1, [pc, #172]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f12:	4b29      	ldr	r3, [pc, #164]	@ (8001fb8 <HAL_RCC_ClockConfig+0x25c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d210      	bcs.n	8001f42 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f20:	4b25      	ldr	r3, [pc, #148]	@ (8001fb8 <HAL_RCC_ClockConfig+0x25c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 020f 	bic.w	r2, r3, #15
 8001f28:	4923      	ldr	r1, [pc, #140]	@ (8001fb8 <HAL_RCC_ClockConfig+0x25c>)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f30:	4b21      	ldr	r3, [pc, #132]	@ (8001fb8 <HAL_RCC_ClockConfig+0x25c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e036      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	4918      	ldr	r1, [pc, #96]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d009      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4910      	ldr	r1, [pc, #64]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f80:	f000 f826 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <HAL_RCC_ClockConfig+0x260>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	490c      	ldr	r1, [pc, #48]	@ (8001fc4 <HAL_RCC_ClockConfig+0x268>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <HAL_RCC_ClockConfig+0x26c>)
 8001f9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <HAL_RCC_ClockConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fedb 	bl	8000d60 <HAL_InitTick>
 8001faa:	4603      	mov	r3, r0
 8001fac:	73fb      	strb	r3, [r7, #15]

  return status;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	04c4b400 	.word	0x04c4b400
 8001fc4:	08003510 	.word	0x08003510
 8001fc8:	20000018 	.word	0x20000018
 8001fcc:	2000001c 	.word	0x2000001c

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fde:	4b3e      	ldr	r3, [pc, #248]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x34>
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d121      	bne.n	8002042 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d11e      	bne.n	8002042 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002004:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002010:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	e005      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002020:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800202c:	4a2b      	ldr	r2, [pc, #172]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002034:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10d      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d102      	bne.n	800204e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002048:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	e004      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d101      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002054:	4b23      	ldr	r3, [pc, #140]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002056:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d134      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800205e:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0xa6>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d003      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0xac>
 8002074:	e005      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002076:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002078:	617b      	str	r3, [r7, #20]
      break;
 800207a:	e005      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800207e:	617b      	str	r3, [r7, #20]
      break;
 8002080:	e002      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	617b      	str	r3, [r7, #20]
      break;
 8002086:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002088:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	3301      	adds	r3, #1
 8002094:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002096:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	fb03 f202 	mul.w	r2, r3, r2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	0e5b      	lsrs	r3, r3, #25
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	3301      	adds	r3, #1
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020c8:	69bb      	ldr	r3, [r7, #24]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08003520 	.word	0x08003520
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	007a1200 	.word	0x007a1200

080020e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020f4:	4b27      	ldr	r3, [pc, #156]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002100:	f7ff f93e 	bl	8001380 <HAL_PWREx_GetVoltageRange>
 8002104:	6178      	str	r0, [r7, #20]
 8002106:	e014      	b.n	8002132 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002108:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	4a21      	ldr	r2, [pc, #132]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800210e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002112:	6593      	str	r3, [r2, #88]	@ 0x58
 8002114:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002120:	f7ff f92e 	bl	8001380 <HAL_PWREx_GetVoltageRange>
 8002124:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	4a1a      	ldr	r2, [pc, #104]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800212c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002130:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002138:	d10b      	bne.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b80      	cmp	r3, #128	@ 0x80
 800213e:	d913      	bls.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2ba0      	cmp	r3, #160	@ 0xa0
 8002144:	d902      	bls.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002146:	2302      	movs	r3, #2
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e00d      	b.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800214c:	2301      	movs	r3, #1
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	e00a      	b.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b7f      	cmp	r3, #127	@ 0x7f
 8002156:	d902      	bls.n	800215e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002158:	2302      	movs	r3, #2
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e004      	b.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b70      	cmp	r3, #112	@ 0x70
 8002162:	d101      	bne.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002164:	2301      	movs	r3, #1
 8002166:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 020f 	bic.w	r2, r3, #15
 8002170:	4909      	ldr	r1, [pc, #36]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002178:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	429a      	cmp	r2, r3
 8002184:	d001      	beq.n	800218a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	40022000 	.word	0x40022000

0800219c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d00b      	beq.n	80021ca <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d825      	bhi.n	8002204 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d008      	beq.n	80021d0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d11f      	bne.n	8002204 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80021c4:	4b25      	ldr	r3, [pc, #148]	@ (800225c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021c6:	613b      	str	r3, [r7, #16]
    break;
 80021c8:	e01f      	b.n	800220a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80021ca:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80021cc:	613b      	str	r3, [r7, #16]
    break;
 80021ce:	e01c      	b.n	800220a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021d0:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e005      	b.n	80021f8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80021f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002200:	613b      	str	r3, [r7, #16]
    break;
 8002202:	e002      	b.n	800220a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
    break;
 8002208:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800220a:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	3301      	adds	r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002218:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	fb03 f202 	mul.w	r2, r3, r2
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0e5b      	lsrs	r3, r3, #25
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	3301      	adds	r3, #1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800224a:	683b      	ldr	r3, [r7, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40021000 	.word	0x40021000
 800225c:	00f42400 	.word	0x00f42400
 8002260:	007a1200 	.word	0x007a1200
 8002264:	08003520 	.word	0x08003520

08002268 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e038      	b.n	80022f0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7fe fc10 	bl	8000ab8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3308      	adds	r3, #8
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 f828 	bl	80022f8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	461a      	mov	r2, r3
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	f000 f8ba 	bl	800242c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6858      	ldr	r0, [r3, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	f000 f8fe 	bl	80024c6 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	6892      	ldr	r2, [r2, #8]
 80022d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	6892      	ldr	r2, [r2, #8]
 80022de:	f041 0101 	orr.w	r1, r1, #1
 80022e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	f023 0101 	bic.w	r1, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b08      	cmp	r3, #8
 8002320:	d102      	bne.n	8002328 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002322:	2340      	movs	r3, #64	@ 0x40
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e001      	b.n	800232c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002338:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800233e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002344:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800234a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8002350:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8002356:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800235c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 8002362:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8002368:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800239a:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <FMC_NORSRAM_Init+0x130>)
 800239c:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023a4:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023ac:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80023b4:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80023bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	ea02 0103 	and.w	r1, r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4319      	orrs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023e6:	d10c      	bne.n	8002402 <FMC_NORSRAM_Init+0x10a>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	0008fb7f 	.word	0x0008fb7f

0800242c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8002442:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800244a:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8002452:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800245a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	3b01      	subs	r3, #1
 8002462:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8002464:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	3b02      	subs	r3, #2
 800246c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800246e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800247a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800248a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800248e:	d113      	bne.n	80024b8 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002498:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	3b01      	subs	r3, #1
 80024a0:	051b      	lsls	r3, r3, #20
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024da:	d121      	bne.n	8002520 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e4:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	4319      	orrs	r1, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	4319      	orrs	r1, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	079b      	lsls	r3, r3, #30
 8002502:	4319      	orrs	r1, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	4319      	orrs	r1, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	041b      	lsls	r3, r3, #16
 8002510:	430b      	orrs	r3, r1
 8002512:	ea42 0103 	orr.w	r1, r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800251e:	e005      	b.n	800252c <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <rand>:
 800253c:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <rand+0x5c>)
 800253e:	b510      	push	{r4, lr}
 8002540:	681c      	ldr	r4, [r3, #0]
 8002542:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002544:	b9b3      	cbnz	r3, 8002574 <rand+0x38>
 8002546:	2018      	movs	r0, #24
 8002548:	f000 fa20 	bl	800298c <malloc>
 800254c:	4602      	mov	r2, r0
 800254e:	6320      	str	r0, [r4, #48]	@ 0x30
 8002550:	b920      	cbnz	r0, 800255c <rand+0x20>
 8002552:	4b12      	ldr	r3, [pc, #72]	@ (800259c <rand+0x60>)
 8002554:	4812      	ldr	r0, [pc, #72]	@ (80025a0 <rand+0x64>)
 8002556:	2152      	movs	r1, #82	@ 0x52
 8002558:	f000 f9b0 	bl	80028bc <__assert_func>
 800255c:	4911      	ldr	r1, [pc, #68]	@ (80025a4 <rand+0x68>)
 800255e:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <rand+0x6c>)
 8002560:	e9c0 1300 	strd	r1, r3, [r0]
 8002564:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <rand+0x70>)
 8002566:	6083      	str	r3, [r0, #8]
 8002568:	230b      	movs	r3, #11
 800256a:	8183      	strh	r3, [r0, #12]
 800256c:	2100      	movs	r1, #0
 800256e:	2001      	movs	r0, #1
 8002570:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002574:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002576:	480e      	ldr	r0, [pc, #56]	@ (80025b0 <rand+0x74>)
 8002578:	690b      	ldr	r3, [r1, #16]
 800257a:	694c      	ldr	r4, [r1, #20]
 800257c:	4a0d      	ldr	r2, [pc, #52]	@ (80025b4 <rand+0x78>)
 800257e:	4358      	muls	r0, r3
 8002580:	fb02 0004 	mla	r0, r2, r4, r0
 8002584:	fba3 3202 	umull	r3, r2, r3, r2
 8002588:	3301      	adds	r3, #1
 800258a:	eb40 0002 	adc.w	r0, r0, r2
 800258e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002592:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002596:	bd10      	pop	{r4, pc}
 8002598:	20000030 	.word	0x20000030
 800259c:	08003550 	.word	0x08003550
 80025a0:	08003567 	.word	0x08003567
 80025a4:	abcd330e 	.word	0xabcd330e
 80025a8:	e66d1234 	.word	0xe66d1234
 80025ac:	0005deec 	.word	0x0005deec
 80025b0:	5851f42d 	.word	0x5851f42d
 80025b4:	4c957f2d 	.word	0x4c957f2d

080025b8 <std>:
 80025b8:	2300      	movs	r3, #0
 80025ba:	b510      	push	{r4, lr}
 80025bc:	4604      	mov	r4, r0
 80025be:	e9c0 3300 	strd	r3, r3, [r0]
 80025c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025c6:	6083      	str	r3, [r0, #8]
 80025c8:	8181      	strh	r1, [r0, #12]
 80025ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80025cc:	81c2      	strh	r2, [r0, #14]
 80025ce:	6183      	str	r3, [r0, #24]
 80025d0:	4619      	mov	r1, r3
 80025d2:	2208      	movs	r2, #8
 80025d4:	305c      	adds	r0, #92	@ 0x5c
 80025d6:	f000 f8f4 	bl	80027c2 <memset>
 80025da:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <std+0x58>)
 80025dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80025de:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <std+0x5c>)
 80025e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80025e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <std+0x60>)
 80025e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80025e6:	4b0d      	ldr	r3, [pc, #52]	@ (800261c <std+0x64>)
 80025e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80025ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <std+0x68>)
 80025ec:	6224      	str	r4, [r4, #32]
 80025ee:	429c      	cmp	r4, r3
 80025f0:	d006      	beq.n	8002600 <std+0x48>
 80025f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80025f6:	4294      	cmp	r4, r2
 80025f8:	d002      	beq.n	8002600 <std+0x48>
 80025fa:	33d0      	adds	r3, #208	@ 0xd0
 80025fc:	429c      	cmp	r4, r3
 80025fe:	d105      	bne.n	800260c <std+0x54>
 8002600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002608:	f000 b954 	b.w	80028b4 <__retarget_lock_init_recursive>
 800260c:	bd10      	pop	{r4, pc}
 800260e:	bf00      	nop
 8002610:	0800273d 	.word	0x0800273d
 8002614:	0800275f 	.word	0x0800275f
 8002618:	08002797 	.word	0x08002797
 800261c:	080027bb 	.word	0x080027bb
 8002620:	200018f8 	.word	0x200018f8

08002624 <stdio_exit_handler>:
 8002624:	4a02      	ldr	r2, [pc, #8]	@ (8002630 <stdio_exit_handler+0xc>)
 8002626:	4903      	ldr	r1, [pc, #12]	@ (8002634 <stdio_exit_handler+0x10>)
 8002628:	4803      	ldr	r0, [pc, #12]	@ (8002638 <stdio_exit_handler+0x14>)
 800262a:	f000 b869 	b.w	8002700 <_fwalk_sglue>
 800262e:	bf00      	nop
 8002630:	20000024 	.word	0x20000024
 8002634:	08002c01 	.word	0x08002c01
 8002638:	20000034 	.word	0x20000034

0800263c <cleanup_stdio>:
 800263c:	6841      	ldr	r1, [r0, #4]
 800263e:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <cleanup_stdio+0x34>)
 8002640:	4299      	cmp	r1, r3
 8002642:	b510      	push	{r4, lr}
 8002644:	4604      	mov	r4, r0
 8002646:	d001      	beq.n	800264c <cleanup_stdio+0x10>
 8002648:	f000 fada 	bl	8002c00 <_fflush_r>
 800264c:	68a1      	ldr	r1, [r4, #8]
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <cleanup_stdio+0x38>)
 8002650:	4299      	cmp	r1, r3
 8002652:	d002      	beq.n	800265a <cleanup_stdio+0x1e>
 8002654:	4620      	mov	r0, r4
 8002656:	f000 fad3 	bl	8002c00 <_fflush_r>
 800265a:	68e1      	ldr	r1, [r4, #12]
 800265c:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <cleanup_stdio+0x3c>)
 800265e:	4299      	cmp	r1, r3
 8002660:	d004      	beq.n	800266c <cleanup_stdio+0x30>
 8002662:	4620      	mov	r0, r4
 8002664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002668:	f000 baca 	b.w	8002c00 <_fflush_r>
 800266c:	bd10      	pop	{r4, pc}
 800266e:	bf00      	nop
 8002670:	200018f8 	.word	0x200018f8
 8002674:	20001960 	.word	0x20001960
 8002678:	200019c8 	.word	0x200019c8

0800267c <global_stdio_init.part.0>:
 800267c:	b510      	push	{r4, lr}
 800267e:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <global_stdio_init.part.0+0x30>)
 8002680:	4c0b      	ldr	r4, [pc, #44]	@ (80026b0 <global_stdio_init.part.0+0x34>)
 8002682:	4a0c      	ldr	r2, [pc, #48]	@ (80026b4 <global_stdio_init.part.0+0x38>)
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	4620      	mov	r0, r4
 8002688:	2200      	movs	r2, #0
 800268a:	2104      	movs	r1, #4
 800268c:	f7ff ff94 	bl	80025b8 <std>
 8002690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002694:	2201      	movs	r2, #1
 8002696:	2109      	movs	r1, #9
 8002698:	f7ff ff8e 	bl	80025b8 <std>
 800269c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80026a0:	2202      	movs	r2, #2
 80026a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026a6:	2112      	movs	r1, #18
 80026a8:	f7ff bf86 	b.w	80025b8 <std>
 80026ac:	20001a30 	.word	0x20001a30
 80026b0:	200018f8 	.word	0x200018f8
 80026b4:	08002625 	.word	0x08002625

080026b8 <__sfp_lock_acquire>:
 80026b8:	4801      	ldr	r0, [pc, #4]	@ (80026c0 <__sfp_lock_acquire+0x8>)
 80026ba:	f000 b8fc 	b.w	80028b6 <__retarget_lock_acquire_recursive>
 80026be:	bf00      	nop
 80026c0:	20001a39 	.word	0x20001a39

080026c4 <__sfp_lock_release>:
 80026c4:	4801      	ldr	r0, [pc, #4]	@ (80026cc <__sfp_lock_release+0x8>)
 80026c6:	f000 b8f7 	b.w	80028b8 <__retarget_lock_release_recursive>
 80026ca:	bf00      	nop
 80026cc:	20001a39 	.word	0x20001a39

080026d0 <__sinit>:
 80026d0:	b510      	push	{r4, lr}
 80026d2:	4604      	mov	r4, r0
 80026d4:	f7ff fff0 	bl	80026b8 <__sfp_lock_acquire>
 80026d8:	6a23      	ldr	r3, [r4, #32]
 80026da:	b11b      	cbz	r3, 80026e4 <__sinit+0x14>
 80026dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e0:	f7ff bff0 	b.w	80026c4 <__sfp_lock_release>
 80026e4:	4b04      	ldr	r3, [pc, #16]	@ (80026f8 <__sinit+0x28>)
 80026e6:	6223      	str	r3, [r4, #32]
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <__sinit+0x2c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f5      	bne.n	80026dc <__sinit+0xc>
 80026f0:	f7ff ffc4 	bl	800267c <global_stdio_init.part.0>
 80026f4:	e7f2      	b.n	80026dc <__sinit+0xc>
 80026f6:	bf00      	nop
 80026f8:	0800263d 	.word	0x0800263d
 80026fc:	20001a30 	.word	0x20001a30

08002700 <_fwalk_sglue>:
 8002700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002704:	4607      	mov	r7, r0
 8002706:	4688      	mov	r8, r1
 8002708:	4614      	mov	r4, r2
 800270a:	2600      	movs	r6, #0
 800270c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002710:	f1b9 0901 	subs.w	r9, r9, #1
 8002714:	d505      	bpl.n	8002722 <_fwalk_sglue+0x22>
 8002716:	6824      	ldr	r4, [r4, #0]
 8002718:	2c00      	cmp	r4, #0
 800271a:	d1f7      	bne.n	800270c <_fwalk_sglue+0xc>
 800271c:	4630      	mov	r0, r6
 800271e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002722:	89ab      	ldrh	r3, [r5, #12]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d907      	bls.n	8002738 <_fwalk_sglue+0x38>
 8002728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800272c:	3301      	adds	r3, #1
 800272e:	d003      	beq.n	8002738 <_fwalk_sglue+0x38>
 8002730:	4629      	mov	r1, r5
 8002732:	4638      	mov	r0, r7
 8002734:	47c0      	blx	r8
 8002736:	4306      	orrs	r6, r0
 8002738:	3568      	adds	r5, #104	@ 0x68
 800273a:	e7e9      	b.n	8002710 <_fwalk_sglue+0x10>

0800273c <__sread>:
 800273c:	b510      	push	{r4, lr}
 800273e:	460c      	mov	r4, r1
 8002740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002744:	f000 f868 	bl	8002818 <_read_r>
 8002748:	2800      	cmp	r0, #0
 800274a:	bfab      	itete	ge
 800274c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800274e:	89a3      	ldrhlt	r3, [r4, #12]
 8002750:	181b      	addge	r3, r3, r0
 8002752:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002756:	bfac      	ite	ge
 8002758:	6563      	strge	r3, [r4, #84]	@ 0x54
 800275a:	81a3      	strhlt	r3, [r4, #12]
 800275c:	bd10      	pop	{r4, pc}

0800275e <__swrite>:
 800275e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002762:	461f      	mov	r7, r3
 8002764:	898b      	ldrh	r3, [r1, #12]
 8002766:	05db      	lsls	r3, r3, #23
 8002768:	4605      	mov	r5, r0
 800276a:	460c      	mov	r4, r1
 800276c:	4616      	mov	r6, r2
 800276e:	d505      	bpl.n	800277c <__swrite+0x1e>
 8002770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002774:	2302      	movs	r3, #2
 8002776:	2200      	movs	r2, #0
 8002778:	f000 f83c 	bl	80027f4 <_lseek_r>
 800277c:	89a3      	ldrh	r3, [r4, #12]
 800277e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002782:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002786:	81a3      	strh	r3, [r4, #12]
 8002788:	4632      	mov	r2, r6
 800278a:	463b      	mov	r3, r7
 800278c:	4628      	mov	r0, r5
 800278e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002792:	f000 b853 	b.w	800283c <_write_r>

08002796 <__sseek>:
 8002796:	b510      	push	{r4, lr}
 8002798:	460c      	mov	r4, r1
 800279a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800279e:	f000 f829 	bl	80027f4 <_lseek_r>
 80027a2:	1c43      	adds	r3, r0, #1
 80027a4:	89a3      	ldrh	r3, [r4, #12]
 80027a6:	bf15      	itete	ne
 80027a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80027aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80027ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80027b2:	81a3      	strheq	r3, [r4, #12]
 80027b4:	bf18      	it	ne
 80027b6:	81a3      	strhne	r3, [r4, #12]
 80027b8:	bd10      	pop	{r4, pc}

080027ba <__sclose>:
 80027ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027be:	f000 b809 	b.w	80027d4 <_close_r>

080027c2 <memset>:
 80027c2:	4402      	add	r2, r0
 80027c4:	4603      	mov	r3, r0
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d100      	bne.n	80027cc <memset+0xa>
 80027ca:	4770      	bx	lr
 80027cc:	f803 1b01 	strb.w	r1, [r3], #1
 80027d0:	e7f9      	b.n	80027c6 <memset+0x4>
	...

080027d4 <_close_r>:
 80027d4:	b538      	push	{r3, r4, r5, lr}
 80027d6:	4d06      	ldr	r5, [pc, #24]	@ (80027f0 <_close_r+0x1c>)
 80027d8:	2300      	movs	r3, #0
 80027da:	4604      	mov	r4, r0
 80027dc:	4608      	mov	r0, r1
 80027de:	602b      	str	r3, [r5, #0]
 80027e0:	f7fe f9ff 	bl	8000be2 <_close>
 80027e4:	1c43      	adds	r3, r0, #1
 80027e6:	d102      	bne.n	80027ee <_close_r+0x1a>
 80027e8:	682b      	ldr	r3, [r5, #0]
 80027ea:	b103      	cbz	r3, 80027ee <_close_r+0x1a>
 80027ec:	6023      	str	r3, [r4, #0]
 80027ee:	bd38      	pop	{r3, r4, r5, pc}
 80027f0:	20001a34 	.word	0x20001a34

080027f4 <_lseek_r>:
 80027f4:	b538      	push	{r3, r4, r5, lr}
 80027f6:	4d07      	ldr	r5, [pc, #28]	@ (8002814 <_lseek_r+0x20>)
 80027f8:	4604      	mov	r4, r0
 80027fa:	4608      	mov	r0, r1
 80027fc:	4611      	mov	r1, r2
 80027fe:	2200      	movs	r2, #0
 8002800:	602a      	str	r2, [r5, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	f7fe fa14 	bl	8000c30 <_lseek>
 8002808:	1c43      	adds	r3, r0, #1
 800280a:	d102      	bne.n	8002812 <_lseek_r+0x1e>
 800280c:	682b      	ldr	r3, [r5, #0]
 800280e:	b103      	cbz	r3, 8002812 <_lseek_r+0x1e>
 8002810:	6023      	str	r3, [r4, #0]
 8002812:	bd38      	pop	{r3, r4, r5, pc}
 8002814:	20001a34 	.word	0x20001a34

08002818 <_read_r>:
 8002818:	b538      	push	{r3, r4, r5, lr}
 800281a:	4d07      	ldr	r5, [pc, #28]	@ (8002838 <_read_r+0x20>)
 800281c:	4604      	mov	r4, r0
 800281e:	4608      	mov	r0, r1
 8002820:	4611      	mov	r1, r2
 8002822:	2200      	movs	r2, #0
 8002824:	602a      	str	r2, [r5, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	f7fe f9a2 	bl	8000b70 <_read>
 800282c:	1c43      	adds	r3, r0, #1
 800282e:	d102      	bne.n	8002836 <_read_r+0x1e>
 8002830:	682b      	ldr	r3, [r5, #0]
 8002832:	b103      	cbz	r3, 8002836 <_read_r+0x1e>
 8002834:	6023      	str	r3, [r4, #0]
 8002836:	bd38      	pop	{r3, r4, r5, pc}
 8002838:	20001a34 	.word	0x20001a34

0800283c <_write_r>:
 800283c:	b538      	push	{r3, r4, r5, lr}
 800283e:	4d07      	ldr	r5, [pc, #28]	@ (800285c <_write_r+0x20>)
 8002840:	4604      	mov	r4, r0
 8002842:	4608      	mov	r0, r1
 8002844:	4611      	mov	r1, r2
 8002846:	2200      	movs	r2, #0
 8002848:	602a      	str	r2, [r5, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	f7fe f9ad 	bl	8000baa <_write>
 8002850:	1c43      	adds	r3, r0, #1
 8002852:	d102      	bne.n	800285a <_write_r+0x1e>
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	b103      	cbz	r3, 800285a <_write_r+0x1e>
 8002858:	6023      	str	r3, [r4, #0]
 800285a:	bd38      	pop	{r3, r4, r5, pc}
 800285c:	20001a34 	.word	0x20001a34

08002860 <__errno>:
 8002860:	4b01      	ldr	r3, [pc, #4]	@ (8002868 <__errno+0x8>)
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000030 	.word	0x20000030

0800286c <__libc_init_array>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	4d0d      	ldr	r5, [pc, #52]	@ (80028a4 <__libc_init_array+0x38>)
 8002870:	4c0d      	ldr	r4, [pc, #52]	@ (80028a8 <__libc_init_array+0x3c>)
 8002872:	1b64      	subs	r4, r4, r5
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	2600      	movs	r6, #0
 8002878:	42a6      	cmp	r6, r4
 800287a:	d109      	bne.n	8002890 <__libc_init_array+0x24>
 800287c:	4d0b      	ldr	r5, [pc, #44]	@ (80028ac <__libc_init_array+0x40>)
 800287e:	4c0c      	ldr	r4, [pc, #48]	@ (80028b0 <__libc_init_array+0x44>)
 8002880:	f000 fe3a 	bl	80034f8 <_init>
 8002884:	1b64      	subs	r4, r4, r5
 8002886:	10a4      	asrs	r4, r4, #2
 8002888:	2600      	movs	r6, #0
 800288a:	42a6      	cmp	r6, r4
 800288c:	d105      	bne.n	800289a <__libc_init_array+0x2e>
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	f855 3b04 	ldr.w	r3, [r5], #4
 8002894:	4798      	blx	r3
 8002896:	3601      	adds	r6, #1
 8002898:	e7ee      	b.n	8002878 <__libc_init_array+0xc>
 800289a:	f855 3b04 	ldr.w	r3, [r5], #4
 800289e:	4798      	blx	r3
 80028a0:	3601      	adds	r6, #1
 80028a2:	e7f2      	b.n	800288a <__libc_init_array+0x1e>
 80028a4:	08003638 	.word	0x08003638
 80028a8:	08003638 	.word	0x08003638
 80028ac:	08003638 	.word	0x08003638
 80028b0:	0800363c 	.word	0x0800363c

080028b4 <__retarget_lock_init_recursive>:
 80028b4:	4770      	bx	lr

080028b6 <__retarget_lock_acquire_recursive>:
 80028b6:	4770      	bx	lr

080028b8 <__retarget_lock_release_recursive>:
 80028b8:	4770      	bx	lr
	...

080028bc <__assert_func>:
 80028bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80028be:	4614      	mov	r4, r2
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <__assert_func+0x2c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4605      	mov	r5, r0
 80028c8:	68d8      	ldr	r0, [r3, #12]
 80028ca:	b954      	cbnz	r4, 80028e2 <__assert_func+0x26>
 80028cc:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <__assert_func+0x30>)
 80028ce:	461c      	mov	r4, r3
 80028d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80028d4:	9100      	str	r1, [sp, #0]
 80028d6:	462b      	mov	r3, r5
 80028d8:	4905      	ldr	r1, [pc, #20]	@ (80028f0 <__assert_func+0x34>)
 80028da:	f000 f9b9 	bl	8002c50 <fiprintf>
 80028de:	f000 f9d9 	bl	8002c94 <abort>
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <__assert_func+0x38>)
 80028e4:	e7f4      	b.n	80028d0 <__assert_func+0x14>
 80028e6:	bf00      	nop
 80028e8:	20000030 	.word	0x20000030
 80028ec:	080035fa 	.word	0x080035fa
 80028f0:	080035cc 	.word	0x080035cc
 80028f4:	080035bf 	.word	0x080035bf

080028f8 <_free_r>:
 80028f8:	b538      	push	{r3, r4, r5, lr}
 80028fa:	4605      	mov	r5, r0
 80028fc:	2900      	cmp	r1, #0
 80028fe:	d041      	beq.n	8002984 <_free_r+0x8c>
 8002900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002904:	1f0c      	subs	r4, r1, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	bfb8      	it	lt
 800290a:	18e4      	addlt	r4, r4, r3
 800290c:	f000 f8e8 	bl	8002ae0 <__malloc_lock>
 8002910:	4a1d      	ldr	r2, [pc, #116]	@ (8002988 <_free_r+0x90>)
 8002912:	6813      	ldr	r3, [r2, #0]
 8002914:	b933      	cbnz	r3, 8002924 <_free_r+0x2c>
 8002916:	6063      	str	r3, [r4, #4]
 8002918:	6014      	str	r4, [r2, #0]
 800291a:	4628      	mov	r0, r5
 800291c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002920:	f000 b8e4 	b.w	8002aec <__malloc_unlock>
 8002924:	42a3      	cmp	r3, r4
 8002926:	d908      	bls.n	800293a <_free_r+0x42>
 8002928:	6820      	ldr	r0, [r4, #0]
 800292a:	1821      	adds	r1, r4, r0
 800292c:	428b      	cmp	r3, r1
 800292e:	bf01      	itttt	eq
 8002930:	6819      	ldreq	r1, [r3, #0]
 8002932:	685b      	ldreq	r3, [r3, #4]
 8002934:	1809      	addeq	r1, r1, r0
 8002936:	6021      	streq	r1, [r4, #0]
 8002938:	e7ed      	b.n	8002916 <_free_r+0x1e>
 800293a:	461a      	mov	r2, r3
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b10b      	cbz	r3, 8002944 <_free_r+0x4c>
 8002940:	42a3      	cmp	r3, r4
 8002942:	d9fa      	bls.n	800293a <_free_r+0x42>
 8002944:	6811      	ldr	r1, [r2, #0]
 8002946:	1850      	adds	r0, r2, r1
 8002948:	42a0      	cmp	r0, r4
 800294a:	d10b      	bne.n	8002964 <_free_r+0x6c>
 800294c:	6820      	ldr	r0, [r4, #0]
 800294e:	4401      	add	r1, r0
 8002950:	1850      	adds	r0, r2, r1
 8002952:	4283      	cmp	r3, r0
 8002954:	6011      	str	r1, [r2, #0]
 8002956:	d1e0      	bne.n	800291a <_free_r+0x22>
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	6053      	str	r3, [r2, #4]
 800295e:	4408      	add	r0, r1
 8002960:	6010      	str	r0, [r2, #0]
 8002962:	e7da      	b.n	800291a <_free_r+0x22>
 8002964:	d902      	bls.n	800296c <_free_r+0x74>
 8002966:	230c      	movs	r3, #12
 8002968:	602b      	str	r3, [r5, #0]
 800296a:	e7d6      	b.n	800291a <_free_r+0x22>
 800296c:	6820      	ldr	r0, [r4, #0]
 800296e:	1821      	adds	r1, r4, r0
 8002970:	428b      	cmp	r3, r1
 8002972:	bf04      	itt	eq
 8002974:	6819      	ldreq	r1, [r3, #0]
 8002976:	685b      	ldreq	r3, [r3, #4]
 8002978:	6063      	str	r3, [r4, #4]
 800297a:	bf04      	itt	eq
 800297c:	1809      	addeq	r1, r1, r0
 800297e:	6021      	streq	r1, [r4, #0]
 8002980:	6054      	str	r4, [r2, #4]
 8002982:	e7ca      	b.n	800291a <_free_r+0x22>
 8002984:	bd38      	pop	{r3, r4, r5, pc}
 8002986:	bf00      	nop
 8002988:	20001a40 	.word	0x20001a40

0800298c <malloc>:
 800298c:	4b02      	ldr	r3, [pc, #8]	@ (8002998 <malloc+0xc>)
 800298e:	4601      	mov	r1, r0
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	f000 b825 	b.w	80029e0 <_malloc_r>
 8002996:	bf00      	nop
 8002998:	20000030 	.word	0x20000030

0800299c <sbrk_aligned>:
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	4e0f      	ldr	r6, [pc, #60]	@ (80029dc <sbrk_aligned+0x40>)
 80029a0:	460c      	mov	r4, r1
 80029a2:	6831      	ldr	r1, [r6, #0]
 80029a4:	4605      	mov	r5, r0
 80029a6:	b911      	cbnz	r1, 80029ae <sbrk_aligned+0x12>
 80029a8:	f000 f964 	bl	8002c74 <_sbrk_r>
 80029ac:	6030      	str	r0, [r6, #0]
 80029ae:	4621      	mov	r1, r4
 80029b0:	4628      	mov	r0, r5
 80029b2:	f000 f95f 	bl	8002c74 <_sbrk_r>
 80029b6:	1c43      	adds	r3, r0, #1
 80029b8:	d103      	bne.n	80029c2 <sbrk_aligned+0x26>
 80029ba:	f04f 34ff 	mov.w	r4, #4294967295
 80029be:	4620      	mov	r0, r4
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
 80029c2:	1cc4      	adds	r4, r0, #3
 80029c4:	f024 0403 	bic.w	r4, r4, #3
 80029c8:	42a0      	cmp	r0, r4
 80029ca:	d0f8      	beq.n	80029be <sbrk_aligned+0x22>
 80029cc:	1a21      	subs	r1, r4, r0
 80029ce:	4628      	mov	r0, r5
 80029d0:	f000 f950 	bl	8002c74 <_sbrk_r>
 80029d4:	3001      	adds	r0, #1
 80029d6:	d1f2      	bne.n	80029be <sbrk_aligned+0x22>
 80029d8:	e7ef      	b.n	80029ba <sbrk_aligned+0x1e>
 80029da:	bf00      	nop
 80029dc:	20001a3c 	.word	0x20001a3c

080029e0 <_malloc_r>:
 80029e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029e4:	1ccd      	adds	r5, r1, #3
 80029e6:	f025 0503 	bic.w	r5, r5, #3
 80029ea:	3508      	adds	r5, #8
 80029ec:	2d0c      	cmp	r5, #12
 80029ee:	bf38      	it	cc
 80029f0:	250c      	movcc	r5, #12
 80029f2:	2d00      	cmp	r5, #0
 80029f4:	4606      	mov	r6, r0
 80029f6:	db01      	blt.n	80029fc <_malloc_r+0x1c>
 80029f8:	42a9      	cmp	r1, r5
 80029fa:	d904      	bls.n	8002a06 <_malloc_r+0x26>
 80029fc:	230c      	movs	r3, #12
 80029fe:	6033      	str	r3, [r6, #0]
 8002a00:	2000      	movs	r0, #0
 8002a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002adc <_malloc_r+0xfc>
 8002a0a:	f000 f869 	bl	8002ae0 <__malloc_lock>
 8002a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8002a12:	461c      	mov	r4, r3
 8002a14:	bb44      	cbnz	r4, 8002a68 <_malloc_r+0x88>
 8002a16:	4629      	mov	r1, r5
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f7ff ffbf 	bl	800299c <sbrk_aligned>
 8002a1e:	1c43      	adds	r3, r0, #1
 8002a20:	4604      	mov	r4, r0
 8002a22:	d158      	bne.n	8002ad6 <_malloc_r+0xf6>
 8002a24:	f8d8 4000 	ldr.w	r4, [r8]
 8002a28:	4627      	mov	r7, r4
 8002a2a:	2f00      	cmp	r7, #0
 8002a2c:	d143      	bne.n	8002ab6 <_malloc_r+0xd6>
 8002a2e:	2c00      	cmp	r4, #0
 8002a30:	d04b      	beq.n	8002aca <_malloc_r+0xea>
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	4639      	mov	r1, r7
 8002a36:	4630      	mov	r0, r6
 8002a38:	eb04 0903 	add.w	r9, r4, r3
 8002a3c:	f000 f91a 	bl	8002c74 <_sbrk_r>
 8002a40:	4581      	cmp	r9, r0
 8002a42:	d142      	bne.n	8002aca <_malloc_r+0xea>
 8002a44:	6821      	ldr	r1, [r4, #0]
 8002a46:	1a6d      	subs	r5, r5, r1
 8002a48:	4629      	mov	r1, r5
 8002a4a:	4630      	mov	r0, r6
 8002a4c:	f7ff ffa6 	bl	800299c <sbrk_aligned>
 8002a50:	3001      	adds	r0, #1
 8002a52:	d03a      	beq.n	8002aca <_malloc_r+0xea>
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	442b      	add	r3, r5
 8002a58:	6023      	str	r3, [r4, #0]
 8002a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	bb62      	cbnz	r2, 8002abc <_malloc_r+0xdc>
 8002a62:	f8c8 7000 	str.w	r7, [r8]
 8002a66:	e00f      	b.n	8002a88 <_malloc_r+0xa8>
 8002a68:	6822      	ldr	r2, [r4, #0]
 8002a6a:	1b52      	subs	r2, r2, r5
 8002a6c:	d420      	bmi.n	8002ab0 <_malloc_r+0xd0>
 8002a6e:	2a0b      	cmp	r2, #11
 8002a70:	d917      	bls.n	8002aa2 <_malloc_r+0xc2>
 8002a72:	1961      	adds	r1, r4, r5
 8002a74:	42a3      	cmp	r3, r4
 8002a76:	6025      	str	r5, [r4, #0]
 8002a78:	bf18      	it	ne
 8002a7a:	6059      	strne	r1, [r3, #4]
 8002a7c:	6863      	ldr	r3, [r4, #4]
 8002a7e:	bf08      	it	eq
 8002a80:	f8c8 1000 	streq.w	r1, [r8]
 8002a84:	5162      	str	r2, [r4, r5]
 8002a86:	604b      	str	r3, [r1, #4]
 8002a88:	4630      	mov	r0, r6
 8002a8a:	f000 f82f 	bl	8002aec <__malloc_unlock>
 8002a8e:	f104 000b 	add.w	r0, r4, #11
 8002a92:	1d23      	adds	r3, r4, #4
 8002a94:	f020 0007 	bic.w	r0, r0, #7
 8002a98:	1ac2      	subs	r2, r0, r3
 8002a9a:	bf1c      	itt	ne
 8002a9c:	1a1b      	subne	r3, r3, r0
 8002a9e:	50a3      	strne	r3, [r4, r2]
 8002aa0:	e7af      	b.n	8002a02 <_malloc_r+0x22>
 8002aa2:	6862      	ldr	r2, [r4, #4]
 8002aa4:	42a3      	cmp	r3, r4
 8002aa6:	bf0c      	ite	eq
 8002aa8:	f8c8 2000 	streq.w	r2, [r8]
 8002aac:	605a      	strne	r2, [r3, #4]
 8002aae:	e7eb      	b.n	8002a88 <_malloc_r+0xa8>
 8002ab0:	4623      	mov	r3, r4
 8002ab2:	6864      	ldr	r4, [r4, #4]
 8002ab4:	e7ae      	b.n	8002a14 <_malloc_r+0x34>
 8002ab6:	463c      	mov	r4, r7
 8002ab8:	687f      	ldr	r7, [r7, #4]
 8002aba:	e7b6      	b.n	8002a2a <_malloc_r+0x4a>
 8002abc:	461a      	mov	r2, r3
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	42a3      	cmp	r3, r4
 8002ac2:	d1fb      	bne.n	8002abc <_malloc_r+0xdc>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	6053      	str	r3, [r2, #4]
 8002ac8:	e7de      	b.n	8002a88 <_malloc_r+0xa8>
 8002aca:	230c      	movs	r3, #12
 8002acc:	6033      	str	r3, [r6, #0]
 8002ace:	4630      	mov	r0, r6
 8002ad0:	f000 f80c 	bl	8002aec <__malloc_unlock>
 8002ad4:	e794      	b.n	8002a00 <_malloc_r+0x20>
 8002ad6:	6005      	str	r5, [r0, #0]
 8002ad8:	e7d6      	b.n	8002a88 <_malloc_r+0xa8>
 8002ada:	bf00      	nop
 8002adc:	20001a40 	.word	0x20001a40

08002ae0 <__malloc_lock>:
 8002ae0:	4801      	ldr	r0, [pc, #4]	@ (8002ae8 <__malloc_lock+0x8>)
 8002ae2:	f7ff bee8 	b.w	80028b6 <__retarget_lock_acquire_recursive>
 8002ae6:	bf00      	nop
 8002ae8:	20001a38 	.word	0x20001a38

08002aec <__malloc_unlock>:
 8002aec:	4801      	ldr	r0, [pc, #4]	@ (8002af4 <__malloc_unlock+0x8>)
 8002aee:	f7ff bee3 	b.w	80028b8 <__retarget_lock_release_recursive>
 8002af2:	bf00      	nop
 8002af4:	20001a38 	.word	0x20001a38

08002af8 <__sflush_r>:
 8002af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b00:	0716      	lsls	r6, r2, #28
 8002b02:	4605      	mov	r5, r0
 8002b04:	460c      	mov	r4, r1
 8002b06:	d454      	bmi.n	8002bb2 <__sflush_r+0xba>
 8002b08:	684b      	ldr	r3, [r1, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	dc02      	bgt.n	8002b14 <__sflush_r+0x1c>
 8002b0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	dd48      	ble.n	8002ba6 <__sflush_r+0xae>
 8002b14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b16:	2e00      	cmp	r6, #0
 8002b18:	d045      	beq.n	8002ba6 <__sflush_r+0xae>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002b20:	682f      	ldr	r7, [r5, #0]
 8002b22:	6a21      	ldr	r1, [r4, #32]
 8002b24:	602b      	str	r3, [r5, #0]
 8002b26:	d030      	beq.n	8002b8a <__sflush_r+0x92>
 8002b28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002b2a:	89a3      	ldrh	r3, [r4, #12]
 8002b2c:	0759      	lsls	r1, r3, #29
 8002b2e:	d505      	bpl.n	8002b3c <__sflush_r+0x44>
 8002b30:	6863      	ldr	r3, [r4, #4]
 8002b32:	1ad2      	subs	r2, r2, r3
 8002b34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002b36:	b10b      	cbz	r3, 8002b3c <__sflush_r+0x44>
 8002b38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b3a:	1ad2      	subs	r2, r2, r3
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b40:	6a21      	ldr	r1, [r4, #32]
 8002b42:	4628      	mov	r0, r5
 8002b44:	47b0      	blx	r6
 8002b46:	1c43      	adds	r3, r0, #1
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	d106      	bne.n	8002b5a <__sflush_r+0x62>
 8002b4c:	6829      	ldr	r1, [r5, #0]
 8002b4e:	291d      	cmp	r1, #29
 8002b50:	d82b      	bhi.n	8002baa <__sflush_r+0xb2>
 8002b52:	4a2a      	ldr	r2, [pc, #168]	@ (8002bfc <__sflush_r+0x104>)
 8002b54:	410a      	asrs	r2, r1
 8002b56:	07d6      	lsls	r6, r2, #31
 8002b58:	d427      	bmi.n	8002baa <__sflush_r+0xb2>
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	6062      	str	r2, [r4, #4]
 8002b5e:	04d9      	lsls	r1, r3, #19
 8002b60:	6922      	ldr	r2, [r4, #16]
 8002b62:	6022      	str	r2, [r4, #0]
 8002b64:	d504      	bpl.n	8002b70 <__sflush_r+0x78>
 8002b66:	1c42      	adds	r2, r0, #1
 8002b68:	d101      	bne.n	8002b6e <__sflush_r+0x76>
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	b903      	cbnz	r3, 8002b70 <__sflush_r+0x78>
 8002b6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b72:	602f      	str	r7, [r5, #0]
 8002b74:	b1b9      	cbz	r1, 8002ba6 <__sflush_r+0xae>
 8002b76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b7a:	4299      	cmp	r1, r3
 8002b7c:	d002      	beq.n	8002b84 <__sflush_r+0x8c>
 8002b7e:	4628      	mov	r0, r5
 8002b80:	f7ff feba 	bl	80028f8 <_free_r>
 8002b84:	2300      	movs	r3, #0
 8002b86:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b88:	e00d      	b.n	8002ba6 <__sflush_r+0xae>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	47b0      	blx	r6
 8002b90:	4602      	mov	r2, r0
 8002b92:	1c50      	adds	r0, r2, #1
 8002b94:	d1c9      	bne.n	8002b2a <__sflush_r+0x32>
 8002b96:	682b      	ldr	r3, [r5, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0c6      	beq.n	8002b2a <__sflush_r+0x32>
 8002b9c:	2b1d      	cmp	r3, #29
 8002b9e:	d001      	beq.n	8002ba4 <__sflush_r+0xac>
 8002ba0:	2b16      	cmp	r3, #22
 8002ba2:	d11e      	bne.n	8002be2 <__sflush_r+0xea>
 8002ba4:	602f      	str	r7, [r5, #0]
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	e022      	b.n	8002bf0 <__sflush_r+0xf8>
 8002baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	e01b      	b.n	8002bea <__sflush_r+0xf2>
 8002bb2:	690f      	ldr	r7, [r1, #16]
 8002bb4:	2f00      	cmp	r7, #0
 8002bb6:	d0f6      	beq.n	8002ba6 <__sflush_r+0xae>
 8002bb8:	0793      	lsls	r3, r2, #30
 8002bba:	680e      	ldr	r6, [r1, #0]
 8002bbc:	bf08      	it	eq
 8002bbe:	694b      	ldreq	r3, [r1, #20]
 8002bc0:	600f      	str	r7, [r1, #0]
 8002bc2:	bf18      	it	ne
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	eba6 0807 	sub.w	r8, r6, r7
 8002bca:	608b      	str	r3, [r1, #8]
 8002bcc:	f1b8 0f00 	cmp.w	r8, #0
 8002bd0:	dde9      	ble.n	8002ba6 <__sflush_r+0xae>
 8002bd2:	6a21      	ldr	r1, [r4, #32]
 8002bd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002bd6:	4643      	mov	r3, r8
 8002bd8:	463a      	mov	r2, r7
 8002bda:	4628      	mov	r0, r5
 8002bdc:	47b0      	blx	r6
 8002bde:	2800      	cmp	r0, #0
 8002be0:	dc08      	bgt.n	8002bf4 <__sflush_r+0xfc>
 8002be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bea:	81a3      	strh	r3, [r4, #12]
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bf4:	4407      	add	r7, r0
 8002bf6:	eba8 0800 	sub.w	r8, r8, r0
 8002bfa:	e7e7      	b.n	8002bcc <__sflush_r+0xd4>
 8002bfc:	dfbffffe 	.word	0xdfbffffe

08002c00 <_fflush_r>:
 8002c00:	b538      	push	{r3, r4, r5, lr}
 8002c02:	690b      	ldr	r3, [r1, #16]
 8002c04:	4605      	mov	r5, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	b913      	cbnz	r3, 8002c10 <_fflush_r+0x10>
 8002c0a:	2500      	movs	r5, #0
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	bd38      	pop	{r3, r4, r5, pc}
 8002c10:	b118      	cbz	r0, 8002c1a <_fflush_r+0x1a>
 8002c12:	6a03      	ldr	r3, [r0, #32]
 8002c14:	b90b      	cbnz	r3, 8002c1a <_fflush_r+0x1a>
 8002c16:	f7ff fd5b 	bl	80026d0 <__sinit>
 8002c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f3      	beq.n	8002c0a <_fflush_r+0xa>
 8002c22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002c24:	07d0      	lsls	r0, r2, #31
 8002c26:	d404      	bmi.n	8002c32 <_fflush_r+0x32>
 8002c28:	0599      	lsls	r1, r3, #22
 8002c2a:	d402      	bmi.n	8002c32 <_fflush_r+0x32>
 8002c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c2e:	f7ff fe42 	bl	80028b6 <__retarget_lock_acquire_recursive>
 8002c32:	4628      	mov	r0, r5
 8002c34:	4621      	mov	r1, r4
 8002c36:	f7ff ff5f 	bl	8002af8 <__sflush_r>
 8002c3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c3c:	07da      	lsls	r2, r3, #31
 8002c3e:	4605      	mov	r5, r0
 8002c40:	d4e4      	bmi.n	8002c0c <_fflush_r+0xc>
 8002c42:	89a3      	ldrh	r3, [r4, #12]
 8002c44:	059b      	lsls	r3, r3, #22
 8002c46:	d4e1      	bmi.n	8002c0c <_fflush_r+0xc>
 8002c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c4a:	f7ff fe35 	bl	80028b8 <__retarget_lock_release_recursive>
 8002c4e:	e7dd      	b.n	8002c0c <_fflush_r+0xc>

08002c50 <fiprintf>:
 8002c50:	b40e      	push	{r1, r2, r3}
 8002c52:	b503      	push	{r0, r1, lr}
 8002c54:	4601      	mov	r1, r0
 8002c56:	ab03      	add	r3, sp, #12
 8002c58:	4805      	ldr	r0, [pc, #20]	@ (8002c70 <fiprintf+0x20>)
 8002c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c5e:	6800      	ldr	r0, [r0, #0]
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	f000 f847 	bl	8002cf4 <_vfiprintf_r>
 8002c66:	b002      	add	sp, #8
 8002c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c6c:	b003      	add	sp, #12
 8002c6e:	4770      	bx	lr
 8002c70:	20000030 	.word	0x20000030

08002c74 <_sbrk_r>:
 8002c74:	b538      	push	{r3, r4, r5, lr}
 8002c76:	4d06      	ldr	r5, [pc, #24]	@ (8002c90 <_sbrk_r+0x1c>)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	602b      	str	r3, [r5, #0]
 8002c80:	f7fd ffe4 	bl	8000c4c <_sbrk>
 8002c84:	1c43      	adds	r3, r0, #1
 8002c86:	d102      	bne.n	8002c8e <_sbrk_r+0x1a>
 8002c88:	682b      	ldr	r3, [r5, #0]
 8002c8a:	b103      	cbz	r3, 8002c8e <_sbrk_r+0x1a>
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	bd38      	pop	{r3, r4, r5, pc}
 8002c90:	20001a34 	.word	0x20001a34

08002c94 <abort>:
 8002c94:	b508      	push	{r3, lr}
 8002c96:	2006      	movs	r0, #6
 8002c98:	f000 fb8e 	bl	80033b8 <raise>
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f7fd ff5c 	bl	8000b5a <_exit>

08002ca2 <__sfputc_r>:
 8002ca2:	6893      	ldr	r3, [r2, #8]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	b410      	push	{r4}
 8002caa:	6093      	str	r3, [r2, #8]
 8002cac:	da08      	bge.n	8002cc0 <__sfputc_r+0x1e>
 8002cae:	6994      	ldr	r4, [r2, #24]
 8002cb0:	42a3      	cmp	r3, r4
 8002cb2:	db01      	blt.n	8002cb8 <__sfputc_r+0x16>
 8002cb4:	290a      	cmp	r1, #10
 8002cb6:	d103      	bne.n	8002cc0 <__sfputc_r+0x1e>
 8002cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cbc:	f000 bac0 	b.w	8003240 <__swbuf_r>
 8002cc0:	6813      	ldr	r3, [r2, #0]
 8002cc2:	1c58      	adds	r0, r3, #1
 8002cc4:	6010      	str	r0, [r2, #0]
 8002cc6:	7019      	strb	r1, [r3, #0]
 8002cc8:	4608      	mov	r0, r1
 8002cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <__sfputs_r>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	4606      	mov	r6, r0
 8002cd4:	460f      	mov	r7, r1
 8002cd6:	4614      	mov	r4, r2
 8002cd8:	18d5      	adds	r5, r2, r3
 8002cda:	42ac      	cmp	r4, r5
 8002cdc:	d101      	bne.n	8002ce2 <__sfputs_r+0x12>
 8002cde:	2000      	movs	r0, #0
 8002ce0:	e007      	b.n	8002cf2 <__sfputs_r+0x22>
 8002ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ce6:	463a      	mov	r2, r7
 8002ce8:	4630      	mov	r0, r6
 8002cea:	f7ff ffda 	bl	8002ca2 <__sfputc_r>
 8002cee:	1c43      	adds	r3, r0, #1
 8002cf0:	d1f3      	bne.n	8002cda <__sfputs_r+0xa>
 8002cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002cf4 <_vfiprintf_r>:
 8002cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf8:	460d      	mov	r5, r1
 8002cfa:	b09d      	sub	sp, #116	@ 0x74
 8002cfc:	4614      	mov	r4, r2
 8002cfe:	4698      	mov	r8, r3
 8002d00:	4606      	mov	r6, r0
 8002d02:	b118      	cbz	r0, 8002d0c <_vfiprintf_r+0x18>
 8002d04:	6a03      	ldr	r3, [r0, #32]
 8002d06:	b90b      	cbnz	r3, 8002d0c <_vfiprintf_r+0x18>
 8002d08:	f7ff fce2 	bl	80026d0 <__sinit>
 8002d0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d0e:	07d9      	lsls	r1, r3, #31
 8002d10:	d405      	bmi.n	8002d1e <_vfiprintf_r+0x2a>
 8002d12:	89ab      	ldrh	r3, [r5, #12]
 8002d14:	059a      	lsls	r2, r3, #22
 8002d16:	d402      	bmi.n	8002d1e <_vfiprintf_r+0x2a>
 8002d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d1a:	f7ff fdcc 	bl	80028b6 <__retarget_lock_acquire_recursive>
 8002d1e:	89ab      	ldrh	r3, [r5, #12]
 8002d20:	071b      	lsls	r3, r3, #28
 8002d22:	d501      	bpl.n	8002d28 <_vfiprintf_r+0x34>
 8002d24:	692b      	ldr	r3, [r5, #16]
 8002d26:	b99b      	cbnz	r3, 8002d50 <_vfiprintf_r+0x5c>
 8002d28:	4629      	mov	r1, r5
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	f000 fac6 	bl	80032bc <__swsetup_r>
 8002d30:	b170      	cbz	r0, 8002d50 <_vfiprintf_r+0x5c>
 8002d32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d34:	07dc      	lsls	r4, r3, #31
 8002d36:	d504      	bpl.n	8002d42 <_vfiprintf_r+0x4e>
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	b01d      	add	sp, #116	@ 0x74
 8002d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d42:	89ab      	ldrh	r3, [r5, #12]
 8002d44:	0598      	lsls	r0, r3, #22
 8002d46:	d4f7      	bmi.n	8002d38 <_vfiprintf_r+0x44>
 8002d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d4a:	f7ff fdb5 	bl	80028b8 <__retarget_lock_release_recursive>
 8002d4e:	e7f3      	b.n	8002d38 <_vfiprintf_r+0x44>
 8002d50:	2300      	movs	r3, #0
 8002d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d54:	2320      	movs	r3, #32
 8002d56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d5e:	2330      	movs	r3, #48	@ 0x30
 8002d60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002f10 <_vfiprintf_r+0x21c>
 8002d64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d68:	f04f 0901 	mov.w	r9, #1
 8002d6c:	4623      	mov	r3, r4
 8002d6e:	469a      	mov	sl, r3
 8002d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d74:	b10a      	cbz	r2, 8002d7a <_vfiprintf_r+0x86>
 8002d76:	2a25      	cmp	r2, #37	@ 0x25
 8002d78:	d1f9      	bne.n	8002d6e <_vfiprintf_r+0x7a>
 8002d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8002d7e:	d00b      	beq.n	8002d98 <_vfiprintf_r+0xa4>
 8002d80:	465b      	mov	r3, fp
 8002d82:	4622      	mov	r2, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	4630      	mov	r0, r6
 8002d88:	f7ff ffa2 	bl	8002cd0 <__sfputs_r>
 8002d8c:	3001      	adds	r0, #1
 8002d8e:	f000 80a7 	beq.w	8002ee0 <_vfiprintf_r+0x1ec>
 8002d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d94:	445a      	add	r2, fp
 8002d96:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d98:	f89a 3000 	ldrb.w	r3, [sl]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 809f 	beq.w	8002ee0 <_vfiprintf_r+0x1ec>
 8002da2:	2300      	movs	r3, #0
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dac:	f10a 0a01 	add.w	sl, sl, #1
 8002db0:	9304      	str	r3, [sp, #16]
 8002db2:	9307      	str	r3, [sp, #28]
 8002db4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002db8:	931a      	str	r3, [sp, #104]	@ 0x68
 8002dba:	4654      	mov	r4, sl
 8002dbc:	2205      	movs	r2, #5
 8002dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dc2:	4853      	ldr	r0, [pc, #332]	@ (8002f10 <_vfiprintf_r+0x21c>)
 8002dc4:	f7fd fa1c 	bl	8000200 <memchr>
 8002dc8:	9a04      	ldr	r2, [sp, #16]
 8002dca:	b9d8      	cbnz	r0, 8002e04 <_vfiprintf_r+0x110>
 8002dcc:	06d1      	lsls	r1, r2, #27
 8002dce:	bf44      	itt	mi
 8002dd0:	2320      	movmi	r3, #32
 8002dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002dd6:	0713      	lsls	r3, r2, #28
 8002dd8:	bf44      	itt	mi
 8002dda:	232b      	movmi	r3, #43	@ 0x2b
 8002ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002de0:	f89a 3000 	ldrb.w	r3, [sl]
 8002de4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002de6:	d015      	beq.n	8002e14 <_vfiprintf_r+0x120>
 8002de8:	9a07      	ldr	r2, [sp, #28]
 8002dea:	4654      	mov	r4, sl
 8002dec:	2000      	movs	r0, #0
 8002dee:	f04f 0c0a 	mov.w	ip, #10
 8002df2:	4621      	mov	r1, r4
 8002df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002df8:	3b30      	subs	r3, #48	@ 0x30
 8002dfa:	2b09      	cmp	r3, #9
 8002dfc:	d94b      	bls.n	8002e96 <_vfiprintf_r+0x1a2>
 8002dfe:	b1b0      	cbz	r0, 8002e2e <_vfiprintf_r+0x13a>
 8002e00:	9207      	str	r2, [sp, #28]
 8002e02:	e014      	b.n	8002e2e <_vfiprintf_r+0x13a>
 8002e04:	eba0 0308 	sub.w	r3, r0, r8
 8002e08:	fa09 f303 	lsl.w	r3, r9, r3
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	9304      	str	r3, [sp, #16]
 8002e10:	46a2      	mov	sl, r4
 8002e12:	e7d2      	b.n	8002dba <_vfiprintf_r+0xc6>
 8002e14:	9b03      	ldr	r3, [sp, #12]
 8002e16:	1d19      	adds	r1, r3, #4
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	9103      	str	r1, [sp, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bfbb      	ittet	lt
 8002e20:	425b      	neglt	r3, r3
 8002e22:	f042 0202 	orrlt.w	r2, r2, #2
 8002e26:	9307      	strge	r3, [sp, #28]
 8002e28:	9307      	strlt	r3, [sp, #28]
 8002e2a:	bfb8      	it	lt
 8002e2c:	9204      	strlt	r2, [sp, #16]
 8002e2e:	7823      	ldrb	r3, [r4, #0]
 8002e30:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e32:	d10a      	bne.n	8002e4a <_vfiprintf_r+0x156>
 8002e34:	7863      	ldrb	r3, [r4, #1]
 8002e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e38:	d132      	bne.n	8002ea0 <_vfiprintf_r+0x1ac>
 8002e3a:	9b03      	ldr	r3, [sp, #12]
 8002e3c:	1d1a      	adds	r2, r3, #4
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	9203      	str	r2, [sp, #12]
 8002e42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e46:	3402      	adds	r4, #2
 8002e48:	9305      	str	r3, [sp, #20]
 8002e4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002f20 <_vfiprintf_r+0x22c>
 8002e4e:	7821      	ldrb	r1, [r4, #0]
 8002e50:	2203      	movs	r2, #3
 8002e52:	4650      	mov	r0, sl
 8002e54:	f7fd f9d4 	bl	8000200 <memchr>
 8002e58:	b138      	cbz	r0, 8002e6a <_vfiprintf_r+0x176>
 8002e5a:	9b04      	ldr	r3, [sp, #16]
 8002e5c:	eba0 000a 	sub.w	r0, r0, sl
 8002e60:	2240      	movs	r2, #64	@ 0x40
 8002e62:	4082      	lsls	r2, r0
 8002e64:	4313      	orrs	r3, r2
 8002e66:	3401      	adds	r4, #1
 8002e68:	9304      	str	r3, [sp, #16]
 8002e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e6e:	4829      	ldr	r0, [pc, #164]	@ (8002f14 <_vfiprintf_r+0x220>)
 8002e70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e74:	2206      	movs	r2, #6
 8002e76:	f7fd f9c3 	bl	8000200 <memchr>
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d03f      	beq.n	8002efe <_vfiprintf_r+0x20a>
 8002e7e:	4b26      	ldr	r3, [pc, #152]	@ (8002f18 <_vfiprintf_r+0x224>)
 8002e80:	bb1b      	cbnz	r3, 8002eca <_vfiprintf_r+0x1d6>
 8002e82:	9b03      	ldr	r3, [sp, #12]
 8002e84:	3307      	adds	r3, #7
 8002e86:	f023 0307 	bic.w	r3, r3, #7
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	9303      	str	r3, [sp, #12]
 8002e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e90:	443b      	add	r3, r7
 8002e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e94:	e76a      	b.n	8002d6c <_vfiprintf_r+0x78>
 8002e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	e7a8      	b.n	8002df2 <_vfiprintf_r+0xfe>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	3401      	adds	r4, #1
 8002ea4:	9305      	str	r3, [sp, #20]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f04f 0c0a 	mov.w	ip, #10
 8002eac:	4620      	mov	r0, r4
 8002eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eb2:	3a30      	subs	r2, #48	@ 0x30
 8002eb4:	2a09      	cmp	r2, #9
 8002eb6:	d903      	bls.n	8002ec0 <_vfiprintf_r+0x1cc>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0c6      	beq.n	8002e4a <_vfiprintf_r+0x156>
 8002ebc:	9105      	str	r1, [sp, #20]
 8002ebe:	e7c4      	b.n	8002e4a <_vfiprintf_r+0x156>
 8002ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ec4:	4604      	mov	r4, r0
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e7f0      	b.n	8002eac <_vfiprintf_r+0x1b8>
 8002eca:	ab03      	add	r3, sp, #12
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	462a      	mov	r2, r5
 8002ed0:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <_vfiprintf_r+0x228>)
 8002ed2:	a904      	add	r1, sp, #16
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	f3af 8000 	nop.w
 8002eda:	4607      	mov	r7, r0
 8002edc:	1c78      	adds	r0, r7, #1
 8002ede:	d1d6      	bne.n	8002e8e <_vfiprintf_r+0x19a>
 8002ee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ee2:	07d9      	lsls	r1, r3, #31
 8002ee4:	d405      	bmi.n	8002ef2 <_vfiprintf_r+0x1fe>
 8002ee6:	89ab      	ldrh	r3, [r5, #12]
 8002ee8:	059a      	lsls	r2, r3, #22
 8002eea:	d402      	bmi.n	8002ef2 <_vfiprintf_r+0x1fe>
 8002eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002eee:	f7ff fce3 	bl	80028b8 <__retarget_lock_release_recursive>
 8002ef2:	89ab      	ldrh	r3, [r5, #12]
 8002ef4:	065b      	lsls	r3, r3, #25
 8002ef6:	f53f af1f 	bmi.w	8002d38 <_vfiprintf_r+0x44>
 8002efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002efc:	e71e      	b.n	8002d3c <_vfiprintf_r+0x48>
 8002efe:	ab03      	add	r3, sp, #12
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	462a      	mov	r2, r5
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <_vfiprintf_r+0x228>)
 8002f06:	a904      	add	r1, sp, #16
 8002f08:	4630      	mov	r0, r6
 8002f0a:	f000 f879 	bl	8003000 <_printf_i>
 8002f0e:	e7e4      	b.n	8002eda <_vfiprintf_r+0x1e6>
 8002f10:	080035fb 	.word	0x080035fb
 8002f14:	08003605 	.word	0x08003605
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	08002cd1 	.word	0x08002cd1
 8002f20:	08003601 	.word	0x08003601

08002f24 <_printf_common>:
 8002f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f28:	4616      	mov	r6, r2
 8002f2a:	4698      	mov	r8, r3
 8002f2c:	688a      	ldr	r2, [r1, #8]
 8002f2e:	690b      	ldr	r3, [r1, #16]
 8002f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bfb8      	it	lt
 8002f38:	4613      	movlt	r3, r2
 8002f3a:	6033      	str	r3, [r6, #0]
 8002f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f40:	4607      	mov	r7, r0
 8002f42:	460c      	mov	r4, r1
 8002f44:	b10a      	cbz	r2, 8002f4a <_printf_common+0x26>
 8002f46:	3301      	adds	r3, #1
 8002f48:	6033      	str	r3, [r6, #0]
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	0699      	lsls	r1, r3, #26
 8002f4e:	bf42      	ittt	mi
 8002f50:	6833      	ldrmi	r3, [r6, #0]
 8002f52:	3302      	addmi	r3, #2
 8002f54:	6033      	strmi	r3, [r6, #0]
 8002f56:	6825      	ldr	r5, [r4, #0]
 8002f58:	f015 0506 	ands.w	r5, r5, #6
 8002f5c:	d106      	bne.n	8002f6c <_printf_common+0x48>
 8002f5e:	f104 0a19 	add.w	sl, r4, #25
 8002f62:	68e3      	ldr	r3, [r4, #12]
 8002f64:	6832      	ldr	r2, [r6, #0]
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	42ab      	cmp	r3, r5
 8002f6a:	dc26      	bgt.n	8002fba <_printf_common+0x96>
 8002f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f70:	6822      	ldr	r2, [r4, #0]
 8002f72:	3b00      	subs	r3, #0
 8002f74:	bf18      	it	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	0692      	lsls	r2, r2, #26
 8002f7a:	d42b      	bmi.n	8002fd4 <_printf_common+0xb0>
 8002f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f80:	4641      	mov	r1, r8
 8002f82:	4638      	mov	r0, r7
 8002f84:	47c8      	blx	r9
 8002f86:	3001      	adds	r0, #1
 8002f88:	d01e      	beq.n	8002fc8 <_printf_common+0xa4>
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	6922      	ldr	r2, [r4, #16]
 8002f8e:	f003 0306 	and.w	r3, r3, #6
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	bf02      	ittt	eq
 8002f96:	68e5      	ldreq	r5, [r4, #12]
 8002f98:	6833      	ldreq	r3, [r6, #0]
 8002f9a:	1aed      	subeq	r5, r5, r3
 8002f9c:	68a3      	ldr	r3, [r4, #8]
 8002f9e:	bf0c      	ite	eq
 8002fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fa4:	2500      	movne	r5, #0
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	bfc4      	itt	gt
 8002faa:	1a9b      	subgt	r3, r3, r2
 8002fac:	18ed      	addgt	r5, r5, r3
 8002fae:	2600      	movs	r6, #0
 8002fb0:	341a      	adds	r4, #26
 8002fb2:	42b5      	cmp	r5, r6
 8002fb4:	d11a      	bne.n	8002fec <_printf_common+0xc8>
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	e008      	b.n	8002fcc <_printf_common+0xa8>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	4652      	mov	r2, sl
 8002fbe:	4641      	mov	r1, r8
 8002fc0:	4638      	mov	r0, r7
 8002fc2:	47c8      	blx	r9
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	d103      	bne.n	8002fd0 <_printf_common+0xac>
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd0:	3501      	adds	r5, #1
 8002fd2:	e7c6      	b.n	8002f62 <_printf_common+0x3e>
 8002fd4:	18e1      	adds	r1, r4, r3
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	2030      	movs	r0, #48	@ 0x30
 8002fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002fde:	4422      	add	r2, r4
 8002fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002fe8:	3302      	adds	r3, #2
 8002fea:	e7c7      	b.n	8002f7c <_printf_common+0x58>
 8002fec:	2301      	movs	r3, #1
 8002fee:	4622      	mov	r2, r4
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	4638      	mov	r0, r7
 8002ff4:	47c8      	blx	r9
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	d0e6      	beq.n	8002fc8 <_printf_common+0xa4>
 8002ffa:	3601      	adds	r6, #1
 8002ffc:	e7d9      	b.n	8002fb2 <_printf_common+0x8e>
	...

08003000 <_printf_i>:
 8003000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003004:	7e0f      	ldrb	r7, [r1, #24]
 8003006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003008:	2f78      	cmp	r7, #120	@ 0x78
 800300a:	4691      	mov	r9, r2
 800300c:	4680      	mov	r8, r0
 800300e:	460c      	mov	r4, r1
 8003010:	469a      	mov	sl, r3
 8003012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003016:	d807      	bhi.n	8003028 <_printf_i+0x28>
 8003018:	2f62      	cmp	r7, #98	@ 0x62
 800301a:	d80a      	bhi.n	8003032 <_printf_i+0x32>
 800301c:	2f00      	cmp	r7, #0
 800301e:	f000 80d2 	beq.w	80031c6 <_printf_i+0x1c6>
 8003022:	2f58      	cmp	r7, #88	@ 0x58
 8003024:	f000 80b9 	beq.w	800319a <_printf_i+0x19a>
 8003028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800302c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003030:	e03a      	b.n	80030a8 <_printf_i+0xa8>
 8003032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003036:	2b15      	cmp	r3, #21
 8003038:	d8f6      	bhi.n	8003028 <_printf_i+0x28>
 800303a:	a101      	add	r1, pc, #4	@ (adr r1, 8003040 <_printf_i+0x40>)
 800303c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003040:	08003099 	.word	0x08003099
 8003044:	080030ad 	.word	0x080030ad
 8003048:	08003029 	.word	0x08003029
 800304c:	08003029 	.word	0x08003029
 8003050:	08003029 	.word	0x08003029
 8003054:	08003029 	.word	0x08003029
 8003058:	080030ad 	.word	0x080030ad
 800305c:	08003029 	.word	0x08003029
 8003060:	08003029 	.word	0x08003029
 8003064:	08003029 	.word	0x08003029
 8003068:	08003029 	.word	0x08003029
 800306c:	080031ad 	.word	0x080031ad
 8003070:	080030d7 	.word	0x080030d7
 8003074:	08003167 	.word	0x08003167
 8003078:	08003029 	.word	0x08003029
 800307c:	08003029 	.word	0x08003029
 8003080:	080031cf 	.word	0x080031cf
 8003084:	08003029 	.word	0x08003029
 8003088:	080030d7 	.word	0x080030d7
 800308c:	08003029 	.word	0x08003029
 8003090:	08003029 	.word	0x08003029
 8003094:	0800316f 	.word	0x0800316f
 8003098:	6833      	ldr	r3, [r6, #0]
 800309a:	1d1a      	adds	r2, r3, #4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6032      	str	r2, [r6, #0]
 80030a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030a8:	2301      	movs	r3, #1
 80030aa:	e09d      	b.n	80031e8 <_printf_i+0x1e8>
 80030ac:	6833      	ldr	r3, [r6, #0]
 80030ae:	6820      	ldr	r0, [r4, #0]
 80030b0:	1d19      	adds	r1, r3, #4
 80030b2:	6031      	str	r1, [r6, #0]
 80030b4:	0606      	lsls	r6, r0, #24
 80030b6:	d501      	bpl.n	80030bc <_printf_i+0xbc>
 80030b8:	681d      	ldr	r5, [r3, #0]
 80030ba:	e003      	b.n	80030c4 <_printf_i+0xc4>
 80030bc:	0645      	lsls	r5, r0, #25
 80030be:	d5fb      	bpl.n	80030b8 <_printf_i+0xb8>
 80030c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80030c4:	2d00      	cmp	r5, #0
 80030c6:	da03      	bge.n	80030d0 <_printf_i+0xd0>
 80030c8:	232d      	movs	r3, #45	@ 0x2d
 80030ca:	426d      	negs	r5, r5
 80030cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030d0:	4859      	ldr	r0, [pc, #356]	@ (8003238 <_printf_i+0x238>)
 80030d2:	230a      	movs	r3, #10
 80030d4:	e011      	b.n	80030fa <_printf_i+0xfa>
 80030d6:	6821      	ldr	r1, [r4, #0]
 80030d8:	6833      	ldr	r3, [r6, #0]
 80030da:	0608      	lsls	r0, r1, #24
 80030dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80030e0:	d402      	bmi.n	80030e8 <_printf_i+0xe8>
 80030e2:	0649      	lsls	r1, r1, #25
 80030e4:	bf48      	it	mi
 80030e6:	b2ad      	uxthmi	r5, r5
 80030e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80030ea:	4853      	ldr	r0, [pc, #332]	@ (8003238 <_printf_i+0x238>)
 80030ec:	6033      	str	r3, [r6, #0]
 80030ee:	bf14      	ite	ne
 80030f0:	230a      	movne	r3, #10
 80030f2:	2308      	moveq	r3, #8
 80030f4:	2100      	movs	r1, #0
 80030f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030fa:	6866      	ldr	r6, [r4, #4]
 80030fc:	60a6      	str	r6, [r4, #8]
 80030fe:	2e00      	cmp	r6, #0
 8003100:	bfa2      	ittt	ge
 8003102:	6821      	ldrge	r1, [r4, #0]
 8003104:	f021 0104 	bicge.w	r1, r1, #4
 8003108:	6021      	strge	r1, [r4, #0]
 800310a:	b90d      	cbnz	r5, 8003110 <_printf_i+0x110>
 800310c:	2e00      	cmp	r6, #0
 800310e:	d04b      	beq.n	80031a8 <_printf_i+0x1a8>
 8003110:	4616      	mov	r6, r2
 8003112:	fbb5 f1f3 	udiv	r1, r5, r3
 8003116:	fb03 5711 	mls	r7, r3, r1, r5
 800311a:	5dc7      	ldrb	r7, [r0, r7]
 800311c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003120:	462f      	mov	r7, r5
 8003122:	42bb      	cmp	r3, r7
 8003124:	460d      	mov	r5, r1
 8003126:	d9f4      	bls.n	8003112 <_printf_i+0x112>
 8003128:	2b08      	cmp	r3, #8
 800312a:	d10b      	bne.n	8003144 <_printf_i+0x144>
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	07df      	lsls	r7, r3, #31
 8003130:	d508      	bpl.n	8003144 <_printf_i+0x144>
 8003132:	6923      	ldr	r3, [r4, #16]
 8003134:	6861      	ldr	r1, [r4, #4]
 8003136:	4299      	cmp	r1, r3
 8003138:	bfde      	ittt	le
 800313a:	2330      	movle	r3, #48	@ 0x30
 800313c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003140:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003144:	1b92      	subs	r2, r2, r6
 8003146:	6122      	str	r2, [r4, #16]
 8003148:	f8cd a000 	str.w	sl, [sp]
 800314c:	464b      	mov	r3, r9
 800314e:	aa03      	add	r2, sp, #12
 8003150:	4621      	mov	r1, r4
 8003152:	4640      	mov	r0, r8
 8003154:	f7ff fee6 	bl	8002f24 <_printf_common>
 8003158:	3001      	adds	r0, #1
 800315a:	d14a      	bne.n	80031f2 <_printf_i+0x1f2>
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	b004      	add	sp, #16
 8003162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	f043 0320 	orr.w	r3, r3, #32
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	4833      	ldr	r0, [pc, #204]	@ (800323c <_printf_i+0x23c>)
 8003170:	2778      	movs	r7, #120	@ 0x78
 8003172:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	6831      	ldr	r1, [r6, #0]
 800317a:	061f      	lsls	r7, r3, #24
 800317c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003180:	d402      	bmi.n	8003188 <_printf_i+0x188>
 8003182:	065f      	lsls	r7, r3, #25
 8003184:	bf48      	it	mi
 8003186:	b2ad      	uxthmi	r5, r5
 8003188:	6031      	str	r1, [r6, #0]
 800318a:	07d9      	lsls	r1, r3, #31
 800318c:	bf44      	itt	mi
 800318e:	f043 0320 	orrmi.w	r3, r3, #32
 8003192:	6023      	strmi	r3, [r4, #0]
 8003194:	b11d      	cbz	r5, 800319e <_printf_i+0x19e>
 8003196:	2310      	movs	r3, #16
 8003198:	e7ac      	b.n	80030f4 <_printf_i+0xf4>
 800319a:	4827      	ldr	r0, [pc, #156]	@ (8003238 <_printf_i+0x238>)
 800319c:	e7e9      	b.n	8003172 <_printf_i+0x172>
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	f023 0320 	bic.w	r3, r3, #32
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	e7f6      	b.n	8003196 <_printf_i+0x196>
 80031a8:	4616      	mov	r6, r2
 80031aa:	e7bd      	b.n	8003128 <_printf_i+0x128>
 80031ac:	6833      	ldr	r3, [r6, #0]
 80031ae:	6825      	ldr	r5, [r4, #0]
 80031b0:	6961      	ldr	r1, [r4, #20]
 80031b2:	1d18      	adds	r0, r3, #4
 80031b4:	6030      	str	r0, [r6, #0]
 80031b6:	062e      	lsls	r6, r5, #24
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	d501      	bpl.n	80031c0 <_printf_i+0x1c0>
 80031bc:	6019      	str	r1, [r3, #0]
 80031be:	e002      	b.n	80031c6 <_printf_i+0x1c6>
 80031c0:	0668      	lsls	r0, r5, #25
 80031c2:	d5fb      	bpl.n	80031bc <_printf_i+0x1bc>
 80031c4:	8019      	strh	r1, [r3, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	6123      	str	r3, [r4, #16]
 80031ca:	4616      	mov	r6, r2
 80031cc:	e7bc      	b.n	8003148 <_printf_i+0x148>
 80031ce:	6833      	ldr	r3, [r6, #0]
 80031d0:	1d1a      	adds	r2, r3, #4
 80031d2:	6032      	str	r2, [r6, #0]
 80031d4:	681e      	ldr	r6, [r3, #0]
 80031d6:	6862      	ldr	r2, [r4, #4]
 80031d8:	2100      	movs	r1, #0
 80031da:	4630      	mov	r0, r6
 80031dc:	f7fd f810 	bl	8000200 <memchr>
 80031e0:	b108      	cbz	r0, 80031e6 <_printf_i+0x1e6>
 80031e2:	1b80      	subs	r0, r0, r6
 80031e4:	6060      	str	r0, [r4, #4]
 80031e6:	6863      	ldr	r3, [r4, #4]
 80031e8:	6123      	str	r3, [r4, #16]
 80031ea:	2300      	movs	r3, #0
 80031ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031f0:	e7aa      	b.n	8003148 <_printf_i+0x148>
 80031f2:	6923      	ldr	r3, [r4, #16]
 80031f4:	4632      	mov	r2, r6
 80031f6:	4649      	mov	r1, r9
 80031f8:	4640      	mov	r0, r8
 80031fa:	47d0      	blx	sl
 80031fc:	3001      	adds	r0, #1
 80031fe:	d0ad      	beq.n	800315c <_printf_i+0x15c>
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	079b      	lsls	r3, r3, #30
 8003204:	d413      	bmi.n	800322e <_printf_i+0x22e>
 8003206:	68e0      	ldr	r0, [r4, #12]
 8003208:	9b03      	ldr	r3, [sp, #12]
 800320a:	4298      	cmp	r0, r3
 800320c:	bfb8      	it	lt
 800320e:	4618      	movlt	r0, r3
 8003210:	e7a6      	b.n	8003160 <_printf_i+0x160>
 8003212:	2301      	movs	r3, #1
 8003214:	4632      	mov	r2, r6
 8003216:	4649      	mov	r1, r9
 8003218:	4640      	mov	r0, r8
 800321a:	47d0      	blx	sl
 800321c:	3001      	adds	r0, #1
 800321e:	d09d      	beq.n	800315c <_printf_i+0x15c>
 8003220:	3501      	adds	r5, #1
 8003222:	68e3      	ldr	r3, [r4, #12]
 8003224:	9903      	ldr	r1, [sp, #12]
 8003226:	1a5b      	subs	r3, r3, r1
 8003228:	42ab      	cmp	r3, r5
 800322a:	dcf2      	bgt.n	8003212 <_printf_i+0x212>
 800322c:	e7eb      	b.n	8003206 <_printf_i+0x206>
 800322e:	2500      	movs	r5, #0
 8003230:	f104 0619 	add.w	r6, r4, #25
 8003234:	e7f5      	b.n	8003222 <_printf_i+0x222>
 8003236:	bf00      	nop
 8003238:	0800360c 	.word	0x0800360c
 800323c:	0800361d 	.word	0x0800361d

08003240 <__swbuf_r>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	460e      	mov	r6, r1
 8003244:	4614      	mov	r4, r2
 8003246:	4605      	mov	r5, r0
 8003248:	b118      	cbz	r0, 8003252 <__swbuf_r+0x12>
 800324a:	6a03      	ldr	r3, [r0, #32]
 800324c:	b90b      	cbnz	r3, 8003252 <__swbuf_r+0x12>
 800324e:	f7ff fa3f 	bl	80026d0 <__sinit>
 8003252:	69a3      	ldr	r3, [r4, #24]
 8003254:	60a3      	str	r3, [r4, #8]
 8003256:	89a3      	ldrh	r3, [r4, #12]
 8003258:	071a      	lsls	r2, r3, #28
 800325a:	d501      	bpl.n	8003260 <__swbuf_r+0x20>
 800325c:	6923      	ldr	r3, [r4, #16]
 800325e:	b943      	cbnz	r3, 8003272 <__swbuf_r+0x32>
 8003260:	4621      	mov	r1, r4
 8003262:	4628      	mov	r0, r5
 8003264:	f000 f82a 	bl	80032bc <__swsetup_r>
 8003268:	b118      	cbz	r0, 8003272 <__swbuf_r+0x32>
 800326a:	f04f 37ff 	mov.w	r7, #4294967295
 800326e:	4638      	mov	r0, r7
 8003270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	6922      	ldr	r2, [r4, #16]
 8003276:	1a98      	subs	r0, r3, r2
 8003278:	6963      	ldr	r3, [r4, #20]
 800327a:	b2f6      	uxtb	r6, r6
 800327c:	4283      	cmp	r3, r0
 800327e:	4637      	mov	r7, r6
 8003280:	dc05      	bgt.n	800328e <__swbuf_r+0x4e>
 8003282:	4621      	mov	r1, r4
 8003284:	4628      	mov	r0, r5
 8003286:	f7ff fcbb 	bl	8002c00 <_fflush_r>
 800328a:	2800      	cmp	r0, #0
 800328c:	d1ed      	bne.n	800326a <__swbuf_r+0x2a>
 800328e:	68a3      	ldr	r3, [r4, #8]
 8003290:	3b01      	subs	r3, #1
 8003292:	60a3      	str	r3, [r4, #8]
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	6022      	str	r2, [r4, #0]
 800329a:	701e      	strb	r6, [r3, #0]
 800329c:	6962      	ldr	r2, [r4, #20]
 800329e:	1c43      	adds	r3, r0, #1
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d004      	beq.n	80032ae <__swbuf_r+0x6e>
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	07db      	lsls	r3, r3, #31
 80032a8:	d5e1      	bpl.n	800326e <__swbuf_r+0x2e>
 80032aa:	2e0a      	cmp	r6, #10
 80032ac:	d1df      	bne.n	800326e <__swbuf_r+0x2e>
 80032ae:	4621      	mov	r1, r4
 80032b0:	4628      	mov	r0, r5
 80032b2:	f7ff fca5 	bl	8002c00 <_fflush_r>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d0d9      	beq.n	800326e <__swbuf_r+0x2e>
 80032ba:	e7d6      	b.n	800326a <__swbuf_r+0x2a>

080032bc <__swsetup_r>:
 80032bc:	b538      	push	{r3, r4, r5, lr}
 80032be:	4b29      	ldr	r3, [pc, #164]	@ (8003364 <__swsetup_r+0xa8>)
 80032c0:	4605      	mov	r5, r0
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	460c      	mov	r4, r1
 80032c6:	b118      	cbz	r0, 80032d0 <__swsetup_r+0x14>
 80032c8:	6a03      	ldr	r3, [r0, #32]
 80032ca:	b90b      	cbnz	r3, 80032d0 <__swsetup_r+0x14>
 80032cc:	f7ff fa00 	bl	80026d0 <__sinit>
 80032d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032d4:	0719      	lsls	r1, r3, #28
 80032d6:	d422      	bmi.n	800331e <__swsetup_r+0x62>
 80032d8:	06da      	lsls	r2, r3, #27
 80032da:	d407      	bmi.n	80032ec <__swsetup_r+0x30>
 80032dc:	2209      	movs	r2, #9
 80032de:	602a      	str	r2, [r5, #0]
 80032e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032e4:	81a3      	strh	r3, [r4, #12]
 80032e6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ea:	e033      	b.n	8003354 <__swsetup_r+0x98>
 80032ec:	0758      	lsls	r0, r3, #29
 80032ee:	d512      	bpl.n	8003316 <__swsetup_r+0x5a>
 80032f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032f2:	b141      	cbz	r1, 8003306 <__swsetup_r+0x4a>
 80032f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032f8:	4299      	cmp	r1, r3
 80032fa:	d002      	beq.n	8003302 <__swsetup_r+0x46>
 80032fc:	4628      	mov	r0, r5
 80032fe:	f7ff fafb 	bl	80028f8 <_free_r>
 8003302:	2300      	movs	r3, #0
 8003304:	6363      	str	r3, [r4, #52]	@ 0x34
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	2300      	movs	r3, #0
 8003310:	6063      	str	r3, [r4, #4]
 8003312:	6923      	ldr	r3, [r4, #16]
 8003314:	6023      	str	r3, [r4, #0]
 8003316:	89a3      	ldrh	r3, [r4, #12]
 8003318:	f043 0308 	orr.w	r3, r3, #8
 800331c:	81a3      	strh	r3, [r4, #12]
 800331e:	6923      	ldr	r3, [r4, #16]
 8003320:	b94b      	cbnz	r3, 8003336 <__swsetup_r+0x7a>
 8003322:	89a3      	ldrh	r3, [r4, #12]
 8003324:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800332c:	d003      	beq.n	8003336 <__swsetup_r+0x7a>
 800332e:	4621      	mov	r1, r4
 8003330:	4628      	mov	r0, r5
 8003332:	f000 f883 	bl	800343c <__smakebuf_r>
 8003336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800333a:	f013 0201 	ands.w	r2, r3, #1
 800333e:	d00a      	beq.n	8003356 <__swsetup_r+0x9a>
 8003340:	2200      	movs	r2, #0
 8003342:	60a2      	str	r2, [r4, #8]
 8003344:	6962      	ldr	r2, [r4, #20]
 8003346:	4252      	negs	r2, r2
 8003348:	61a2      	str	r2, [r4, #24]
 800334a:	6922      	ldr	r2, [r4, #16]
 800334c:	b942      	cbnz	r2, 8003360 <__swsetup_r+0xa4>
 800334e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003352:	d1c5      	bne.n	80032e0 <__swsetup_r+0x24>
 8003354:	bd38      	pop	{r3, r4, r5, pc}
 8003356:	0799      	lsls	r1, r3, #30
 8003358:	bf58      	it	pl
 800335a:	6962      	ldrpl	r2, [r4, #20]
 800335c:	60a2      	str	r2, [r4, #8]
 800335e:	e7f4      	b.n	800334a <__swsetup_r+0x8e>
 8003360:	2000      	movs	r0, #0
 8003362:	e7f7      	b.n	8003354 <__swsetup_r+0x98>
 8003364:	20000030 	.word	0x20000030

08003368 <_raise_r>:
 8003368:	291f      	cmp	r1, #31
 800336a:	b538      	push	{r3, r4, r5, lr}
 800336c:	4605      	mov	r5, r0
 800336e:	460c      	mov	r4, r1
 8003370:	d904      	bls.n	800337c <_raise_r+0x14>
 8003372:	2316      	movs	r3, #22
 8003374:	6003      	str	r3, [r0, #0]
 8003376:	f04f 30ff 	mov.w	r0, #4294967295
 800337a:	bd38      	pop	{r3, r4, r5, pc}
 800337c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800337e:	b112      	cbz	r2, 8003386 <_raise_r+0x1e>
 8003380:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003384:	b94b      	cbnz	r3, 800339a <_raise_r+0x32>
 8003386:	4628      	mov	r0, r5
 8003388:	f000 f830 	bl	80033ec <_getpid_r>
 800338c:	4622      	mov	r2, r4
 800338e:	4601      	mov	r1, r0
 8003390:	4628      	mov	r0, r5
 8003392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003396:	f000 b817 	b.w	80033c8 <_kill_r>
 800339a:	2b01      	cmp	r3, #1
 800339c:	d00a      	beq.n	80033b4 <_raise_r+0x4c>
 800339e:	1c59      	adds	r1, r3, #1
 80033a0:	d103      	bne.n	80033aa <_raise_r+0x42>
 80033a2:	2316      	movs	r3, #22
 80033a4:	6003      	str	r3, [r0, #0]
 80033a6:	2001      	movs	r0, #1
 80033a8:	e7e7      	b.n	800337a <_raise_r+0x12>
 80033aa:	2100      	movs	r1, #0
 80033ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80033b0:	4620      	mov	r0, r4
 80033b2:	4798      	blx	r3
 80033b4:	2000      	movs	r0, #0
 80033b6:	e7e0      	b.n	800337a <_raise_r+0x12>

080033b8 <raise>:
 80033b8:	4b02      	ldr	r3, [pc, #8]	@ (80033c4 <raise+0xc>)
 80033ba:	4601      	mov	r1, r0
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	f7ff bfd3 	b.w	8003368 <_raise_r>
 80033c2:	bf00      	nop
 80033c4:	20000030 	.word	0x20000030

080033c8 <_kill_r>:
 80033c8:	b538      	push	{r3, r4, r5, lr}
 80033ca:	4d07      	ldr	r5, [pc, #28]	@ (80033e8 <_kill_r+0x20>)
 80033cc:	2300      	movs	r3, #0
 80033ce:	4604      	mov	r4, r0
 80033d0:	4608      	mov	r0, r1
 80033d2:	4611      	mov	r1, r2
 80033d4:	602b      	str	r3, [r5, #0]
 80033d6:	f7fd fbb0 	bl	8000b3a <_kill>
 80033da:	1c43      	adds	r3, r0, #1
 80033dc:	d102      	bne.n	80033e4 <_kill_r+0x1c>
 80033de:	682b      	ldr	r3, [r5, #0]
 80033e0:	b103      	cbz	r3, 80033e4 <_kill_r+0x1c>
 80033e2:	6023      	str	r3, [r4, #0]
 80033e4:	bd38      	pop	{r3, r4, r5, pc}
 80033e6:	bf00      	nop
 80033e8:	20001a34 	.word	0x20001a34

080033ec <_getpid_r>:
 80033ec:	f7fd bb9d 	b.w	8000b2a <_getpid>

080033f0 <__swhatbuf_r>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	460c      	mov	r4, r1
 80033f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f8:	2900      	cmp	r1, #0
 80033fa:	b096      	sub	sp, #88	@ 0x58
 80033fc:	4615      	mov	r5, r2
 80033fe:	461e      	mov	r6, r3
 8003400:	da0d      	bge.n	800341e <__swhatbuf_r+0x2e>
 8003402:	89a3      	ldrh	r3, [r4, #12]
 8003404:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003408:	f04f 0100 	mov.w	r1, #0
 800340c:	bf14      	ite	ne
 800340e:	2340      	movne	r3, #64	@ 0x40
 8003410:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003414:	2000      	movs	r0, #0
 8003416:	6031      	str	r1, [r6, #0]
 8003418:	602b      	str	r3, [r5, #0]
 800341a:	b016      	add	sp, #88	@ 0x58
 800341c:	bd70      	pop	{r4, r5, r6, pc}
 800341e:	466a      	mov	r2, sp
 8003420:	f000 f848 	bl	80034b4 <_fstat_r>
 8003424:	2800      	cmp	r0, #0
 8003426:	dbec      	blt.n	8003402 <__swhatbuf_r+0x12>
 8003428:	9901      	ldr	r1, [sp, #4]
 800342a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800342e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003432:	4259      	negs	r1, r3
 8003434:	4159      	adcs	r1, r3
 8003436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800343a:	e7eb      	b.n	8003414 <__swhatbuf_r+0x24>

0800343c <__smakebuf_r>:
 800343c:	898b      	ldrh	r3, [r1, #12]
 800343e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003440:	079d      	lsls	r5, r3, #30
 8003442:	4606      	mov	r6, r0
 8003444:	460c      	mov	r4, r1
 8003446:	d507      	bpl.n	8003458 <__smakebuf_r+0x1c>
 8003448:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	6123      	str	r3, [r4, #16]
 8003450:	2301      	movs	r3, #1
 8003452:	6163      	str	r3, [r4, #20]
 8003454:	b003      	add	sp, #12
 8003456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003458:	ab01      	add	r3, sp, #4
 800345a:	466a      	mov	r2, sp
 800345c:	f7ff ffc8 	bl	80033f0 <__swhatbuf_r>
 8003460:	9f00      	ldr	r7, [sp, #0]
 8003462:	4605      	mov	r5, r0
 8003464:	4639      	mov	r1, r7
 8003466:	4630      	mov	r0, r6
 8003468:	f7ff faba 	bl	80029e0 <_malloc_r>
 800346c:	b948      	cbnz	r0, 8003482 <__smakebuf_r+0x46>
 800346e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003472:	059a      	lsls	r2, r3, #22
 8003474:	d4ee      	bmi.n	8003454 <__smakebuf_r+0x18>
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	f043 0302 	orr.w	r3, r3, #2
 800347e:	81a3      	strh	r3, [r4, #12]
 8003480:	e7e2      	b.n	8003448 <__smakebuf_r+0xc>
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	6020      	str	r0, [r4, #0]
 8003486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800348a:	81a3      	strh	r3, [r4, #12]
 800348c:	9b01      	ldr	r3, [sp, #4]
 800348e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003492:	b15b      	cbz	r3, 80034ac <__smakebuf_r+0x70>
 8003494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003498:	4630      	mov	r0, r6
 800349a:	f000 f81d 	bl	80034d8 <_isatty_r>
 800349e:	b128      	cbz	r0, 80034ac <__smakebuf_r+0x70>
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	81a3      	strh	r3, [r4, #12]
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	431d      	orrs	r5, r3
 80034b0:	81a5      	strh	r5, [r4, #12]
 80034b2:	e7cf      	b.n	8003454 <__smakebuf_r+0x18>

080034b4 <_fstat_r>:
 80034b4:	b538      	push	{r3, r4, r5, lr}
 80034b6:	4d07      	ldr	r5, [pc, #28]	@ (80034d4 <_fstat_r+0x20>)
 80034b8:	2300      	movs	r3, #0
 80034ba:	4604      	mov	r4, r0
 80034bc:	4608      	mov	r0, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	602b      	str	r3, [r5, #0]
 80034c2:	f7fd fb9a 	bl	8000bfa <_fstat>
 80034c6:	1c43      	adds	r3, r0, #1
 80034c8:	d102      	bne.n	80034d0 <_fstat_r+0x1c>
 80034ca:	682b      	ldr	r3, [r5, #0]
 80034cc:	b103      	cbz	r3, 80034d0 <_fstat_r+0x1c>
 80034ce:	6023      	str	r3, [r4, #0]
 80034d0:	bd38      	pop	{r3, r4, r5, pc}
 80034d2:	bf00      	nop
 80034d4:	20001a34 	.word	0x20001a34

080034d8 <_isatty_r>:
 80034d8:	b538      	push	{r3, r4, r5, lr}
 80034da:	4d06      	ldr	r5, [pc, #24]	@ (80034f4 <_isatty_r+0x1c>)
 80034dc:	2300      	movs	r3, #0
 80034de:	4604      	mov	r4, r0
 80034e0:	4608      	mov	r0, r1
 80034e2:	602b      	str	r3, [r5, #0]
 80034e4:	f7fd fb99 	bl	8000c1a <_isatty>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d102      	bne.n	80034f2 <_isatty_r+0x1a>
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	b103      	cbz	r3, 80034f2 <_isatty_r+0x1a>
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
 80034f4:	20001a34 	.word	0x20001a34

080034f8 <_init>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr

08003504 <_fini>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr
